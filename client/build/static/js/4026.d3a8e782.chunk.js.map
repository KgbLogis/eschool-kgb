{"version":3,"file":"static/js/4026.d3a8e782.chunk.js","mappings":"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","sources":["components/shared-components/Flex/index.js","graphql/create.js","graphql/delete.js","views/app-views/subject/form.js","views/app-views/subject/table.js","views/app-views/subject/index.js"],"sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Flex = props => {\r\n\tconst { children, className, alignItems, justifyContent, mobileFlex, flexDirection } = props\r\n\tconst getFlexResponsive = () => mobileFlex ? 'd-flex' : 'd-md-flex'\r\n\treturn (\r\n\t\t<div className={`${getFlexResponsive()} ${className} ${flexDirection?('flex-' + flexDirection): ''} ${alignItems?('align-items-' + alignItems):''} ${justifyContent?('justify-content-' + justifyContent):''}` }>\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nFlex.propTypes = {\r\n\tclassName: PropTypes.string,\r\n\talignItems: PropTypes.string,\r\n\tflexDirection: PropTypes.string,\r\n\tjustifyContent: PropTypes.string,\r\n\tmobileFlex: PropTypes.bool\r\n}\r\n\r\nFlex.defaultProps = {\r\n\tmobileFlex: true,\r\n\tflexDirection: 'row',\r\n\tclassName: ''\r\n};\r\n\r\n\r\nexport default Flex\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const CREATE_SCHOOL = gql `\r\n    mutation createSchool($name: String, $nameMgl: String) {\r\n      createSchool(name: $name, nameMgl: $nameMgl) {\r\n        school {\r\n          id\r\n          name\r\n          nameMgl\r\n        }\r\n      }\r\n    }\r\n`;\r\n\r\nexport const CREATE_SUB_SCHOOL = gql `\r\n    mutation createSubSchool($name: String, $nameMgl: String, $school: Int!){\r\n      createSubSchool(name: $name, nameMgl: $nameMgl, school: $school) {\r\n        subSchool {\r\n          id\r\n          name\r\n          nameMgl \r\n          school {\r\n            id\r\n          }\r\n        }\r\n      }\r\n    }\r\n`;\r\n\r\nexport const REGISTER = gql `\r\n    mutation register($email: String!, $username: String!, $isTeacher: Boolean!, $isStudent: Boolean!, $password1: String!, $password2: String!){\r\n      register(email: $email, username: $username, isTeacher: $isTeacher, isStudent: $isStudent, password1: $password1, password2: $password2) {\r\n          success\r\n          errors\r\n          token\r\n      } \r\n    }\r\n\r\n`;\r\n\r\nexport const CREATE_TEACHER = gql `\r\n    mutation createTeacher($address: String, $birthCity: Int, $birthDistrict: Int, $birthdate: String, $degree: Int,\r\n                            $familyName: String, $joinBefore: String, $joinDate: String, $name: String, $phone: String, $phone2: String,\r\n                            $registerNo: String, $school: Int, $sex: String, $status: Int, $subSchool: Int, $teacherCode: String!,\r\n                            $username: String!, $password: String!, $email: String!, $access: String!\r\n                            # $user: Int\r\n                            ) {\r\n      createTeacher(address: $address, birthCity: $birthCity, birthDistrict: $birthDistrict, birthdate: $birthdate, degree: $degree,\r\n                             familyName: $familyName, joinBefore: $joinBefore, joinDate: $joinDate, name: $name, phone: $phone, phone2: $phone2, \r\n                            registerNo: $registerNo, school: $school, sex: $sex, status: $status, subSchool: $subSchool, \r\n                            teacherCode: $teacherCode, access: $access,\r\n                            username: $username, password: $password, email: $email\r\n                            # user: $user \r\n                            ) {\r\n        teacher {\r\n          id\r\n        }\r\n      }\r\n    }\r\n`;\r\n\r\nexport const CREATE_EMPLOYEE = gql `\r\n    mutation createEmployee(\r\n                $address: String\r\n                $birthCity: Int\r\n                $birthDistrict: Int\r\n                $birthdate: String\r\n                $email: String!\r\n                $employeeCode: String!\r\n                $familyName: String\r\n                $group: Int\r\n                $name: String\r\n                $password: String!\r\n                $phone: String\r\n                $phone2: String\r\n                $photo: Upload\r\n                $registerNo: String\r\n                $sex: String\r\n                $status: Int\r\n                $compartment: Int\r\n                $username: String!\r\n              ) {\r\n      createEmployee(\r\n                address: $address\r\n                birthCity: $birthCity\r\n                birthDistrict: $birthDistrict\r\n                birthdate: $birthdate\r\n                email: $email\r\n                employeeCode: $employeeCode\r\n                familyName: $familyName\r\n                group: $group\r\n                name: $name\r\n                password: $password\r\n                phone: $phone\r\n                phone2: $phone2\r\n                photo: $photo\r\n                compartment: $compartment\r\n                registerNo: $registerNo\r\n                sex: $sex\r\n                status: $status\r\n                username: $username\r\n          ) {\r\n          employee {\r\n          id\r\n        }\r\n      }\r\n    }\r\n`;\r\n\r\nexport const CREATE_STUDENT = gql `\r\n    mutation createStudent($activity: Int, $address: String, $birthCity: Int, $birthDistrict: Int, $birthdate: String,\r\n                            $classes: Int, $classtime: Int, $familyName: String, $joinDate: String,\r\n                            $joinSchoolyear: String, $name: String, $nationality: String, $phone: String, $program: Int, \r\n                            $registerNo: String, $religion: String, $school: Int, $section: Int, $sex: String, $state: String, $status: Int, \r\n                            $statusExtra: Int, $surname: String, $studentCode: String,\r\n                            $username: String!, $password: String!) {\r\n      createStudent(activity: $activity, address: $address, birthCity: $birthCity, birthDistrict: $birthDistrict, birthdate: $birthdate, \r\n                    classes: $classes, familyName: $familyName, joinDate: $joinDate, name: $name, phone: $phone, \r\n                    registerNo: $registerNo, religion: $religion, school: $school, sex: $sex, status: $status,\r\n                    surname: $surname, studentCode: $studentCode, classtime: $classtime, joinSchoolyear: $joinSchoolyear, \r\n                    nationality: $nationality, program: $program, section: $section, state: $state, statusExtra: $statusExtra,\r\n                    username: $username, password: $password, email: \"test@test.mn\") {\r\n        student {\r\n          id\r\n        }\r\n      }\r\n    }\r\n`;\r\n\r\nexport const CREATE_SECTION = gql `\r\n  mutation createSection($classes: Int, $maxStudentNum: Int, $program: Int, $teacher: Int,  $school: Int, $section: String) {\r\n    createSection(classes: $classes, program: $program, school: $school, section: $section, maxStudentNum: $maxStudentNum, teacher: $teacher) {\r\n      section {\r\n        section\r\n      }\r\n    }\r\n  }\r\n`\r\nexport const CREATE_CLASSES = gql `\r\n  mutation createClasses($activity: Int, $classes: String,\r\n                          $program: Int, $school: Int, $status: String) {\r\n    createClasses(activity: $activity, classes: $classes,\r\n                  program: $program, school: $school, status: $status) {\r\n      classes {\r\n        classes\r\n      }\r\n    }\r\n  }\r\n`\r\nexport const CREATE_PROGRAM = gql `\r\n    mutation createProgram($program: String, $programMgl: String,  \r\n                           $status: String, $maxStudentNum: Int, $school: Int, $subSchool: Int) {\r\n      createProgram(program: $program, programMgl: $programMgl,  \r\n                    status: $status, maxStudentNum: $maxStudentNum, school: $school, subSchool: $subSchool) {\r\n        program {\r\n          id\r\n        }\r\n      }\r\n    }\r\n`;\r\n\r\nexport const CREATE_SUBJECT = gql `\r\n  mutation createSubject($credit: String, $subject: String, $content: String, $school: Int, $subSchool: Int) {\r\n    createSubject(credit: $credit, subject: $subject, school: $school, content: $content, subSchool: $subSchool) {\r\n      subject {\r\n        credit\r\n      }\r\n    }\r\n  }\r\n`\r\nexport const CREATE_PROGRAM_SUBJECT = gql `\r\n  mutation createProgramSubject($program: Int, $subject: Int) {\r\n    createProgramSubject(program: $program, subject: $subject) {\r\n      programSubjectType {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CREATE_ROUTINE_STUDENT = gql `\r\n  mutation createRoutineStudent ($routine: Int, $studentCode: String, $section: Int) {\r\n    createRoutineStudent (routine: $routine, studentCode: $studentCode, section: $section) {\r\n      routineStudent {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const CREATE_PARENT = gql `\r\n    mutation createParent ($address: String, $familyName: String, $name: String, $phone: String, $profession: String, $student: Int) {\r\n        createParent (address: $address, familyName: $familyName, name: $name, phone: $phone, profession: $profession, student: $student) {\r\n            parent {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_EVENT_TYPE = gql `\r\n    mutation createEventType ($color: String, $name: String) {\r\n        createEventType (color: $color, name: $name) {\r\n            eventType {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_EVENT = gql`\r\n    mutation createEvent ($content: String, $description: String, $endAt: String, $eventType: Int, $startAt: String, $title: String) {\r\n        createEvent (content: $content, description: $description, endAt: $endAt, eventType: $eventType, startAt: $startAt, title: $title) {\r\n            event {\r\n                title\r\n            }\r\n        }\r\n    }\r\n`;","import { gql } from '@apollo/client'\r\n\r\nexport const DELETE_CITY = gql `\r\n    mutation deleteCity($id: ID!){\r\n        deleteCity(id: $id){\r\n            city{\r\n              name\r\n              code\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const DELETE_USER = gql `\r\n    mutation deleteAccount($username: String) {\r\n        deleteAccount(username: $username) {\r\n            account {\r\n                username\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const DELETE_TEACHER = gql `\r\n    mutation deleteTeacher($id: ID!){\r\n      deleteTeacher(id: $id){\r\n            teacher{\r\n              name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_EMPLOYEES = gql `\r\n  mutation deleteEmployee($id: ID){\r\n    deleteEmployee(id: $id){\r\n      employee{\r\n        name\r\n      }\r\n    }\r\n  }\r\n  `;\r\n\r\nexport const DELETE_SUBJECT = gql `\r\n  mutation deleteSubject ($id: ID) {\r\n    deleteSubject (id: $id) {\r\n      subject {\r\n        credit\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const DELETE_STUDENT = gql `\r\n    mutation deleteStudent($id: ID!){\r\n      deleteStudent(id: $id){\r\n            student{\r\n              surname\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const DELETE_SUB_SCHOOL = gql `\r\n  mutation deleteSubSchool($id: ID){\r\n    deleteSubSchool(id: $id){\r\n      subSchool{\r\n        name\r\n      }\r\n    }\r\n}\r\n`\r\n\r\nexport const DELETE_SCHOOL = gql `\r\n  mutation deleteSchool($id: ID!){\r\n    deleteSchool(id: $id){\r\n      school{\r\n        name\r\n      }\r\n    }\r\n}\r\n`\r\n\r\nexport const DELETE_SECTION = gql `\r\n  mutation deleteSection($id: ID){\r\n    deleteSection(id: $id){\r\n      section{\r\n        section\r\n      }\r\n    }\r\n}\r\n`\r\n\r\nexport const DELETE_CLASS = gql `\r\n  mutation deleteClasses($id: ID!){\r\n    deleteClasses(id: $id){\r\n      classes{\r\n        classes\r\n      }\r\n    }\r\n}\r\n`\r\n\r\nexport const DELETE_PROGRAM = gql `\r\n    mutation deleteProgram($id: ID!){\r\n        deleteProgram(id: $id){\r\n            program{\r\n                program\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_ROUTINE = gql `\r\n    mutation deleteRoutine ($id: ID) {\r\n        deleteRoutine (id: $id) {\r\n            routine {\r\n                createdAt\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_PARENT = gql `\r\n    mutation deleteParent ($id: ID) {\r\n        deleteParent (id: $id) {\r\n            parent {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_EVENT_TYPE = gql `\r\n    mutation deleteEventType ($id: ID) {\r\n        deleteEventType (id: $id) {\r\n            eventType {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_EVENT = gql`\r\n    mutation deleteEvent ($id: ID) {\r\n        deleteEvent (id: $id) {\r\n            event {\r\n                title\r\n            }\r\n        }\r\n    }\r\n`;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Form, Input, message, Spin, Select } from 'antd';\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { ALL_SUB_SCHOOLS, ALL_SCHOOLS } from 'graphql/all'\r\nimport { CREATE_SUBJECT } from 'graphql/create'\r\nimport { UPDATE_SUBJECT } from 'graphql/update'\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport { subjectNames } from 'utils';\r\n\r\nconst { Option } = Select;\r\n\r\nfunction SubjectForm({ editData, formType, setIsModalVisible, refetch }) {\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const [createSubject, { loading: createLoading }] = useMutation(CREATE_SUBJECT, {\r\n        onCompleted: createData => {\r\n            message.success('Амжилттай хадгаллаа');\r\n            refetch();\r\n            setIsModalVisible(false);\r\n            form.resetFields();\r\n        }\r\n    });\r\n\r\n    const [updateSubject, { loading: updateLoading }] = useMutation(UPDATE_SUBJECT, {\r\n        onCompleted: data => {\r\n            message.success('Амжилттай хадгаллаа');\r\n            refetch();\r\n            setIsModalVisible(false);\r\n            form.resetFields();\r\n        }\r\n    })\r\n\r\n    const { data: schoolData } = useQuery(ALL_SCHOOLS, {\r\n    });\r\n\r\n    const { data: subSchoolData } = useQuery(ALL_SUB_SCHOOLS, {\r\n    });\r\n\r\n\r\n    const [school, setSchool] = useState(\"\");\r\n\r\n    function schoolOnChange(value) {\r\n        setSchool(value);\r\n        form.setFieldsValue({ subSchool: null });\r\n    }\r\n\r\n    let schoolID = null;\r\n\r\n    let subSchoolOption = null;\r\n\r\n    if (school) {\r\n        schoolID = school;\r\n    }\r\n\r\n    if (schoolID) {\r\n        subSchoolOption = subSchoolData?.allSubSchools.filter(Subschool => Subschool.school.id === schoolID).map(filteredSubSchool => (\r\n            <Option key={filteredSubSchool.id} value={filteredSubSchool.id}>{filteredSubSchool.name}</Option>\r\n        ))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (formType === \"edit\") {\r\n            const newData = {\r\n                subject: editData.subject,\r\n                content: editData.content,\r\n                school: editData.school.id,\r\n                subSchool: editData.subSchool.id,\r\n                credit: editData.credit,\r\n                key: editData.id,\r\n            }\r\n            form.setFieldsValue(newData);\r\n            setSchool(form.getFieldValue('school'));\r\n        } else if (formType === \"create\") {\r\n            form.resetFields();\r\n        }\r\n    }, [editData, form, formType]);\r\n\r\n    const onFinish = values => {\r\n        if (formType === \"edit\") {\r\n            values.id = editData.id\r\n            updateSubject({ variables: values });\r\n        } else {\r\n            createSubject({ variables: values });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Spin spinning={createLoading || updateLoading} tip=\"Ачааллаж байна...\">\r\n            <Form\r\n                id=\"SubjectForm\"\r\n                layout={'vertical'}\r\n                form={form}\r\n                name=\"control-hooks\"\r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item name=\"subject\" label={<IntlMessage id=\"subject\" />} rules={[\r\n                    {\r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    }\r\n                ]}>\r\n                    <Select>\r\n                        {subjectNames.map((subject, index) => (\r\n                            <Option\r\n                                value={subject.label}\r\n                                key={index}\r\n                            >\r\n                                {subject.label}\r\n                            </Option>\r\n                        ))}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item name=\"content\" label={<IntlMessage id=\"content\" />} rules={[\r\n                    {\r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    }\r\n                ]}>\r\n                    <Input.TextArea />\r\n                </Form.Item>\r\n                <Form.Item name=\"school\" label={<IntlMessage id=\"school\" />} rules={[\r\n                    {\r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    }\r\n                ]}>\r\n                    <Select\r\n                        onChange={schoolOnChange}\r\n                    >\r\n                        {schoolData?.allSchools.map((school, index) => (\r\n                            <Option key={index} value={school.id}>{school.name}</Option>\r\n                        ))}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item name=\"subSchool\" label={<IntlMessage id=\"sub-school\" />} rules={[\r\n                    {\r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    }\r\n                ]}>\r\n                    <Select\r\n                        placeholder=\"Заах аргын нэгдэл\"\r\n                    >\r\n                        {subSchoolOption}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item name=\"credit\" label={<IntlMessage id=\"credit\" />} rules={[\r\n                    {\r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    }\r\n                ]}>\r\n                    <Input />\r\n                </Form.Item>\r\n            </Form>\r\n        </Spin>\r\n    );\r\n};\r\n\r\nexport default SubjectForm","import React, { useState } from 'react'\r\nimport { Modal, message, Button, Table, Card, Input } from 'antd';\r\nimport { DeleteTwoTone, EditTwoTone, SearchOutlined, PlusCircleOutlined } from '@ant-design/icons';\r\nimport utils from 'utils'\r\nimport SubjectForm from './form'\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { ALL_SUBJECTS_PAGINATION } from 'graphql/all';\r\nimport { DELETE_SUBJECT } from 'graphql/delete';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport Flex from 'components/shared-components/Flex';\r\nimport Loading from 'components/shared-components/Loading';\r\n\r\nfunction SubjectTable({ permissions }) {\r\n\r\n\tconst [page, setPage] = useState(1);\r\n\tconst [perPage, setPerPage] = useState(10)\r\n\tconst [filter, setFilter] = useState(\"\");\r\n\tconst [isModalVisible, setIsModalVisible] = useState(false);\r\n\tconst [editData, setEditData] = useState([]);\r\n\tconst [formType, setFormType] = useState(\"\");\r\n\r\n\tconst { loading, refetch, data } = useQuery(ALL_SUBJECTS_PAGINATION, {\r\n\t\tvariables: { page: page, perPage: perPage, filter: filter }\r\n\t});\r\n\r\n\tconst editRow = row => {\r\n\t\tsetEditData(row);\r\n\t\tsetFormType(\"edit\")\r\n\t\tsetIsModalVisible(true);\r\n\t};\r\n\r\n\tconst { confirm } = Modal;\r\n\r\n\tconst [deleteSubSchool] = useMutation(DELETE_SUBJECT, {\r\n\t\tonCompleted: data => {\r\n\t\t\trefetch();\r\n\t\t\tmessage.success('Амжилттай устлаа');\r\n\t\t}\r\n\t});\r\n\r\n\tfunction deleteRow(row) {\r\n\t\tconfirm({\r\n\t\t\ttitle: 'Устгах уу?',\r\n\t\t\tokText: 'Устгах',\r\n\t\t\tokType: 'danger',\r\n\t\t\tcancelText: 'Болих',\r\n\t\t\tonOk() {\r\n\t\t\t\tdeleteSubSchool({ variables: { id: row.id } });\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n\r\n\tconst tableColumns = [\r\n\t\t{\r\n\t\t\ttitle: <IntlMessage id=\"subject\" />,\r\n\t\t\tkey: 'subject',\r\n\t\t\tdataIndex: 'subject',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'subject')\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: <IntlMessage id=\"teacher\" />,\r\n\t\t\tkey: 'teacher',\r\n\t\t\tdataIndex: ['createUserid', 'teacher', 'name'],\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'teacher')\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: <IntlMessage id=\"content\" />,\r\n\t\t\tkey: 'content',\r\n\t\t\tdataIndex: 'content',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'content')\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: <IntlMessage id=\"school\" />,\r\n\t\t\tdataIndex: ['school', 'name'],\r\n\t\t\tkey: 'school',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'school')\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: <IntlMessage id=\"sub-school\" />,\r\n\t\t\tdataIndex: ['subSchool', 'name'],\r\n\t\t\tkey: 'subSchool',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'subSchool')\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: <IntlMessage id=\"credit\" />,\r\n\t\t\tdataIndex: 'credit',\r\n\t\t\tkey: 'credit',\r\n\t\t\t// render(elm) {\r\n\t\t\t//     return (\r\n\t\t\t//          <span>{Math.floor(elm)}</span>\r\n\t\t\t//     );\r\n\t\t\t// },\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'credit')\r\n\t\t},\r\n\t];\r\n\tif (permissions.edit === true || permissions.destroy === true) {\r\n\t\ttableColumns.push(\r\n\t\t\t{\r\n\t\t\t\ttitle: <IntlMessage id=\"main.action\" />,\r\n\t\t\t\tkey: 'actions',\r\n\t\t\t\tdataIndex: 'actions',\r\n\t\t\t\twidth: '15vw',\r\n\t\t\t\trender: (_, elm) => (\r\n\t\t\t\t\t<div className=\"text-center\">\r\n\t\t\t\t\t\t{permissions.edit === true &&\r\n\t\t\t\t\t\t\t<Button size=\"small\" onClick={() => editRow(elm)} type=\"text\" icon={<EditTwoTone twoToneColor=\"#ffdb00\" />} > <IntlMessage id=\"edit\" /></Button>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t{permissions.destroy === true &&\r\n\t\t\t\t\t\t\t<Button size=\"small\" onClick={() => deleteRow(elm)} type=\"text\" icon={<DeleteTwoTone twoToneColor=\"#f42f2f\" />} > <IntlMessage id=\"delete\" /></Button>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n\r\n\tconst showModal = () => {\r\n\t\tsetFormType(\"create\")\r\n\t\tsetIsModalVisible(true);\r\n\t};\r\n\r\n\tconst handleCancel = () => {\r\n\t\tsetIsModalVisible(false);\r\n\t};\r\n\r\n\tconst onSearch = e => {\r\n\t\tconst value = e.currentTarget.value\r\n\t\tsetFilter(value)\r\n\t\tsetPage(1)\r\n\t}\r\n\r\n\tfunction handleTableChange (pagination, filters, sorter) {\r\n\t\tsetPage(pagination.current);\r\n\t\tsetPerPage(pagination.pageSize)\r\n\t}\r\n\r\n\tif (loading) {\r\n\t\treturn <Loading cover='content' />\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Modal\r\n\t\t\t\tforceRender\r\n\t\t\t\ttitle={editData ? <IntlMessage id=\"edit\" /> : <IntlMessage id=\"add_new\" />}\r\n\t\t\t\tvisible={isModalVisible}\r\n\t\t\t\tokText={<IntlMessage id=\"main.okText\" />}\r\n\t\t\t\tcancelText={<IntlMessage id=\"main.cancelText\" />}\r\n\t\t\t\tonCancel={handleCancel}\r\n\t\t\t\tokButtonProps={{ form: 'SubjectForm', key: 'submit', htmlType: 'submit' }}\r\n\t\t\t>\r\n\t\t\t\t<SubjectForm\r\n\t\t\t\t\trefetch={refetch}\r\n\t\t\t\t\teditData={editData}\r\n\t\t\t\t\tformType={formType}\r\n\t\t\t\t\tsetIsModalVisible={setIsModalVisible}\r\n\t\t\t\t/>\r\n\t\t\t</Modal>\r\n\t\t\t<Card>\r\n\t\t\t\t<Flex alignItems=\"center\" justifyContent=\"between\" mobileFlex={false}>\r\n\t\t\t\t\t<Flex className=\"mb-1\" mobileFlex={false}>\r\n\t\t\t\t\t\t<div className=\"mr-md-3 mb-3\">\r\n\t\t\t\t\t\t\t<Input placeholder={'Хайх'} prefix={<SearchOutlined />} onChange={e => onSearch(e)} />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Flex>\r\n\t\t\t\t\t{permissions.create === true &&\r\n\t\t\t\t\t\t<div className=\"mr-md-3 mb-3\">\r\n\t\t\t\t\t\t\t<Button onClick={showModal} type=\"primary\" icon={<PlusCircleOutlined />} block> <IntlMessage id=\"add_new\" /></Button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t</Flex>\r\n\t\t\t\t<div className=\"table-responsive\">\r\n\t\t\t\t\t<Table\r\n\t\t\t\t\t\tsize=\"small\"\r\n\t\t\t\t\t\tcolumns={tableColumns}\r\n\t\t\t\t\t\tdataSource={data.allSubjectsPagination.records}\r\n\t\t\t\t\t\trowKey='id'\r\n\t\t\t\t\t\tbordered\r\n\t\t\t\t\t\tloading={loading}\r\n\t\t\t\t\t\tpagination={{\r\n\t\t\t\t\t\t\tcurrent: page,\r\n\t\t\t\t\t\t\tpageSize: perPage,\r\n\t\t\t\t\t\t\ttotal: data.allSubjectsPagination.totalCount\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\tonChange={handleTableChange}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</Card>\r\n\t\t</>\r\n\r\n\t)\r\n}\r\n\r\nexport default SubjectTable\r\n","import React from \"react\";\r\nimport SubjectTable from './table';\r\nimport { CheckPer } from 'hooks/checkPermission';\r\nimport Loading from \"components/shared-components/Loading\";\r\n\r\nconst Index = () => {\r\n\r\n    const create = CheckPer('add_subject');\r\n    const edit = CheckPer('change_subject');\r\n    const destroy = CheckPer('delete_subject');\r\n\r\n    const permissions = {\r\n        create: create,\r\n        edit: edit,\r\n        destroy: destroy\r\n    }\r\n\r\n    if (Object.values(permissions).indexOf('loading') > -1) {\r\n        return <Loading cover=\"content\" />\r\n    }\r\n\r\n    return (\r\n        <SubjectTable permissions={permissions} />\r\n    )\r\n}\r\n\r\nexport default Index;\r\n"],"names":["Flex","props","children","className","alignItems","justifyContent","mobileFlex","flexDirection","defaultProps","CREATE_SCHOOL","gql","CREATE_SUB_SCHOOL","CREATE_TEACHER","CREATE_EMPLOYEE","CREATE_STUDENT","CREATE_SECTION","CREATE_CLASSES","CREATE_PROGRAM","CREATE_SUBJECT","CREATE_PARENT","CREATE_EVENT_TYPE","CREATE_EVENT","DELETE_TEACHER","DELETE_EMPLOYEES","DELETE_SUBJECT","DELETE_STUDENT","DELETE_SUB_SCHOOL","DELETE_SCHOOL","DELETE_SECTION","DELETE_CLASS","DELETE_PROGRAM","DELETE_ROUTINE","DELETE_PARENT","DELETE_EVENT_TYPE","DELETE_EVENT","Option","Select","editData","formType","setIsModalVisible","refetch","Form","form","useMutation","onCompleted","createData","message","resetFields","createSubject","createLoading","loading","UPDATE_SUBJECT","data","updateSubject","updateLoading","schoolData","useQuery","ALL_SCHOOLS","subSchoolData","ALL_SUB_SCHOOLS","useState","school","setSchool","schoolID","subSchoolOption","allSubSchools","filter","Subschool","id","map","filteredSubSchool","value","name","useEffect","newData","subject","content","subSchool","credit","key","setFieldsValue","getFieldValue","spinning","tip","layout","onFinish","values","variables","label","IntlMessage","rules","required","subjectNames","index","onChange","allSchools","placeholder","permissions","page","setPage","perPage","setPerPage","setFilter","isModalVisible","setEditData","setFormType","ALL_SUBJECTS_PAGINATION","confirm","Modal","deleteSubSchool","tableColumns","title","dataIndex","sorter","a","b","utils","edit","destroy","push","width","render","_","elm","size","onClick","type","icon","EditTwoTone","twoToneColor","row","okText","okType","cancelText","onOk","DeleteTwoTone","Loading","cover","forceRender","visible","onCancel","okButtonProps","htmlType","prefix","SearchOutlined","e","currentTarget","onSearch","create","PlusCircleOutlined","block","columns","dataSource","allSubjectsPagination","records","rowKey","bordered","pagination","current","pageSize","total","totalCount","filters","CheckPer","Object","indexOf"],"sourceRoot":""}