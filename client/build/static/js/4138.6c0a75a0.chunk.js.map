{"version":3,"file":"static/js/4138.6c0a75a0.chunk.js","mappings":"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","sources":["components/shared-components/Flex/index.js","components/util-components/CustomIcon/index.js","graphql/test.js","views/app-views/questions/form.js","views/app-views/questions/question.js","views/app-views/questions/index.js","../node_modules/@ant-design/icons-svg/es/asn/MinusCircleOutlined.js","../node_modules/@ant-design/icons/es/icons/MinusCircleOutlined.js","../node_modules/@ant-design/icons-svg/es/asn/RollbackOutlined.js","../node_modules/@ant-design/icons/es/icons/RollbackOutlined.js","../node_modules/antd/es/_util/transButton.js","../node_modules/antd/es/divider/index.js"],"sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Flex = props => {\r\n\tconst { children, className, alignItems, justifyContent, mobileFlex, flexDirection } = props\r\n\tconst getFlexResponsive = () => mobileFlex ? 'd-flex' : 'd-md-flex'\r\n\treturn (\r\n\t\t<div className={`${getFlexResponsive()} ${className} ${flexDirection?('flex-' + flexDirection): ''} ${alignItems?('align-items-' + alignItems):''} ${justifyContent?('justify-content-' + justifyContent):''}` }>\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nFlex.propTypes = {\r\n\tclassName: PropTypes.string,\r\n\talignItems: PropTypes.string,\r\n\tflexDirection: PropTypes.string,\r\n\tjustifyContent: PropTypes.string,\r\n\tmobileFlex: PropTypes.bool\r\n}\r\n\r\nFlex.defaultProps = {\r\n\tmobileFlex: true,\r\n\tflexDirection: 'row',\r\n\tclassName: ''\r\n};\r\n\r\n\r\nexport default Flex\r\n","import React from 'react'\r\nimport Icon from '@ant-design/icons';\r\n\r\nconst CustomIcon = React.forwardRef((props, _) => <Icon component={props.svg} className={props.className}/>)\r\n\r\nexport default CustomIcon\r\n","import { gql } from \"@apollo/client\";\r\n\r\nexport const ALL_ONLINE_TESTS = gql `\r\n    query allOnlineTests {\r\n        allOnlineTests {\r\n            id\r\n            title\r\n            description\r\n            subject {\r\n                id\r\n                subject\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_ONLINE_TEST = gql `\r\n    mutation createOnlineTest ($description: String, $subject: Int, $title: String) {\r\n        createOnlineTest (description: $description, subject: $subject, title: $title) {\r\n            onlineTest {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_ONLINE_TEST = gql `\r\n    mutation updateOnlineTest ($description: String, $id: ID, $subject: Int, $title: String) {\r\n        updateOnlineTest (description: $description, id: $id, subject: $subject, title: $title) {\r\n            OnlineTest {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_ONLINE_TEST = gql `\r\n    mutation deleteOnlineTest ($id: ID) {\r\n        deleteOnlineTest (id: $id) {\r\n            onlineTest {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_QUESTION_LEVELS = gql `\r\n    query allQuestionLevels {\r\n        allQuestionLevels {\r\n            level\r\n            id\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_QUESTION_LEVEL = gql `\r\n    mutation createQuestionLevel ($level: String) {\r\n        createQuestionLevel (level: $level) {\r\n            questionLevel {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_QUESTION_LEVEL = gql `\r\n    mutation updateQuestionLevel ($level: String, $id: ID) {\r\n        updateQuestionLevel (level: $level, id: $id) {\r\n            questionLevel {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_QUESTION_LEVEL = gql `\r\n    mutation deleteQuestionLevel ($id: ID) {\r\n        deleteQuestionLevel (id: $id) {\r\n            questionLevel {\r\n                level\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_QUESTIONS_BY_TEST = gql `\r\n    query allQuestionsByTest ($id: Int!) {\r\n        allQuestionsByTest (id: $id) {\r\n            id\r\n            question\r\n            hint\r\n            image\r\n            answerType\r\n            questionLevel {\r\n                id\r\n                level\r\n            }\r\n            questionChoiceSet {\r\n                id\r\n                answer\r\n                score\r\n            }\r\n        }\r\n    }\r\n`; \r\n\r\nexport const CREATE_QUESTION = gql `\r\n    mutation createQuestion ($answerType: String, $hint: String, $image: Upload, $onlineTest: Int, $questionL: String, $questionLevel: Int) {\r\n        createQuestion (answerType: $answerType, hint: $hint, image: $image, onlineTest: $onlineTest, questionL: $questionL, questionLevel: $questionLevel) {\r\n            question {\r\n                id\r\n                answerType\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_QUESTION = gql `\r\n    mutation updateQuestion ($answerType: String, $hint: String, $image: Upload, $onlineTest: Int, $questionL: String, $questionLevel: Int, $id: ID) {\r\n        updateQuestion (answerType: $answerType, hint: $hint, image: $image, onlineTest: $onlineTest, questionL: $questionL, questionLevel: $questionLevel, id: $id) {\r\n            question {\r\n                id\r\n                answerType\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_QUESTION = gql `\r\n    mutation deleteQuestion ($id: ID) {\r\n        deleteQuestion (id: $id) {\r\n            question {\r\n                question\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_QUESTION_CHOICE = gql `\r\n    mutation createQuestionChoice ($answer: String, $question: Int, $score: Decimal) {\r\n        createQuestionChoice (answer: $answer, question: $question, score: $score) {\r\n            questionChoice {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_QUESTION_CHOICE = gql `\r\n    mutation updateQuestionChoice ($answer: String, $question: Int, $score: Decimal, $id: ID) {\r\n        updateQuestionChoice (answer: $answer, question: $question, score: $score, id: $id) {\r\n            questionChoice {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_QUESTION_CHOICE = gql `\r\n    mutation deleteQuestionChoice ($id: ID) {\r\n        deleteQuestionChoice (id: $id) {\r\n            questionChoice {\r\n                score\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_TAKE_TEST = gql `\r\n    query allTakeTests {\r\n        allTakeTests {\r\n            id\r\n            title\r\n            description\r\n            startAt\r\n            endAt\r\n            duration\r\n            status\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_TAKE_TEST = gql `\r\n    mutation createTakeTest ($duration: Int, $endAt: String, $startAt: String, $status: String, $description: String, $title: String) {\r\n        createTakeTest (duration: $duration, endAt: $endAt, startAt: $startAt, status: $status, description: $description, title: $title) {\r\n            takeTest {\r\n                status\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_TAKE_TEST = gql `\r\n    mutation updateTakeTest ($duration: Int, $endAt: String, $startAt: String, $status: String, $id: ID, $description: String, $title: String) {\r\n        updateTakeTest (duration: $duration, endAt: $endAt, startAt: $startAt, status: $status, id: $id, description: $description, title: $title) {\r\n            takeTest {\r\n                status\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_TAKE_TEST = gql `\r\n    mutation deleteTakeTest ($id: ID) {\r\n        deleteTakeTest (id: $id) {\r\n            takeTest {\r\n                status\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_PARTICIPANT_BY_TEST = gql `\r\n    query allParticipantByTest ($takeTest: Int!) {\r\n        allParticipantByTest (takeTest: $takeTest) {\r\n            id\r\n            student {\r\n                studentCode\r\n                familyName\r\n                name\r\n            }\r\n            started\r\n            completed\r\n            answerSet {\r\n                answerType\r\n                questionText\r\n                choices\r\n                score\r\n                givenAnswer\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_PARTICIPANT = gql `\r\n    mutation createParticipant ($section: Int, $studentCode: String, $takeTest: Int) {\r\n        createParticipant (section: $section, studentCode: $studentCode, takeTest: $takeTest) {\r\n            participant {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_PARTICIPANT = gql `\r\n    mutation deleteParticipant ($id: ID, $takeTest: Int) {\r\n        deleteParticipant (id: $id, takeTest: $takeTest) {\r\n            participant {\r\n                started\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_TAKE_LEVEL = gql `\r\n    query allTakeLevelByTest ($takeTest: Int!) {\r\n        allTakeLevelByTest (takeTest: $takeTest) {\r\n            id\r\n            onlineTest {\r\n                id\r\n                title\r\n            }\r\n            questionLevel {\r\n                id\r\n                level\r\n            }\r\n            takeNumber\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_TAKE_LEVEL = gql `\r\n    mutation createTakeLevel ($onlineTest: Int, $questionLevel: Int, $takeNumber: Int, $takeTest: Int) {\r\n        createTakeLevel (onlineTest: $onlineTest, questionLevel: $questionLevel, takeNumber: $takeNumber, takeTest: $takeTest) {\r\n            takeLevel {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_TAKE_LEVEL = gql `\r\n    mutation deleteTakeLevel ($id: ID) {\r\n        deleteTakeLevel (id: $id) {\r\n            takeLevel {\r\n                takeNumber\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_SECTIONS = gql `\r\n    query allSections {\r\n        allSections {\r\n            id\r\n            section\r\n            studentSet {\r\n                id\r\n                studentCode\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const START_TEST = gql `\r\n    query startTest ($takeTest: Int!) {\r\n        startTest (takeTest: $takeTest) {\r\n            id\r\n            questionText\r\n            choices\r\n            answerType\r\n            givenAnswer\r\n            question {\r\n                hint\r\n                image\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_ANSWER = gql `\r\n    mutation updateAnswer ($givenAnswer: String, $id: ID) {\r\n        updateAnswer (givenAnswer: $givenAnswer, id: $id) {\r\n            answer {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const TEST_TIME = gql `\r\n    query testTime ($takeTest: Int!) {\r\n        testTime (takeTest: $takeTest) {\r\n            duration\r\n            started\r\n            endAt\r\n        }\r\n    }\r\n`;\r\n\r\nexport const FINISH_TEST = gql `\r\n    query finishTest ($takeTest: Int!) {\r\n        finishTest (takeTest: $takeTest) {\r\n            score\r\n        }\r\n    }\r\n`;","import React, { useRef, useEffect, useState } from 'react';\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport { Input, Form, Card, Select, message, Modal, Button, InputNumber, Upload, Divider } from 'antd';\r\nimport { DeleteTwoTone, MinusCircleOutlined, PlusOutlined } from '@ant-design/icons'\r\nimport { ALL_QUESTION_LEVELS, DELETE_QUESTION, DELETE_QUESTION_CHOICE } from 'graphql/test';\r\nimport { ImageSvg } from 'assets/svg/icon';\r\nimport CustomIcon from 'components/util-components/CustomIcon';\r\nimport { BASE_SERVER_URL } from 'configs/AppConfig';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\n\r\nconst layout = {\r\n    labelCol: { span: 2 },\r\n    wrapperCol: { span: 32 },\r\n};\r\n\r\nconst formItemLayoutWithOutLabel = {\r\n    wrapperCol: {\r\n        xs: { span: 32, offset: 0 },\r\n        sm: { span: 32, offset: 2 },\r\n    },\r\n};\r\n\r\nconst { TextArea } = Input;\r\nconst { Option } = Select;\r\nconst { confirm } = Modal;\r\nconst { Dragger } = Upload;\r\n\r\n\r\nfunction QuestionFrom({ name, refetch, answerType, setNewQuestions, question, questionLevel, id, onlineTest, hint, questionChoiceSet, image }) {\r\n\r\n    const formRef = useRef();\r\n    const [form] = Form.useForm();\r\n\r\n    const [selectedImage, setSelectedImage] = useState();\r\n\r\n    const { data: levelData, loading: levelLoading } = useQuery(ALL_QUESTION_LEVELS, {\r\n    });\r\n\r\n    const [destroy] = useMutation(DELETE_QUESTION, {\r\n        onCompleted: data => {\r\n            refetch();\r\n            message.success('Амжилттай устлаа');\r\n        }\r\n    });\r\n\r\n    const [destroyChoice] = useMutation(DELETE_QUESTION_CHOICE, {\r\n    })\r\n\r\n    const handleDeleteChoice = (value) => {\r\n        let choice = form.getFieldValue('choices')[value];\r\n        if (choice !== undefined && choice.hasOwnProperty('id') ) {\r\n            destroyChoice({ variables: { id: choice.id } });\r\n        }\r\n    }\r\n\r\n    const handleDelete = () => {\r\n        if (name === 'new') {\r\n            confirm({\r\n                title: 'Устгах уу?',\r\n                okText: 'Устгах',\r\n                okType: 'danger',\r\n                cancelText: 'Болих',\r\n                onOk() {\r\n                    setNewQuestions(null);\r\n                },\r\n            });\r\n        } else {\r\n            confirm({\r\n                title: 'Устгах уу?',\r\n                okText: 'Устгах',\r\n                okType: 'danger',\r\n                cancelText: 'Болих',\r\n                onOk() {\r\n                    destroy({ variables: { id: id } }); \r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        let handleChoiceData = [];\r\n        \r\n        if (name !== 'new') {\r\n            questionChoiceSet.map((choice, index) => (\r\n                handleChoiceData.push({\r\n                    id: choice.id,\r\n                    answer: choice.answer,\r\n                    score: choice.score\r\n                })\r\n            ))\r\n            form.setFieldsValue({\r\n                id: id,\r\n                questionLevel: questionLevel,\r\n                questionL: question,\r\n                answerType: answerType,\r\n                onlineTest: onlineTest,\r\n                hint: hint,\r\n                choices: handleChoiceData,\r\n                image: [image]\r\n            }) \r\n        } else {\r\n            form.setFieldsValue({\r\n                answerType: answerType,\r\n                onlineTest: onlineTest,\r\n                choices: handleChoiceData\r\n            }) \r\n        }\r\n\r\n    }, [form, name, question, questionLevel, onlineTest, hint, questionChoiceSet, answerType, id, image])\r\n\r\n    // ImageUpload\r\n\r\n    const imageProps = {\r\n        accept: '.jpg',\r\n        name: 'file',\r\n        multiple: false,\r\n        listType: \"picture-card\",\r\n        showUploadList: false,\r\n        beforeUpload: file => {\r\n            return false\r\n        }\r\n    };\r\n\r\n    const onImageChange = (file) => {\r\n        if (file) {\r\n            setSelectedImage(file.file)\r\n        }\r\n    }\r\n\r\n    const normFile = (e) => {\r\n        if (Array.isArray(e)) {\r\n            return e;\r\n        }\r\n        return e && e.fileList;\r\n    };\r\n\r\n    return ( \r\n        \r\n        <Card \r\n            className='mt-4'\r\n            actions={[\r\n                <DeleteTwoTone twoToneColor=\"#eb2f96\" key=\"delte\" onClick={event => handleDelete()} />,\r\n            ]}\r\n        >\r\n            <Form\r\n                {...layout}\r\n                form={form}\r\n                name={name}\r\n                ref={formRef}\r\n            >\r\n                <Form.Item hidden name=\"id\">\r\n                    <Input/>\r\n                </Form.Item>\r\n                <Form.Item name=\"onlineTest\" hidden>\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item hidden name=\"answerType\">\r\n                    <Input/>\r\n                </Form.Item>\r\n                <Form.Item\r\n                    label={<IntlMessage id=\"level\" />}\r\n                    name=\"questionLevel\"\r\n                    rules={[{ required: true, message: 'Хоосон орхих боломжгүй!' }]}\r\n                >\r\n                    <Select\r\n                        loading={levelLoading}\r\n                    >\r\n                        { levelData?.allQuestionLevels.map((level, index) => (\r\n                            <Option key={index} value={level.id} >{level.level}</Option>\r\n                        ))}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item\r\n                    label={<IntlMessage id=\"question\" />}\r\n                    name=\"questionL\"\r\n                    rules={[{ required: true, message: 'Хоосон орхих боломжгүй!' }]}\r\n                >\r\n                    <TextArea rows={4} />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    label={<IntlMessage id=\"question.hint\" />}\r\n                    name=\"hint\"\r\n                >\r\n                    <TextArea rows={4} />\r\n                </Form.Item>\r\n\r\n                { (answerType === 'CHOOSE' || answerType === 'MULTIPLE')  === true && \r\n                    <Form.List name=\"choices\">\r\n                        {(fields, { add, remove }) => {\r\n                            return (\r\n                                <>\r\n                                    {}\r\n                                    {fields.map((field, index) => (\r\n                                        <div key={field.key}>\r\n                                            <Divider> \r\n                                                <IntlMessage id=\"question.answer\" /> {field.key + 1}\r\n                                            </Divider>\r\n                                            <Form.Item\r\n                                                name={[index, \"id\"]} \r\n                                                hidden\r\n                                            >\r\n                                                <Input />\r\n                                            </Form.Item>\r\n                                            <Form.Item \r\n                                                name={[index, \"answer\"]} \r\n                                                label={<IntlMessage id=\"question.answer\" />}\r\n                                                rules={[\r\n                                                    { \r\n                                                        required: true,\r\n                                                        message: \"Хоосон орхих боломжгүй!\"\r\n                                                    },\r\n                                                ]}\r\n                                            >\r\n                                                <Input/>\r\n                                            </Form.Item>\r\n                                            <Form.Item \r\n                                                name={[index, \"score\"]} \r\n                                                label={<IntlMessage id=\"question.score\" />}\r\n                                                rules={[\r\n                                                    { \r\n                                                        required: true,\r\n                                                        message: \"Хоосон орхих боломжгүй!\"\r\n                                                    },\r\n                                                    \r\n                                                ]}\r\n                                            >\r\n                                                <InputNumber min={0} max={100} bordered style={{ width: '100%' }} />\r\n                                            </Form.Item>\r\n                                            {fields.length > 1 ? (\r\n                                                <Form.Item\r\n                                                    {...formItemLayoutWithOutLabel}\r\n                                                >\r\n                                                    <Button\r\n                                                        type=\"primary\" danger\r\n                                                        onClick={() => { handleDeleteChoice(index); remove(field.name);  }}\r\n                                                        icon={<MinusCircleOutlined />}\r\n                                                    >\r\n                                                        Устгах\r\n                                                    </Button>\r\n                                                </Form.Item>\r\n                                            ) : null}\r\n                                        </ div>\r\n                                    ))}\r\n                                    <Form.Item\r\n                                        {...formItemLayoutWithOutLabel}\r\n                                    >\r\n                                        <Button\r\n                                            type=\"text\"\r\n                                            onClick={() => add()}\r\n                                        >\r\n                                            <PlusOutlined /> Хариулт нэмэх\r\n                                        </Button>\r\n                                    </Form.Item>\r\n                                </>\r\n                            );\r\n                        }}\r\n                    </Form.List>\r\n                }\r\n                <Form.Item \r\n                    label=\"Файл\"\r\n                    name=\"image\"\r\n                    valuePropName='fileList'\r\n                    getValueFromEvent={normFile} \r\n                >\r\n                    <Dragger\r\n                        {...imageProps}\r\n                        onChange={e => onImageChange(e)}\r\n                    >\r\n                        { selectedImage ?\r\n                                <img style={{ maxHeight: \"150px\" }} src={URL.createObjectURL(selectedImage)} alt=\"avatar\" className=\"img-fluid\" /> \r\n                            :\r\n                                <div>\r\n                                    { image ?\r\n                                        <img style={{ maxHeight: \"150px\" }} src={BASE_SERVER_URL+image} alt=\"avatar\" className=\"img-fluid\" /> \r\n                                        :\r\n                                        <div>\r\n                                            <CustomIcon className=\"display-3\" svg={ImageSvg}/>\r\n                                            <p>Файлыг байршуулахын тулд товшиж эсвэл чирнэ үү</p>\r\n                                        </div>\r\n                                    }\r\n                                </div>\r\n                        }\r\n                    </Dragger>\r\n                </Form.Item>\r\n                <Form.Item >\r\n                    <Button style={{float: 'right'}} type=\"primary\" htmlType=\"submit\"> <IntlMessage id=\"main.okText\" /> </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </Card>\r\n     );\r\n}\r\n\r\nexport default QuestionFrom;","import React, { useState } from 'react';\r\nimport { Form, Select, Typography, message, Button } from 'antd';\r\nimport { RollbackOutlined } from '@ant-design/icons'\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { ALL_QUESTIONS_BY_TEST, CREATE_QUESTION, UPDATE_QUESTION, CREATE_QUESTION_CHOICE, UPDATE_QUESTION_CHOICE } from 'graphql/test';\r\nimport Loading from 'components/shared-components/Loading';\r\nimport QuestionFrom from './form';\r\nimport Flex from 'components/shared-components/Flex';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\n\r\nconst { Option } = Select;\r\nconst { Text } = Typography;\r\n\r\nconst Question = (props) => {\r\n\r\n    const history = useHistory();\r\n\r\n    const [newQuestions, setNewQuestions] = useState(null);\r\n    const [selected, setSelected] = useState(null);\r\n    const [choices, setChoices] = useState([]);\r\n    const test = [];\r\n\r\n    const { loading, data, refetch } = useQuery(ALL_QUESTIONS_BY_TEST, {\r\n        variables: { id: props.test }\r\n    });\r\n\r\n    const [create] = useMutation(CREATE_QUESTION, {\r\n        onCompleted: data => {\r\n            if (data.createQuestion.question.answerType !== \"TEXT\") {\r\n                choices.map(function (choice) {\r\n                    choice.question = data.createQuestion.question.id\r\n                    return createChoice({ variables: choice })\r\n                })\r\n            }\r\n            setNewQuestions(null);\r\n            refetch();\r\n            message.success('Амжилттай хадгаллаа');\r\n        }\r\n    });\r\n\r\n    const [createChoice] = useMutation(CREATE_QUESTION_CHOICE, {\r\n        onCompleted: data => {\r\n            refetch();\r\n        }\r\n    });\r\n\r\n    const [update] = useMutation(UPDATE_QUESTION, {\r\n        onCompleted: data => {\r\n            setNewQuestions(null);\r\n            if (data.updateQuestion.question.answerType !== \"TEXT\") {\r\n                choices.map(function (choice) {\r\n                    choice.question = data.updateQuestion.question.id\r\n                    if (choice.id === undefined) {\r\n                        return createChoice({ variables: choice })\r\n                    }\r\n                    return updateChoice({ variables: choice })\r\n                })\r\n            }\r\n            message.success('Амжилттай хадгаллаа');\r\n        }\r\n    });\r\n\r\n    const [updateChoice] = useMutation(UPDATE_QUESTION_CHOICE, {\r\n        onCompleted: data => {\r\n            refetch();\r\n        }\r\n    });\r\n\r\n    const newQuestion = value => {\r\n        setNewQuestions(value)\r\n        setSelected(null);\r\n    }\r\n\r\n    if (loading) {\r\n        return <Loading cover=\"content\" />\r\n    }\r\n    \r\n    return ( \r\n        <>\r\n            <Flex alignItems=\"center\" justifyContent=\"between\" mobileFlex={false}>\r\n                <Flex mobileFlex={false}>\r\n                    <div className='text-right' >\r\n                        <Button onClick={() => history.goBack()} type=\"default\" icon={<RollbackOutlined />} block> {<IntlMessage id=\"back\" />}</Button>\r\n                    </div>\r\n                </Flex>\r\n            </Flex>\r\n            <Form.Provider\r\n                onFormFinish={(name, { values, forms }) => {\r\n                    if (values.choices && values.choices.length !== 0 ) {\r\n                        setChoices(values.choices);\r\n                    }\r\n                    if (values.hint === undefined) {\r\n                        values.hint = '';\r\n                    }\r\n                    if (values.id === undefined) {\r\n                        if (values.image !== undefined) {\r\n                            values.image = values.image.slice(-1)[0].originFileObj;\r\n                        } \r\n                        if (values.image === undefined) {\r\n                            values.image = '';\r\n                        }\r\n                        create({ variables: values });\r\n                    } else {\r\n                        if (values.image !== undefined && values.image.slice(-1)[0].originFileObj) {\r\n                            values.image = values.image.slice(-1)[0].originFileObj;\r\n                        } else {\r\n                            values.image = values.image.slice(-1)[0];\r\n                        }\r\n                        update({ variables: values });\r\n                    }\r\n                }}\r\n            >\r\n                { data.allQuestionsByTest.map(function (question, index) {\r\n                    test.push({ formName: question.id })\r\n                    return (\r\n                        <QuestionFrom \r\n                            key={index} \r\n                            name={question.id} \r\n                            refetch={refetch}\r\n                            id={question.id}\r\n                            answerType={question.answerType} \r\n                            question={question.question} \r\n                            questionLevel={question.questionLevel.id} \r\n                            hint={question.hint}\r\n                            onlineTest={props.test}\r\n                            questionChoiceSet={question.questionChoiceSet}\r\n                            image={question.image}\r\n                        />\r\n                    )\r\n                })}\r\n                { newQuestions && \r\n                    <QuestionFrom \r\n                        onlineTest={props.test}\r\n                        answerType={newQuestions} \r\n                        setNewQuestions={setNewQuestions} \r\n                        name='new' \r\n                        refetch={refetch}\r\n                    />\r\n                }\r\n                <Text strong>{<IntlMessage id=\"add-question\" />}: </Text>\r\n                <Select \r\n                    className='mt-4'\r\n                    onChange={newQuestion}\r\n                    value={selected}\r\n                    style={{ width: '20%' }}\r\n                >\r\n                    <Option value=\"CHOOSE\"><IntlMessage id=\"question.choose\" /></Option>\r\n                    <Option value=\"MULTIPLE\"><IntlMessage id=\"question.multiple\" /></Option>\r\n                    <Option value=\"TEXT\"><IntlMessage id=\"question.text\" /></Option>\r\n                </Select>\r\n            </Form.Provider>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Question;","import React from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport Question from './question';\r\n\r\nfunction Index(props) {\r\n\r\n    const slug = useParams();\r\n\r\n    return ( \r\n        <Question test={slug.test} /> \r\n    );\r\n}\r\n\r\nexport default Index;","// This icon file is generated automatically.\nvar MinusCircleOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M696 480H328c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h368c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8z\" } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z\" } }] }, \"name\": \"minus-circle\", \"theme\": \"outlined\" };\nexport default MinusCircleOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport MinusCircleOutlinedSvg from \"@ant-design/icons-svg/es/asn/MinusCircleOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar MinusCircleOutlined = function MinusCircleOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: MinusCircleOutlinedSvg\n  }));\n};\nMinusCircleOutlined.displayName = 'MinusCircleOutlined';\nexport default /*#__PURE__*/React.forwardRef(MinusCircleOutlined);","// This icon file is generated automatically.\nvar RollbackOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M793 242H366v-74c0-6.7-7.7-10.4-12.9-6.3l-142 112a8 8 0 000 12.6l142 112c5.2 4.1 12.9.4 12.9-6.3v-74h415v470H175c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h618c35.3 0 64-28.7 64-64V306c0-35.3-28.7-64-64-64z\" } }] }, \"name\": \"rollback\", \"theme\": \"outlined\" };\nexport default RollbackOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport RollbackOutlinedSvg from \"@ant-design/icons-svg/es/asn/RollbackOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar RollbackOutlined = function RollbackOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: RollbackOutlinedSvg\n  }));\n};\nRollbackOutlined.displayName = 'RollbackOutlined';\nexport default /*#__PURE__*/React.forwardRef(RollbackOutlined);","import _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n/**\n * Wrap of sub component which need use as Button capacity (like Icon component).\n *\n * This helps accessibility reader to tread as a interactive button to operation.\n */\n\n\nimport * as React from 'react';\nimport KeyCode from \"rc-util/es/KeyCode\";\nvar inlineStyle = {\n  border: 0,\n  background: 'transparent',\n  padding: 0,\n  lineHeight: 'inherit',\n  display: 'inline-block'\n};\nvar TransButton = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var onKeyDown = function onKeyDown(event) {\n    var keyCode = event.keyCode;\n\n    if (keyCode === KeyCode.ENTER) {\n      event.preventDefault();\n    }\n  };\n\n  var onKeyUp = function onKeyUp(event) {\n    var keyCode = event.keyCode;\n    var onClick = props.onClick;\n\n    if (keyCode === KeyCode.ENTER && onClick) {\n      onClick();\n    }\n  };\n\n  var style = props.style,\n      noStyle = props.noStyle,\n      disabled = props.disabled,\n      restProps = __rest(props, [\"style\", \"noStyle\", \"disabled\"]);\n\n  var mergedStyle = {};\n\n  if (!noStyle) {\n    mergedStyle = _extends({}, inlineStyle);\n  }\n\n  if (disabled) {\n    mergedStyle.pointerEvents = 'none';\n  }\n\n  mergedStyle = _extends(_extends({}, mergedStyle), style);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    role: \"button\",\n    tabIndex: 0,\n    ref: ref\n  }, restProps, {\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    style: mergedStyle\n  }));\n});\nexport default TransButton;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { ConfigConsumer } from '../config-provider';\n\nvar Divider = function Divider(props) {\n  return /*#__PURE__*/React.createElement(ConfigConsumer, null, function (_ref) {\n    var _classNames;\n\n    var getPrefixCls = _ref.getPrefixCls,\n        direction = _ref.direction;\n\n    var customizePrefixCls = props.prefixCls,\n        _props$type = props.type,\n        type = _props$type === void 0 ? 'horizontal' : _props$type,\n        _props$orientation = props.orientation,\n        orientation = _props$orientation === void 0 ? 'center' : _props$orientation,\n        className = props.className,\n        children = props.children,\n        dashed = props.dashed,\n        plain = props.plain,\n        restProps = __rest(props, [\"prefixCls\", \"type\", \"orientation\", \"className\", \"children\", \"dashed\", \"plain\"]);\n\n    var prefixCls = getPrefixCls('divider', customizePrefixCls);\n    var orientationPrefix = orientation.length > 0 ? \"-\".concat(orientation) : orientation;\n    var hasChildren = !!children;\n    var classString = classNames(prefixCls, \"\".concat(prefixCls, \"-\").concat(type), (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-with-text\"), hasChildren), _defineProperty(_classNames, \"\".concat(prefixCls, \"-with-text\").concat(orientationPrefix), hasChildren), _defineProperty(_classNames, \"\".concat(prefixCls, \"-dashed\"), !!dashed), _defineProperty(_classNames, \"\".concat(prefixCls, \"-plain\"), !!plain), _defineProperty(_classNames, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'), _classNames), className);\n    return /*#__PURE__*/React.createElement(\"div\", _extends({\n      className: classString\n    }, restProps, {\n      role: \"separator\"\n    }), children && /*#__PURE__*/React.createElement(\"span\", {\n      className: \"\".concat(prefixCls, \"-inner-text\")\n    }, children));\n  });\n};\n\nexport default Divider;"],"names":["Flex","props","children","className","alignItems","justifyContent","mobileFlex","flexDirection","defaultProps","CustomIcon","React","_","component","svg","ALL_ONLINE_TESTS","gql","CREATE_ONLINE_TEST","UPDATE_ONLINE_TEST","DELETE_ONLINE_TEST","ALL_QUESTION_LEVELS","CREATE_QUESTION_LEVEL","UPDATE_QUESTION_LEVEL","DELETE_QUESTION_LEVEL","ALL_QUESTIONS_BY_TEST","CREATE_QUESTION","UPDATE_QUESTION","DELETE_QUESTION","CREATE_QUESTION_CHOICE","UPDATE_QUESTION_CHOICE","DELETE_QUESTION_CHOICE","ALL_TAKE_TEST","CREATE_TAKE_TEST","UPDATE_TAKE_TEST","DELETE_TAKE_TEST","ALL_PARTICIPANT_BY_TEST","CREATE_PARTICIPANT","DELETE_PARTICIPANT","ALL_TAKE_LEVEL","CREATE_TAKE_LEVEL","DELETE_TAKE_LEVEL","START_TEST","UPDATE_ANSWER","TEST_TIME","FINISH_TEST","layout","labelCol","span","wrapperCol","formItemLayoutWithOutLabel","xs","offset","sm","TextArea","Input","Option","Select","confirm","Modal","Dragger","Upload","name","refetch","answerType","setNewQuestions","question","questionLevel","id","onlineTest","hint","questionChoiceSet","image","formRef","useRef","Form","form","useState","selectedImage","setSelectedImage","useQuery","levelData","data","levelLoading","loading","useMutation","onCompleted","message","destroy","destroyChoice","useEffect","handleChoiceData","map","choice","index","push","answer","score","setFieldsValue","questionL","choices","actions","DeleteTwoTone","twoToneColor","onClick","event","title","okText","okType","cancelText","onOk","variables","ref","hidden","label","IntlMessage","rules","required","allQuestionLevels","level","value","rows","fields","add","remove","field","key","min","max","bordered","style","width","length","type","danger","getFieldValue","undefined","hasOwnProperty","handleDeleteChoice","icon","MinusCircleOutlined","PlusOutlined","valuePropName","getValueFromEvent","e","Array","isArray","fileList","accept","multiple","listType","showUploadList","beforeUpload","file","onChange","maxHeight","src","URL","createObjectURL","alt","BASE_SERVER_URL","ImageSvg","float","htmlType","Text","Typography","history","useHistory","newQuestions","selected","setSelected","setChoices","test","createQuestion","createChoice","create","updateQuestion","updateChoice","update","Loading","cover","goBack","RollbackOutlined","block","onFormFinish","values","forms","slice","originFileObj","allQuestionsByTest","formName","strong","slug","useParams","AntdIcon","_objectSpread","MinusCircleOutlinedSvg","displayName","RollbackOutlinedSvg","__rest","s","t","p","Object","prototype","call","indexOf","getOwnPropertySymbols","i","propertyIsEnumerable","inlineStyle","border","background","padding","lineHeight","display","TransButton","noStyle","disabled","restProps","mergedStyle","_extends","pointerEvents","role","tabIndex","onKeyDown","keyCode","KeyCode","preventDefault","onKeyUp","ConfigConsumer","_ref","_classNames","getPrefixCls","direction","customizePrefixCls","prefixCls","_props$type","_props$orientation","orientation","dashed","plain","orientationPrefix","concat","hasChildren","classString","classNames","_defineProperty"],"sourceRoot":""}