{"version":3,"file":"static/js/5772.a0941ee5.chunk.js","mappings":"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","sources":["components/shared-components/Flex/index.js","graphql/create.js","graphql/delete.js","views/app-views/programs/form.js","views/app-views/programs/table.js","views/app-views/programs/index.js"],"sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Flex = props => {\r\n\tconst { children, className, alignItems, justifyContent, mobileFlex, flexDirection } = props\r\n\tconst getFlexResponsive = () => mobileFlex ? 'd-flex' : 'd-md-flex'\r\n\treturn (\r\n\t\t<div className={`${getFlexResponsive()} ${className} ${flexDirection?('flex-' + flexDirection): ''} ${alignItems?('align-items-' + alignItems):''} ${justifyContent?('justify-content-' + justifyContent):''}` }>\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nFlex.propTypes = {\r\n\tclassName: PropTypes.string,\r\n\talignItems: PropTypes.string,\r\n\tflexDirection: PropTypes.string,\r\n\tjustifyContent: PropTypes.string,\r\n\tmobileFlex: PropTypes.bool\r\n}\r\n\r\nFlex.defaultProps = {\r\n\tmobileFlex: true,\r\n\tflexDirection: 'row',\r\n\tclassName: ''\r\n};\r\n\r\n\r\nexport default Flex\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const CREATE_SCHOOL = gql `\r\n    mutation createSchool($name: String, $nameMgl: String) {\r\n      createSchool(name: $name, nameMgl: $nameMgl) {\r\n        school {\r\n          id\r\n          name\r\n          nameMgl\r\n        }\r\n      }\r\n    }\r\n`;\r\n\r\nexport const CREATE_SUB_SCHOOL = gql `\r\n    mutation createSubSchool($name: String, $nameMgl: String, $school: Int!){\r\n      createSubSchool(name: $name, nameMgl: $nameMgl, school: $school) {\r\n        subSchool {\r\n          id\r\n          name\r\n          nameMgl \r\n          school {\r\n            id\r\n          }\r\n        }\r\n      }\r\n    }\r\n`;\r\n\r\nexport const REGISTER = gql `\r\n    mutation register($email: String!, $username: String!, $isTeacher: Boolean!, $isStudent: Boolean!, $password1: String!, $password2: String!){\r\n      register(email: $email, username: $username, isTeacher: $isTeacher, isStudent: $isStudent, password1: $password1, password2: $password2) {\r\n          success\r\n          errors\r\n          token\r\n      } \r\n    }\r\n\r\n`;\r\n\r\nexport const CREATE_TEACHER = gql `\r\n    mutation createTeacher($address: String, $birthCity: Int, $birthDistrict: Int, $birthdate: String, $degree: Int,\r\n                            $familyName: String, $joinBefore: String, $joinDate: String, $name: String, $phone: String, $phone2: String,\r\n                            $registerNo: String, $school: Int, $sex: String, $status: Int, $subSchool: Int, $teacherCode: String!,\r\n                            $username: String!, $password: String!, $email: String!, $access: String!\r\n                            # $user: Int\r\n                            ) {\r\n      createTeacher(address: $address, birthCity: $birthCity, birthDistrict: $birthDistrict, birthdate: $birthdate, degree: $degree,\r\n                             familyName: $familyName, joinBefore: $joinBefore, joinDate: $joinDate, name: $name, phone: $phone, phone2: $phone2, \r\n                            registerNo: $registerNo, school: $school, sex: $sex, status: $status, subSchool: $subSchool, \r\n                            teacherCode: $teacherCode, access: $access,\r\n                            username: $username, password: $password, email: $email\r\n                            # user: $user \r\n                            ) {\r\n        teacher {\r\n          id\r\n        }\r\n      }\r\n    }\r\n`;\r\n\r\nexport const CREATE_EMPLOYEE = gql `\r\n    mutation createEmployee(\r\n                $address: String\r\n                $birthCity: Int\r\n                $birthDistrict: Int\r\n                $birthdate: String\r\n                $email: String!\r\n                $employeeCode: String!\r\n                $familyName: String\r\n                $group: Int\r\n                $name: String\r\n                $password: String!\r\n                $phone: String\r\n                $phone2: String\r\n                $photo: Upload\r\n                $registerNo: String\r\n                $sex: String\r\n                $status: Int\r\n                $compartment: Int\r\n                $username: String!\r\n              ) {\r\n      createEmployee(\r\n                address: $address\r\n                birthCity: $birthCity\r\n                birthDistrict: $birthDistrict\r\n                birthdate: $birthdate\r\n                email: $email\r\n                employeeCode: $employeeCode\r\n                familyName: $familyName\r\n                group: $group\r\n                name: $name\r\n                password: $password\r\n                phone: $phone\r\n                phone2: $phone2\r\n                photo: $photo\r\n                compartment: $compartment\r\n                registerNo: $registerNo\r\n                sex: $sex\r\n                status: $status\r\n                username: $username\r\n          ) {\r\n          employee {\r\n          id\r\n        }\r\n      }\r\n    }\r\n`;\r\n\r\nexport const CREATE_STUDENT = gql `\r\n    mutation createStudent($activity: Int, $address: String, $birthCity: Int, $birthDistrict: Int, $birthdate: String,\r\n                            $classes: Int, $classtime: Int, $familyName: String, $joinDate: String,\r\n                            $joinSchoolyear: String, $name: String, $nationality: String, $phone: String, $program: Int, \r\n                            $registerNo: String, $religion: String, $school: Int, $section: Int, $sex: String, $state: String, $status: Int, \r\n                            $statusExtra: Int, $surname: String, $studentCode: String,\r\n                            $username: String!, $password: String!) {\r\n      createStudent(activity: $activity, address: $address, birthCity: $birthCity, birthDistrict: $birthDistrict, birthdate: $birthdate, \r\n                    classes: $classes, familyName: $familyName, joinDate: $joinDate, name: $name, phone: $phone, \r\n                    registerNo: $registerNo, religion: $religion, school: $school, sex: $sex, status: $status,\r\n                    surname: $surname, studentCode: $studentCode, classtime: $classtime, joinSchoolyear: $joinSchoolyear, \r\n                    nationality: $nationality, program: $program, section: $section, state: $state, statusExtra: $statusExtra,\r\n                    username: $username, password: $password, email: \"test@test.mn\") {\r\n        student {\r\n          id\r\n        }\r\n      }\r\n    }\r\n`;\r\n\r\nexport const CREATE_SECTION = gql `\r\n  mutation createSection($classes: Int, $maxStudentNum: Int, $program: Int, $teacher: Int,  $school: Int, $section: String) {\r\n    createSection(classes: $classes, program: $program, school: $school, section: $section, maxStudentNum: $maxStudentNum, teacher: $teacher) {\r\n      section {\r\n        section\r\n      }\r\n    }\r\n  }\r\n`\r\nexport const CREATE_CLASSES = gql `\r\n  mutation createClasses($activity: Int, $classes: String,\r\n                          $program: Int, $school: Int, $status: String) {\r\n    createClasses(activity: $activity, classes: $classes,\r\n                  program: $program, school: $school, status: $status) {\r\n      classes {\r\n        classes\r\n      }\r\n    }\r\n  }\r\n`\r\nexport const CREATE_PROGRAM = gql `\r\n    mutation createProgram($program: String, $programMgl: String,  \r\n                           $status: String, $maxStudentNum: Int, $school: Int, $subSchool: Int) {\r\n      createProgram(program: $program, programMgl: $programMgl,  \r\n                    status: $status, maxStudentNum: $maxStudentNum, school: $school, subSchool: $subSchool) {\r\n        program {\r\n          id\r\n        }\r\n      }\r\n    }\r\n`;\r\n\r\nexport const CREATE_SUBJECT = gql `\r\n  mutation createSubject($credit: String, $subject: String, $content: String, $school: Int, $subSchool: Int) {\r\n    createSubject(credit: $credit, subject: $subject, school: $school, content: $content, subSchool: $subSchool) {\r\n      subject {\r\n        credit\r\n      }\r\n    }\r\n  }\r\n`\r\nexport const CREATE_PROGRAM_SUBJECT = gql `\r\n  mutation createProgramSubject($program: Int, $subject: Int) {\r\n    createProgramSubject(program: $program, subject: $subject) {\r\n      programSubjectType {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CREATE_ROUTINE_STUDENT = gql `\r\n  mutation createRoutineStudent ($routine: Int, $studentCode: String, $section: Int) {\r\n    createRoutineStudent (routine: $routine, studentCode: $studentCode, section: $section) {\r\n      routineStudent {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const CREATE_PARENT = gql `\r\n    mutation createParent ($address: String, $familyName: String, $name: String, $phone: String, $profession: String, $student: Int) {\r\n        createParent (address: $address, familyName: $familyName, name: $name, phone: $phone, profession: $profession, student: $student) {\r\n            parent {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_EVENT_TYPE = gql `\r\n    mutation createEventType ($color: String, $name: String) {\r\n        createEventType (color: $color, name: $name) {\r\n            eventType {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_EVENT = gql`\r\n    mutation createEvent ($content: String, $description: String, $endAt: String, $eventType: Int, $startAt: String, $title: String) {\r\n        createEvent (content: $content, description: $description, endAt: $endAt, eventType: $eventType, startAt: $startAt, title: $title) {\r\n            event {\r\n                title\r\n            }\r\n        }\r\n    }\r\n`;","import { gql } from '@apollo/client'\r\n\r\nexport const DELETE_CITY = gql `\r\n    mutation deleteCity($id: ID!){\r\n        deleteCity(id: $id){\r\n            city{\r\n              name\r\n              code\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const DELETE_USER = gql `\r\n    mutation deleteAccount($username: String) {\r\n        deleteAccount(username: $username) {\r\n            account {\r\n                username\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const DELETE_TEACHER = gql `\r\n    mutation deleteTeacher($id: ID!){\r\n      deleteTeacher(id: $id){\r\n            teacher{\r\n              name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_EMPLOYEES = gql `\r\n  mutation deleteEmployee($id: ID){\r\n    deleteEmployee(id: $id){\r\n      employee{\r\n        name\r\n      }\r\n    }\r\n  }\r\n  `;\r\n\r\nexport const DELETE_SUBJECT = gql `\r\n  mutation deleteSubject ($id: ID) {\r\n    deleteSubject (id: $id) {\r\n      subject {\r\n        credit\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const DELETE_STUDENT = gql `\r\n    mutation deleteStudent($id: ID!){\r\n      deleteStudent(id: $id){\r\n            student{\r\n              surname\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const DELETE_SUB_SCHOOL = gql `\r\n  mutation deleteSubSchool($id: ID){\r\n    deleteSubSchool(id: $id){\r\n      subSchool{\r\n        name\r\n      }\r\n    }\r\n}\r\n`\r\n\r\nexport const DELETE_SCHOOL = gql `\r\n  mutation deleteSchool($id: ID!){\r\n    deleteSchool(id: $id){\r\n      school{\r\n        name\r\n      }\r\n    }\r\n}\r\n`\r\n\r\nexport const DELETE_SECTION = gql `\r\n  mutation deleteSection($id: ID){\r\n    deleteSection(id: $id){\r\n      section{\r\n        section\r\n      }\r\n    }\r\n}\r\n`\r\n\r\nexport const DELETE_CLASS = gql `\r\n  mutation deleteClasses($id: ID!){\r\n    deleteClasses(id: $id){\r\n      classes{\r\n        classes\r\n      }\r\n    }\r\n}\r\n`\r\n\r\nexport const DELETE_PROGRAM = gql `\r\n    mutation deleteProgram($id: ID!){\r\n        deleteProgram(id: $id){\r\n            program{\r\n                program\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_ROUTINE = gql `\r\n    mutation deleteRoutine ($id: ID) {\r\n        deleteRoutine (id: $id) {\r\n            routine {\r\n                createdAt\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_PARENT = gql `\r\n    mutation deleteParent ($id: ID) {\r\n        deleteParent (id: $id) {\r\n            parent {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_EVENT_TYPE = gql `\r\n    mutation deleteEventType ($id: ID) {\r\n        deleteEventType (id: $id) {\r\n            eventType {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_EVENT = gql`\r\n    mutation deleteEvent ($id: ID) {\r\n        deleteEvent (id: $id) {\r\n            event {\r\n                title\r\n            }\r\n        }\r\n    }\r\n`;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Form, Input, message, Spin, Select, InputNumber } from 'antd';\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { ALL_PROGRAMS, ALL_SCHOOLS, ALL_SUB_SCHOOLS } from 'graphql/all'\r\nimport { CREATE_PROGRAM } from 'graphql/create'\r\nimport { UPDATE_PROGRAM } from 'graphql/update'\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\n\r\nconst { Option } = Select;\r\n\r\nfunction ProgramForm({ formType, editData, setIsModalVisible }) {\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const [createSchool, { loading }] = useMutation(CREATE_PROGRAM, {\r\n        refetchQueries: [ALL_PROGRAMS,\r\n            'allPrograms'\r\n        ],\r\n        onCompleted: data => {\r\n            message.success('Амжилттай хадгаллаа');\r\n            setIsModalVisible(false);\r\n        }\r\n    });\r\n\r\n    const [updateProgram, { loading: updateLoading }] = useMutation(UPDATE_PROGRAM, {\r\n        refetchQueries: [ALL_PROGRAMS,\r\n            'allPrograms'\r\n        ],\r\n        onCompleted: data => {\r\n            message.success('Амжилттай хадгаллаа');\r\n            setIsModalVisible(false);\r\n        }\r\n    })\r\n\r\n    const { data: schoolsData } = useQuery(ALL_SCHOOLS, {\r\n    });\r\n\r\n    const { data: subSchoolsData, loading: subSchoolsLoading } = useQuery(ALL_SUB_SCHOOLS, {\r\n    });\r\n\r\n    const [subSchoolList, setSubSchoolList] = useState(undefined);\r\n\r\n    useEffect(() => {\r\n        if (subSchoolsLoading === false && subSchoolsData) {\r\n            setSubSchoolList(subSchoolsData.allSubSchools);\r\n        }\r\n    }, [subSchoolList, subSchoolsData, subSchoolsLoading])\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (formType === \"edit\") {\r\n            const newData = {\r\n                program: editData.program,\r\n                programMgl: editData.programMgl,\r\n                maxStudentNum: editData.maxStudentNum,\r\n                school: editData.school.id,\r\n                subSchool: editData.subSchool.id,\r\n                status: editData.status,\r\n                key: editData.id,\r\n            }\r\n            form.setFieldsValue(newData);\r\n            setSelected(form.getFieldValue('school'));\r\n        } else if (formType === \"create\") {\r\n            form.resetFields();\r\n        }\r\n    }, [editData, form, formType]);\r\n\r\n    const onFinish = values => {\r\n        if (formType === \"edit\") {\r\n            values.id = editData.id;\r\n            updateProgram({ variables: values });\r\n        } else {\r\n            createSchool({ variables: values });\r\n        }\r\n    };\r\n\r\n    const [selected, setSelected] = useState(\"\");\r\n\r\n    const onSchoolChange = (value) => {\r\n        setSelected(value);\r\n    };\r\n\r\n    let type = null;\r\n\r\n    let options = null;\r\n\r\n    if (selected) {\r\n        type = selected;\r\n    }\r\n\r\n    if (type) {\r\n        options = subSchoolList?.filter(Subschool => Subschool.school.id === type).map(filteredSubSchool => (\r\n            <Option key={filteredSubSchool.id} value={filteredSubSchool.id}>{filteredSubSchool.name}</Option>\r\n        ))\r\n    }\r\n\r\n    return (\r\n        <Spin spinning={loading || updateLoading} tip=\"Ачааллаж байна...\">\r\n            <Form\r\n                id=\"ProgramForm\"\r\n                layout={'vertical'}\r\n                form={form}\r\n                name=\"control-hooks\"\r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item name=\"program\" label={<IntlMessage id=\"name\" />} rules={[\r\n                    {\r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    },\r\n                ]}>\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item name=\"programMgl\" label={<IntlMessage id=\"nameMgl\" />} rules={[\r\n                    {\r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    },\r\n                ]}>\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item name=\"school\" label={<IntlMessage id=\"school\" />} rules={[\r\n                    {\r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    },\r\n                ]}>\r\n                    <Select\r\n                        onChange={onSchoolChange}\r\n                    >\r\n                        {schoolsData?.allSchools.map((school, index) => (\r\n                            <Option key={index} value={school.id}>{school.name}</Option>\r\n                        ))}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item name=\"subSchool\" label={<IntlMessage id=\"sub-school\" />} rules={[\r\n                    {\r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    },\r\n                ]}>\r\n                    <Select\r\n                        placeholder=\"Тэнхим сонгох\"\r\n                    >\r\n                        {options}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item name=\"maxStudentNum\" label={<IntlMessage id=\"maxStudentNum\" />} rules={[\r\n                    {\r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    },\r\n                ]}>\r\n                    <InputNumber />\r\n                </Form.Item>\r\n                <Form.Item name=\"status\" label={<IntlMessage id=\"status\" />} rules={[\r\n                    {\r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    },\r\n                ]}>\r\n                    <Select\r\n                        placeholder={<IntlMessage id=\"status\" />}\r\n                    >\r\n                        <Option key=\"1\" value=\"OPEN\">Нээлттэй</Option>\r\n                        <Option key=\"2\" value=\"CLOSED\">Хаалттай</Option>\r\n                    </Select>\r\n                </Form.Item>\r\n            </Form>\r\n        </Spin>\r\n    );\r\n};\r\n\r\nexport default ProgramForm","import React, { useState, useEffect } from 'react'\r\nimport { Card, Table, Input, Spin, Modal, message, Button } from 'antd';\r\nimport { DeleteTwoTone, SearchOutlined, EditTwoTone, PlusCircleOutlined } from '@ant-design/icons';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Flex from 'components/shared-components/Flex'\r\nimport utils from 'utils';\r\nimport ProgramForm from './form';\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport { ALL_PROGRAMS } from 'graphql/all';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport { DELETE_PROGRAM } from 'graphql/delete';\r\nimport { APP_PREFIX_PATH } from 'configs/AppConfig';\r\n\r\nfunction  ProgramsTable (props) {\r\n\r\n\tconst { loading, data: dataPrograms } = useQuery(ALL_PROGRAMS, {\r\n\t});\r\n\tconst history = useHistory();\r\n    \r\n\tconst [list, setList] = useState(undefined)\r\n    const [reFill, setReFill] = useState(true)\r\n\tconst [tableLoading, setTableLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n\t\tfunction fillList () {\r\n            setList(dataPrograms.allPrograms);\r\n\t\t\tsetReFill(false);\r\n\t\t\tsetTableLoading(false);\r\n\t\t}\r\n        if(loading === false && dataPrograms){\r\n\t\t\tfillList()\r\n        }\r\n    }, [loading, dataPrograms, reFill])\r\n\r\n\tconst [isModalVisible, setIsModalVisible] = useState(false);\r\n\tconst [editData, setEditData] = useState([]);\r\n\tconst [formType, setFormType] = useState(\"\");\r\n\r\n    const showModal = () => {\r\n\t\tsetFormType(\"create\");\r\n      \tsetIsModalVisible(true);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n      \tsetIsModalVisible(false);\r\n    };\r\n\r\n\tconst editRow = row => {\r\n\t\tsetFormType(\"edit\");\r\n\t\tsetEditData(row);\r\n\t\tsetIsModalVisible(true);\r\n\t};\r\n\r\n\tconst { confirm } = Modal;\r\n\r\n\tvar nf = Intl.NumberFormat();\r\n\r\n\tconst [deleteProgram] = useMutation(DELETE_PROGRAM, {\r\n\t\trefetchQueries: [ALL_PROGRAMS,\r\n\t\t\t'allPrograms'\r\n\t\t],\r\n\t\tonCompleted: data => {\r\n            message.success('Амжилттай устлаа');\r\n\t\t}\r\n\t});\r\n\r\n\tfunction deleteRow(row) {\r\n\t\tconfirm({\r\n\t\t  title: 'Устгах уу?',\r\n\t\t  okText: 'Устгах',\r\n\t\t  okType: 'danger',\r\n\t\t  cancelText: 'Болих',\r\n\t\t  onOk() {\r\n\t\t\tdeleteProgram({ variables: { id: row.id } }); \r\n\t\t  },\r\n\t\t});\r\n\t}\r\n\r\n\tconst showRow = (row) => {\r\n\t\thistory.push(`${APP_PREFIX_PATH}/programs/${row.id}`);\r\n\t}\r\n\r\n\tconst tableColumns = [\r\n\t\t{\r\n\t\t\tkey: 'program',\r\n\t\t\ttitle: <IntlMessage id=\"name\" />,\r\n\t\t\tdataIndex: 'program',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'program')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'programMgl',\r\n            title: <IntlMessage id=\"nameMgl\" />,\r\n            dataIndex: 'programMgl', \r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'programMgl')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'school',\r\n\t\t\ttitle: <IntlMessage id=\"school\" />,\r\n\t\t\tdataIndex: ['school', 'name'],\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'school')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'subSchool',\r\n\t\t\ttitle: <IntlMessage id=\"sub-school\" />,\r\n\t\t\tdataIndex: ['subSchool', 'name'],\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'subSchool')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'maxStudentNum',\r\n\t\t\ttitle: <IntlMessage id=\"maxStudentNum\" />,\r\n\t\t\tdataIndex: 'maxStudentNum',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'maxStudentNum'),\r\n\t\t\trender: text => <span>{nf.format(text)}</span>\r\n\t\t}\r\n\t];\r\n\r\n\tif (props.permissions.edit || props.permissions.destroy) {\r\n\t\ttableColumns.push(\r\n\t\t\t{\r\n\t\t\t\tkey: 'actions',\r\n\t\t\t\ttitle: <IntlMessage id=\"main.action\" />,\r\n\t\t\t\tdataIndex: 'actions',\r\n\t\t\t\twidth: '20vw',\r\n\t\t\t\trender: (_, elm) => (\r\n\t\t\t\t\t<div className=\"text-center\">\r\n\t\t\t\t\t\t{ props.permissions.edit === true &&\r\n\t\t\t\t\t\t\t<Button size=\"small\" onClick={() => editRow(elm)} type=\"text\" icon={<EditTwoTone twoToneColor=\"#ffdb00\"/>} > <IntlMessage id=\"edit\" /></Button>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t{ props.permissions.destroy === true &&\r\n\t\t\t\t\t\t\t<Button size=\"small\" onClick={() => deleteRow(elm)} type=\"text\" icon={<DeleteTwoTone twoToneColor=\"#f42f2f\"/>} > <IntlMessage id=\"delete\" /> </Button>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n\r\n\tconst onSearch = e => {\r\n\t\tconst value = e.currentTarget.value\r\n\t\tif (!value) {\r\n\t\t\tsetReFill(true)\r\n\t\t}\r\n\t\tconst searchArray = list\r\n\t\tconst data = utils.wildCardSearch(searchArray, value)\r\n\t\tsetList(data)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Modal \r\n                title={formType === 'edit' ? <IntlMessage id=\"edit\" /> : <IntlMessage id=\"add_new3\" /> } \r\n                visible={isModalVisible} \r\n\t\t\t\tokText={<IntlMessage id=\"main.okText\" />}\r\n\t\t\t\tcancelText={<IntlMessage id=\"main.cancelText\" />}\r\n\t\t\t\tonCancel={handleCancel}\r\n\t\t\t\tokButtonProps={{form:'ProgramForm', key: 'submit', htmlType: 'submit'}}\r\n            >\r\n                <ProgramForm \r\n\t\t\t\t\tsetTableLoading={setTableLoading} \r\n\t\t\t\t\tsetReFill={setReFill} \r\n\t\t\t\t\tformType={formType} \r\n\t\t\t\t\teditData={editData} \r\n\t\t\t\t\tsetIsModalVisible={setIsModalVisible} \r\n\t\t\t\t/>\r\n            </Modal>\r\n\t\t\t<Card>\r\n\t\t\t\t<Flex alignItems=\"center\" justifyContent=\"between\" mobileFlex={false}>\r\n\t\t\t\t\t<Flex className=\"mb-1\" mobileFlex={false}>\r\n\t\t\t\t\t\t<div className=\"mr-md-3 mb-3\">\r\n\t\t\t\t\t\t\t<Input placeholder={\"Хайх\"} prefix={<SearchOutlined />} onChange={e => onSearch(e)}/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Flex>\r\n\t\t\t\t\t{ props.permissions.create === true &&\r\n\t\t\t\t\t\t<div className=\"mr-md-3 mb-3\">\r\n\t\t\t\t\t\t\t<Button onClick={showModal} type=\"primary\" icon={<PlusCircleOutlined />} block> <IntlMessage id=\"add_new\" /></Button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t</Flex>\r\n\t\t\t\t<div className=\"table-responsive\">\r\n\t\t\t\t\t<Spin spinning={tableLoading}>\r\n\t\t\t\t\t\t<Table \r\n\t\t\t\t\t\t\tcolumns={tableColumns} \r\n\t\t\t\t\t\t\tsize=\"small\"\r\n\t\t\t\t\t\t\tdataSource={list}\r\n\t\t\t\t\t\t\trowKey='id' \r\n\t\t\t\t\t\t\tbordered\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Spin>\r\n\t\t\t\t</div>\r\n\t\t\t</Card>\r\n\t\t</>\r\n\t\t\r\n\t)\r\n}\r\n\r\nexport default ProgramsTable\r\n","import React from \"react\";\r\nimport ProgramsTable from './table';\r\nimport { CheckPer } from 'hooks/checkPermission';\r\nimport Loading from \"components/shared-components/Loading\";\r\n\r\nconst Index = (props) => {\r\n    \r\n    const create = CheckPer('add_program');\r\n    const edit = CheckPer('change_program');\r\n    const destroy = CheckPer('delete_program');\r\n    const view_program_subject = CheckPer('view_program_subject');\r\n\r\n    const permissions = {\r\n        create: create,\r\n        edit: edit,\r\n        destroy: destroy,\r\n        view_program_subject: view_program_subject\r\n    }\r\n    \r\n    if (Object.values(permissions).indexOf('loading') > -1) {\r\n        return <Loading cover=\"content\" />\r\n    }\r\n\r\n    return (\r\n        <ProgramsTable title={props.title} permissions={permissions} />\r\n    )\r\n}\r\n\r\nexport default Index;\r\n"],"names":["Flex","props","children","className","alignItems","justifyContent","mobileFlex","flexDirection","defaultProps","CREATE_SCHOOL","gql","CREATE_SUB_SCHOOL","CREATE_TEACHER","CREATE_EMPLOYEE","CREATE_STUDENT","CREATE_SECTION","CREATE_CLASSES","CREATE_PROGRAM","CREATE_SUBJECT","CREATE_PARENT","CREATE_EVENT_TYPE","CREATE_EVENT","DELETE_TEACHER","DELETE_EMPLOYEES","DELETE_SUBJECT","DELETE_STUDENT","DELETE_SUB_SCHOOL","DELETE_SCHOOL","DELETE_SECTION","DELETE_CLASS","DELETE_PROGRAM","DELETE_ROUTINE","DELETE_PARENT","DELETE_EVENT_TYPE","DELETE_EVENT","Option","Select","formType","editData","setIsModalVisible","Form","form","useMutation","refetchQueries","ALL_PROGRAMS","onCompleted","data","message","createSchool","loading","UPDATE_PROGRAM","updateProgram","updateLoading","schoolsData","useQuery","ALL_SCHOOLS","ALL_SUB_SCHOOLS","subSchoolsData","subSchoolsLoading","useState","undefined","subSchoolList","setSubSchoolList","useEffect","allSubSchools","newData","program","programMgl","maxStudentNum","school","id","subSchool","status","key","setFieldsValue","setSelected","getFieldValue","resetFields","selected","type","options","filter","Subschool","map","filteredSubSchool","value","name","spinning","tip","layout","onFinish","values","variables","label","IntlMessage","rules","required","onChange","allSchools","index","placeholder","dataPrograms","useHistory","list","setList","reFill","setReFill","tableLoading","setTableLoading","allPrograms","isModalVisible","setEditData","setFormType","confirm","Modal","nf","Intl","NumberFormat","deleteProgram","tableColumns","title","dataIndex","sorter","a","b","utils","render","text","format","permissions","edit","destroy","push","width","_","elm","size","onClick","row","icon","EditTwoTone","twoToneColor","okText","okType","cancelText","onOk","DeleteTwoTone","visible","onCancel","okButtonProps","htmlType","prefix","SearchOutlined","e","currentTarget","searchArray","onSearch","create","PlusCircleOutlined","block","columns","dataSource","rowKey","bordered","CheckPer","view_program_subject","Object","indexOf","Loading","cover"],"sourceRoot":""}