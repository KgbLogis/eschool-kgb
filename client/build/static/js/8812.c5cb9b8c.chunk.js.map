{"version":3,"file":"static/js/8812.c5cb9b8c.chunk.js","mappings":"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","sources":["components/shared-components/AsyncTable/index.js","components/shared-components/Flex/index.js","graphql/live.js","views/app-views/live/table.js","views/app-views/live/index.js","../node_modules/@ant-design/icons-svg/es/asn/EyeTwoTone.js","../node_modules/@ant-design/icons/es/icons/EyeTwoTone.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Button, Card, Input, Pagination, Table } from 'antd'\r\nimport { PlusCircleOutlined, SearchOutlined } from '@ant-design/icons';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport Flex from '../Flex';\r\n\r\nconst AsyncTable = ({ fetchData, loading, columns, data, permissions, showModal }) => {\r\n\r\n    const [filter, setFilter] = useState('');\r\n\r\n    const triggerFetch = (page, pageSize) => {\r\n        var start = 0;\r\n        var end = pageSize;\r\n        if (page !== 1) {\r\n            start = (page * pageSize) - pageSize\r\n            end = pageSize * page\r\n        }\r\n        fetchData({ variables: { offset: start, limit: end, filter: filter, program: 0 } })\r\n    }\r\n\r\n    const onPageChange = (page, pageSize) => {\r\n        triggerFetch(page, pageSize);\r\n    }\r\n\r\n    const onSearch = e => {\r\n        const value = e.currentTarget.value\r\n        fetchData({ variables: { offset: 0, limit: 10, filter: value, program: 0 } })\r\n        setFilter(value)\r\n    }\r\n\r\n    return (\r\n\t\t<Card>\r\n            <Flex alignItems=\"center\" justifyContent=\"between\" mobileFlex={false}>\r\n                <Flex className=\"mb-1\" mobileFlex={false}>\r\n                    <div className=\"mr-md-3 mb-3\">\r\n                        <Input placeholder={'Хайх'} prefix={<SearchOutlined />} onChange={e => onSearch(e)}/>\r\n                    </div>\r\n                </Flex>\r\n                { permissions.create === true &&\r\n                    <div className=\"mr-md-3 mb-3\">\r\n                        <Button onClick={showModal} type=\"primary\" icon={<PlusCircleOutlined />} block> <IntlMessage id=\"add_new\" /></Button>\r\n                    </div>\r\n                }\r\n            </Flex>\r\n            <div className=\"table-responsive\">\r\n                <Table \r\n                    // pagination={false}\r\n                    size=\"small\"\r\n                    columns={columns} \r\n                    dataSource={data}\r\n                    rowKey='id' \r\n                    bordered\r\n                    loading={loading}\r\n                />\r\n                {/* <Pagination \r\n                    className='text-right mt-4' \r\n                    total={count} \r\n                    onChange={onPageChange}\r\n                /> */}\r\n            </div>\r\n        </Card>    \r\n    )\r\n}\r\n\r\nexport default AsyncTable","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Flex = props => {\r\n\tconst { children, className, alignItems, justifyContent, mobileFlex, flexDirection } = props\r\n\tconst getFlexResponsive = () => mobileFlex ? 'd-flex' : 'd-md-flex'\r\n\treturn (\r\n\t\t<div className={`${getFlexResponsive()} ${className} ${flexDirection?('flex-' + flexDirection): ''} ${alignItems?('align-items-' + alignItems):''} ${justifyContent?('justify-content-' + justifyContent):''}` }>\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nFlex.propTypes = {\r\n\tclassName: PropTypes.string,\r\n\talignItems: PropTypes.string,\r\n\tflexDirection: PropTypes.string,\r\n\tjustifyContent: PropTypes.string,\r\n\tmobileFlex: PropTypes.bool\r\n}\r\n\r\nFlex.defaultProps = {\r\n\tmobileFlex: true,\r\n\tflexDirection: 'row',\r\n\tclassName: ''\r\n};\r\n\r\n\r\nexport default Flex\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const ALL_LIVES = gql `\r\n    query allLives ($offset: Int!, $limit: Int!, $filter: String) {\r\n        count (appName: \"live\", modelName: \"Live\", filter: $filter) {\r\n            count\r\n        }\r\n        allLives (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            title\r\n            date\r\n            duration\r\n            description\r\n            status\r\n            type\r\n            section {\r\n                id\r\n                section\r\n            }\r\n            password\r\n            teacher {\r\n                id\r\n                name\r\n            }\r\n            password\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_LIVE = gql `\r\n    mutation createLive ($date: DateTime, $description: String, $duration: Int, $status: String, $teacher: Int, $title: String, $section: Int) {\r\n        createLive (date: $date, description: $description, duration: $duration, status: $status, teacher: $teacher, title: $title, section: $section) {\r\n            live {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_LIVE = gql `\r\n    mutation updateLive ($date: DateTime, $description: String, $duration: Int, $id: ID, $status: String, $teacher: Int, $title: String, $section: Int) {\r\n        updateLive (date: $date, description: $description, duration: $duration, id: $id, status: $status, teacher: $teacher, title: $title, section: $section) {\r\n            live {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_LIVE = gql `\r\n    mutation deleteLive ($id: ID) {\r\n        deleteLive (id: $id) {\r\n            live {\r\n                title\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const GET_LIVE_URL = gql `\r\n    query getLiveurl ($liveId: Int) {\r\n        getLiveurl (liveId: $liveId) {\r\n            url\r\n            password\r\n        }\r\n    }\r\n`;\r\n","import React, { useState, useEffect, lazy, Suspense } from 'react'\r\nimport { Modal, message, Button } from 'antd';\r\nimport { DeleteTwoTone, EditTwoTone, EyeTwoTone } from '@ant-design/icons';\r\nimport utils from 'utils';\r\nimport { useMutation, useLazyQuery } from '@apollo/client';\r\nimport IntlMessage from \"components/util-components/IntlMessage\";\r\nimport { ALL_LIVES, DELETE_LIVE, GET_LIVE_URL } from 'graphql/live';\r\nimport moment from 'moment';\r\nimport AsyncTable from 'components/shared-components/AsyncTable';\r\nimport Loading from 'components/shared-components/Loading';\r\nimport { Link } from 'react-router-dom';\r\nimport { APP_PREFIX_PATH } from 'configs/AppConfig';\r\n\r\nconst SchoolForm = lazy(() => import(`./form`));\r\n\r\nconst LiveTable = (props) => {\r\n\r\n    const [list, setList] = useState([])\r\n    const [count, setCount] = useState(0);\r\n    const [fetchData, { loading, refetch }] = useLazyQuery(ALL_LIVES, {\r\n        fetchPolicy: 'network-only',\r\n        onCompleted: data => {\r\n            setCount(data.count.count);\r\n            setList(data.allLives);\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        fetchData({ variables: { offset: 0, limit: 10, filter: \"\" } })\r\n    }, [fetchData])\r\n\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const [editData, setEditData] = useState([]);\r\n    const [formType, setFormType] = useState(\"\");\r\n\r\n    const showModal = () => {\r\n        setFormType(\"create\")\r\n        setIsModalVisible(true);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    const editRow = row => {\r\n        setEditData(row);\r\n        setFormType(\"edit\")\r\n        setIsModalVisible(true);\r\n    };\r\n\r\n    const { confirm } = Modal;\r\n\r\n    const [destroy] = useMutation(DELETE_LIVE, {\r\n        onCompleted: data => {\r\n            message.success('Амжилттай устлаа');\r\n            refetch();\r\n        }\r\n    });\r\n\r\n    function deleteRow(row) {\r\n        confirm({\r\n            title: 'Устгах уу?',\r\n            okText: 'Устгах',\r\n            okType: 'danger',\r\n            cancelText: 'Болих',\r\n            onOk() {\r\n                destroy({ variables: { id: row.id, name: row.name, nameMgl: row.nameMgl } });\r\n            },\r\n        });\r\n    }\r\n\r\n    const tableColumns = [\r\n        {\r\n            key: 'title',\r\n            title: <IntlMessage id=\"title\" />,\r\n            dataIndex: 'title',\r\n            sorter: (a, b) => utils.antdTableSorter(a, b, 'title')\r\n        },\r\n        {\r\n            key: 'type',\r\n            title: <IntlMessage id=\"onlineType\" />,\r\n            dataIndex: 'type',\r\n            sorter: (a, b) => utils.antdTableSorter(a, b, 'type'),\r\n            render: text => <IntlMessage id={text} />\r\n        },\r\n        {\r\n            key: 'teacher',\r\n            title: <IntlMessage id=\"teacher\" />,\r\n            dataIndex: ['teacher', 'name'],\r\n            sorter: (a, b) => utils.antdTableSorter(a, b, 'teacher')\r\n        },\r\n        {\r\n            key: 'date',\r\n            title: <IntlMessage id=\"date\" />,\r\n            dataIndex: 'date',\r\n            sorter: (a, b) => utils.antdTableSorter(a, b, 'date'),\r\n            render: text => <span>{moment(text).format('YYYY-MM-DD HH:mm')}</span>,\r\n        },\r\n        {\r\n            key: 'duration',\r\n            title: <IntlMessage id=\"duration\" />,\r\n            dataIndex: 'duration',\r\n            sorter: (a, b) => utils.antdTableSorter(a, b, 'duration')\r\n        },\r\n        {\r\n            key: 'actions',\r\n            title: <IntlMessage id=\"main.action\" />,\r\n            width: '20vw',\r\n            dataIndex: 'actions',\r\n            render: (_, elm) => (\r\n                <div className=\"text-center\">\r\n                    <Link to={`${APP_PREFIX_PATH}/live/${elm.id}`}>\r\n                        <Button size=\"small\" type=\"text\" icon={<EyeTwoTone />}>\r\n                            <IntlMessage id=\"show\" /> </Button>\r\n                    </Link>\r\n                    {props.permissions.edit === true &&\r\n                        <Button size=\"small\" onClick={() => editRow(elm)} type=\"text\" icon={<EditTwoTone twoToneColor=\"#ffdb00\" />} > <IntlMessage id=\"edit\" /> </Button>\r\n                    }\r\n                    {props.permissions.destroy === true &&\r\n                        <Button size=\"small\" onClick={() => deleteRow(elm)} type=\"text\" icon={<DeleteTwoTone twoToneColor=\"#f42f2f\" />} > <IntlMessage id=\"delete\" /></Button>\r\n                    }\r\n                </div>\r\n            )\r\n        }\r\n    ];\r\n\r\n    return (\r\n        <>\r\n            {props.permissions.edit || props.permissions.create ?\r\n                <Modal\r\n                    width={'80vw'}\r\n                    forceRender\r\n                    title={formType === 'edit' ? <IntlMessage id='edit' /> : <IntlMessage id=\"add_new\" />}\r\n                    visible={isModalVisible}\r\n                    okText={<IntlMessage id=\"main.okText\" />}\r\n                    cancelText={<IntlMessage id=\"main.cancelText\" />}\r\n                    onCancel={handleCancel}\r\n                    okButtonProps={{ form: 'SchoolForm', key: 'submit', htmlType: 'submit' }}\r\n                >\r\n                    <Suspense fallback={<Loading cover=\"content\" />}>\r\n                        <SchoolForm formType={formType} setIsModalVisible={setIsModalVisible} refetch={refetch} editData={editData} />\r\n                    </Suspense>\r\n                </Modal>\r\n                : null\r\n            }\r\n            <AsyncTable\r\n                fetchData={fetchData}\r\n                loading={loading}\r\n                columns={tableColumns}\r\n                data={list}\r\n                count={count}\r\n                permissions={props.permissions}\r\n                showModal={showModal}\r\n            />\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default LiveTable\r\n","import React from \"react\";\r\nimport AllSchoolTable from './table';\r\nimport { CheckPer } from 'hooks/checkPermission';\r\nimport Loading from \"components/shared-components/Loading\";\r\n\r\nconst Index = (props) => {\r\n\r\n    const create = CheckPer('add_live');\r\n    const edit = CheckPer('change_live');\r\n    const destroy = CheckPer('delete_live');\r\n\r\n    const permissions = {\r\n        create: create,\r\n        edit: edit,\r\n        destroy: destroy\r\n    }\r\n\r\n    if (Object.values(permissions).indexOf('loading') > -1) {\r\n        return <Loading cover=\"content\" />\r\n    }\r\n\r\n    return (\r\n        <AllSchoolTable title={props.title} permissions={permissions} />\r\n    )\r\n}\r\n\r\nexport default Index;\r\n","// This icon file is generated automatically.\nvar EyeTwoTone = { \"icon\": function render(primaryColor, secondaryColor) { return { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M81.8 537.8a60.3 60.3 0 010-51.5C176.6 286.5 319.8 186 512 186c-192.2 0-335.4 100.5-430.2 300.3a60.3 60.3 0 000 51.5C176.6 737.5 319.9 838 512 838c-192.1 0-335.4-100.5-430.2-300.2z\", \"fill\": secondaryColor } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M512 258c-161.3 0-279.4 81.8-362.7 254C232.6 684.2 350.7 766 512 766c161.4 0 279.5-81.8 362.7-254C791.4 339.8 673.3 258 512 258zm-4 430c-97.2 0-176-78.8-176-176s78.8-176 176-176 176 78.8 176 176-78.8 176-176 176z\", \"fill\": secondaryColor } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M942.2 486.2C847.4 286.5 704.1 186 512 186c-192.2 0-335.4 100.5-430.2 300.3a60.3 60.3 0 000 51.5C176.6 737.5 319.9 838 512 838c192.2 0 335.4-100.5 430.2-300.3 7.7-16.2 7.7-35 0-51.5zM512 766c-161.3 0-279.4-81.8-362.7-254C232.6 339.8 350.7 258 512 258s279.4 81.8 362.7 254C791.5 684.2 673.4 766 512 766z\", \"fill\": primaryColor } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M508 336c-97.2 0-176 78.8-176 176s78.8 176 176 176 176-78.8 176-176-78.8-176-176-176zm0 288c-61.9 0-112-50.1-112-112s50.1-112 112-112 112 50.1 112 112-50.1 112-112 112z\", \"fill\": primaryColor } }] }; }, \"name\": \"eye\", \"theme\": \"twotone\" };\nexport default EyeTwoTone;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport EyeTwoToneSvg from \"@ant-design/icons-svg/es/asn/EyeTwoTone\";\nimport AntdIcon from '../components/AntdIcon';\nvar EyeTwoTone = function EyeTwoTone(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: EyeTwoToneSvg\n  }));\n};\nEyeTwoTone.displayName = 'EyeTwoTone';\nexport default /*#__PURE__*/React.forwardRef(EyeTwoTone);"],"names":["fetchData","loading","columns","data","permissions","showModal","useState","setFilter","alignItems","justifyContent","mobileFlex","className","placeholder","prefix","onChange","e","value","currentTarget","variables","offset","limit","filter","program","onSearch","create","onClick","type","icon","block","id","size","dataSource","rowKey","bordered","Flex","props","children","flexDirection","defaultProps","ALL_LIVES","gql","CREATE_LIVE","UPDATE_LIVE","DELETE_LIVE","GET_LIVE_URL","SchoolForm","lazy","list","setList","count","setCount","useLazyQuery","fetchPolicy","onCompleted","allLives","refetch","useEffect","isModalVisible","setIsModalVisible","editData","setEditData","formType","setFormType","confirm","Modal","useMutation","message","destroy","tableColumns","key","title","IntlMessage","dataIndex","sorter","a","b","utils","render","text","moment","format","width","_","elm","to","APP_PREFIX_PATH","EyeTwoTone","edit","EditTwoTone","twoToneColor","row","okText","okType","cancelText","onOk","name","nameMgl","DeleteTwoTone","forceRender","visible","onCancel","okButtonProps","form","htmlType","Suspense","fallback","Loading","cover","AsyncTable","CheckPer","Object","values","indexOf","primaryColor","secondaryColor","ref","React","AntdIcon","_objectSpread","EyeTwoToneSvg","displayName"],"sourceRoot":""}