{"version":3,"file":"static/js/3222.d57ad99b.chunk.js","mappings":"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","sources":["graphql/live.js","../node_modules/@jitsi/react-sdk/lib/init.js","../node_modules/@jitsi/react-sdk/lib/constants/index.js","../node_modules/@jitsi/react-sdk/lib/utils/index.js","../node_modules/@jitsi/react-sdk/lib/components/JitsiMeeting.js","views/app-views/live/live.js"],"sourcesContent":["import { gql } from '@apollo/client';\r\n\r\nexport const ALL_LIVES = gql `\r\n    query allLives ($offset: Int!, $limit: Int!, $filter: String) {\r\n        count (appName: \"live\", modelName: \"Live\", filter: $filter) {\r\n            count\r\n        }\r\n        allLives (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            title\r\n            date\r\n            duration\r\n            description\r\n            status\r\n            type\r\n            section {\r\n                id\r\n                section\r\n            }\r\n            password\r\n            teacher {\r\n                id\r\n                name\r\n            }\r\n            password\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_LIVE = gql `\r\n    mutation createLive ($date: DateTime, $description: String, $duration: Int, $status: String, $teacher: Int, $title: String, $section: Int) {\r\n        createLive (date: $date, description: $description, duration: $duration, status: $status, teacher: $teacher, title: $title, section: $section) {\r\n            live {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_LIVE = gql `\r\n    mutation updateLive ($date: DateTime, $description: String, $duration: Int, $id: ID, $status: String, $teacher: Int, $title: String, $section: Int) {\r\n        updateLive (date: $date, description: $description, duration: $duration, id: $id, status: $status, teacher: $teacher, title: $title, section: $section) {\r\n            live {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_LIVE = gql `\r\n    mutation deleteLive ($id: ID) {\r\n        deleteLive (id: $id) {\r\n            live {\r\n                title\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const GET_LIVE_URL = gql `\r\n    query getLiveurl ($liveId: Int) {\r\n        getLiveurl (liveId: $liveId) {\r\n            url\r\n            password\r\n        }\r\n    }\r\n`;\r\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { DEFAULT_DOMAIN } from './constants';\nconst loadExternalApi = (domain, release, appId) => __awaiter(void 0, void 0, void 0, function* () {\n    return new Promise((resolve, reject) => {\n        if (window.JitsiMeetExternalAPI) {\n            return resolve(window.JitsiMeetExternalAPI);\n        }\n        const script = document.createElement('script');\n        const releaseParam = release ? `?release=${release}` : '';\n        const appIdPath = appId ? `${appId}/` : '';\n        script.async = true;\n        script.src = `https://${domain}/${appIdPath}external_api.js${releaseParam}`;\n        script.onload = () => resolve(window.JitsiMeetExternalAPI);\n        script.onerror = () => reject(new Error(`Script load error: ${script.src}`));\n        document.head.appendChild(script);\n    });\n});\nlet scriptPromise;\n/**\n * Injects the external_api.js script for the corresponding domain in DOM\n * and resolves with either the `JitsiMeetExternalApi` class definition or an error.\n *\n * Only the first script will be injected, therefore avoid using multiple instances\n * with mixed domains and release version at the same time.\n *\n * @param {string} domain - The domain of the external API\n * @param {string} release - The Jitsi Meet release. Expected format: 'release-1234'\n * @param {string} appId - The tenant for JaaS Meetings\n * @returns {Promise<JitsiMeetExternalApi>} - The JitsiMeetExternalAPI or an error\n */\nexport const fetchExternalApi = (domain = DEFAULT_DOMAIN, release, appId) => {\n    if (scriptPromise) {\n        return scriptPromise;\n    }\n    scriptPromise = loadExternalApi(domain, release, appId);\n    return scriptPromise;\n};\n","export const DEFAULT_DOMAIN = 'meet.jit.si';\nexport const JAAS_STAGING_DOMAIN = 'stage.8x8.vc';\nexport const JAAS_PROD_DOMAIN = '8x8.vc';\n","import { JAAS_PROD_DOMAIN, JAAS_STAGING_DOMAIN } from '../constants';\n/**\n * Returns the complete room name\n *\n * @param {string} roomName\n * @param {string} tenant\n * @returns {string} the complete room name\n */\nexport const getRoomName = (roomName, tenant) => {\n    if (tenant) {\n        return `${tenant}/${roomName}`;\n    }\n    return roomName;\n};\n/**\n * Returns the appId or tenant value\n *\n * @param {string} roomName\n * @returns {string|undefined}\n */\nexport const getAppId = (roomName) => {\n    const roomParts = roomName.split('/');\n    if (roomParts.length <= 1) {\n        return;\n    }\n    return roomParts[0];\n};\n/**\n * Returns the JaaS domain\n *\n * @param {boolean|undefined} useStaging\n * @returns {string} the JaaS domain\n */\nexport const getJaaSDomain = (useStaging) => {\n    if (useStaging) {\n        return JAAS_STAGING_DOMAIN;\n    }\n    return JAAS_PROD_DOMAIN;\n};\nlet instancesCounter = 0;\n/**\n * Generates an unique id\n * @param {string} prefix\n * @returns {string} the component id\n */\nexport const generateComponentId = (prefix) => `${prefix}-${instancesCounter++}`;\n","import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { DEFAULT_DOMAIN } from '../constants';\nimport { fetchExternalApi } from '../init';\nimport { generateComponentId, getAppId } from '../utils';\n/**\n * Returns the JitsiMeeting Component with access to a custom External API\n * to be used as-it-is in React projects\n *\n * @param {IJitsiMeetingProps} props the component's props\n * @returns {ReactElement} the `JitsiMeeting` Component\n * @example\n  ```js\n    <JitsiMeeting\n        domain='meet.jit.si'\n        roomName: 'TestingJitsiMeetingComponent'\n        spinner={CustomSpinner}\n        onApiReady={(externalApi) => console.log(externalApi)}\n    />\n  ```\n */\nconst JitsiMeeting = ({ domain = DEFAULT_DOMAIN, roomName, configOverwrite, interfaceConfigOverwrite, jwt, invitees, devices, userInfo, release, lang, spinner: Spinner, onApiReady, onReadyToClose, getIFrameRef }) => {\n    const [loading, setLoading] = useState(true);\n    const [apiLoaded, setApiLoaded] = useState(false);\n    const externalApi = useRef();\n    const apiRef = useRef();\n    const meetingRef = useRef(null);\n    const componentId = useMemo(() => generateComponentId('jitsiMeeting'), [generateComponentId]);\n    useEffect(() => {\n        fetchExternalApi(domain, release, getAppId(roomName))\n            .then((api) => {\n            externalApi.current = api;\n            setApiLoaded(true);\n        })\n            .catch((e) => console.error(e.message));\n    }, []);\n    const loadIFrame = useCallback((JitsiMeetExternalAPI) => {\n        apiRef.current = new JitsiMeetExternalAPI(domain, {\n            roomName,\n            configOverwrite,\n            interfaceConfigOverwrite,\n            jwt,\n            invitees,\n            devices,\n            userInfo,\n            release,\n            lang,\n            parentNode: meetingRef.current\n        });\n        setLoading(false);\n        if (apiRef.current) {\n            typeof onApiReady === 'function' && onApiReady(apiRef.current);\n            apiRef.current.on('readyToClose', () => {\n                typeof onReadyToClose === 'function' && onReadyToClose();\n            });\n            if (meetingRef.current && typeof getIFrameRef === 'function') {\n                getIFrameRef(meetingRef.current);\n            }\n        }\n    }, [\n        apiRef,\n        meetingRef,\n        onApiReady,\n        onReadyToClose,\n        getIFrameRef,\n        domain,\n        roomName,\n        configOverwrite,\n        interfaceConfigOverwrite,\n        jwt,\n        invitees,\n        devices,\n        userInfo,\n        release,\n        lang\n    ]);\n    useEffect(() => {\n        if (apiLoaded && !apiRef.current) {\n            if (externalApi.current) {\n                loadIFrame(externalApi.current);\n            }\n        }\n    }, [apiLoaded, loadIFrame]);\n    const renderLoadingSpinner = useCallback(() => {\n        if (!Spinner) {\n            return null;\n        }\n        if (!loading || apiRef.current) {\n            return null;\n        }\n        return _jsx(Spinner, {}, void 0);\n    }, [Spinner, apiRef.current]);\n    return (_jsxs(_Fragment, { children: [renderLoadingSpinner(), _jsx(\"div\", { id: componentId, ref: meetingRef }, componentId)] }, void 0));\n};\nexport default JitsiMeeting;\n","import React, { useContext, useState } from 'react'\r\nimport { useQuery } from '@apollo/client';\r\nimport { GET_LIVE_URL } from 'graphql/live';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport { JitsiMeeting } from '@jitsi/react-sdk';\r\nimport Loading from 'components/shared-components/Loading';\r\nimport { UserContext } from 'hooks/UserContextProvider';\r\nimport { MEETING_DOMAIN } from 'configs/AppConfig';\r\n\r\nexport default function Live(props) {\r\n\r\n    const { meetingId } = useParams()\r\n    const history = useHistory();\r\n\r\n    const [meetingUrl, setMeetingUrl] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n\r\n    const { user } = useContext(UserContext)\r\n\r\n    const handleJitsiIFrameRef = (iframeRef) => {\r\n        iframeRef.className =\r\n            \"h-[85vh] flex items-center shadow my-6 md:my-10 lg:h-[80vh]\";\r\n    };\r\n\r\n    const { loading } = useQuery(GET_LIVE_URL, {\r\n        variables: { liveId: meetingId },\r\n        onCompleted: result => {\r\n            setMeetingUrl(result.getLiveurl.url)\r\n            setPassword(result.getLiveurl.password)\r\n        }\r\n    })\r\n\r\n    const handleApiReady = (externalApi) => {\r\n        externalApi.addEventListener(\"participantRoleChanged\", (event) => {\r\n            if (event.role === \"moderator\") {\r\n                externalApi.executeCommand(\"password\", password);\r\n            }\r\n        });\r\n\r\n        externalApi.addEventListener(\"passwordRequired\", () => {\r\n            externalApi.executeCommand(\"password\", password);\r\n        });\r\n    };\r\n\r\n    function handleReadyToClose() {\r\n        history.push('/app/live');\r\n    }\r\n\r\n    if (loading) {\r\n        return <Loading />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <JitsiMeeting\r\n                getIFrameRef={handleJitsiIFrameRef}\r\n                domain={MEETING_DOMAIN}\r\n                roomName={meetingUrl}\r\n                spinner={Loading}\r\n                userInfo={{\r\n                    displayName: user.firstName\r\n                }}\r\n                onReadyToClose={handleReadyToClose}\r\n                onApiReady={handleApiReady}\r\n            />\r\n        </>\r\n    )\r\n}\r\n"],"names":["ALL_LIVES","gql","CREATE_LIVE","UPDATE_LIVE","DELETE_LIVE","GET_LIVE_URL","scriptPromise","DEFAULT_DOMAIN","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","loadExternalApi","domain","release","appId","window","JitsiMeetExternalAPI","script","document","createElement","releaseParam","appIdPath","async","src","onload","onerror","Error","head","appendChild","instancesCounter","generateComponentId","prefix","roomName","configOverwrite","interfaceConfigOverwrite","jwt","invitees","devices","userInfo","lang","Spinner","spinner","onApiReady","onReadyToClose","getIFrameRef","useState","loading","setLoading","apiLoaded","setApiLoaded","externalApi","useRef","apiRef","meetingRef","componentId","useMemo","useEffect","fetchExternalApi","roomParts","split","length","getAppId","api","current","catch","console","error","message","loadIFrame","useCallback","parentNode","on","renderLoadingSpinner","_jsx","_jsxs","_Fragment","children","id","ref","Live","props","meetingId","useParams","history","useHistory","meetingUrl","setMeetingUrl","password","setPassword","user","useContext","UserContext","useQuery","variables","liveId","onCompleted","getLiveurl","url","Loading","iframeRef","className","MEETING_DOMAIN","displayName","firstName","push","addEventListener","event","role","executeCommand"],"sourceRoot":""}