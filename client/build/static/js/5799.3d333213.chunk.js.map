{"version":3,"file":"static/js/5799.3d333213.chunk.js","mappings":"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","sources":["graphql/report.js","graphql/select.js","views/app-views/report/consolidated-report/index.js","views/app-views/student/form.js"],"sourcesContent":["import { gql } from \"@apollo/client\";\r\n\r\nexport const STUDENT_REPORT = gql `\r\n    query studentReport ($studentCode: String) {\r\n        studentReport (studentCode: $studentCode) {\r\n            school\r\n            textTop\r\n            textMid\r\n            textBottom\r\n            studentPhoto\r\n            studentCode\r\n        }\r\n    }\r\n`;\r\n\r\nexport const STUDENT_REPORT_SECTION = gql `\r\n    query studentReportSection ($section: Int) {\r\n        studentReportSection (section: $section) {\r\n            school\r\n            textTop\r\n            textMid\r\n            textBottom\r\n            studentPhoto\r\n            studentCode\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_SECTIONS = gql `\r\n    query allSections {\r\n        allSections {\r\n            id\r\n            section\r\n        }\r\n    }\r\n`;\r\n\r\nexport const STUDENT_MARK_REPORT = gql `\r\n    query studentMarkReport ($studentCode: String) {\r\n        studentMarkReport (studentCode: $studentCode) {\r\n            school\r\n            textTop\r\n            textMid0\r\n            textMid1\r\n            textMid2\r\n            textMid3\r\n            textMid4\r\n            textMid5\r\n            textMid6\r\n            textMid7\r\n            textBottom\r\n            studentPhoto\r\n            studentCode\r\n        }\r\n    }\r\n`;\r\n\r\nexport const STUDENT_MARK_REPORT_SECTION = gql `\r\n    query studentMarkReportSection ($section: Int) {\r\n        studentMarkReportSection (section: $section) {\r\n            school\r\n            textTop\r\n            textMid0\r\n            textMid1\r\n            textMid2\r\n            textMid3\r\n            textMid4\r\n            textMid5\r\n            textMid6\r\n            textMid7\r\n            textBottom\r\n            studentPhoto\r\n            studentCode\r\n        }\r\n    }\r\n`;\r\n\r\nexport const STUDENT_SCHOOL_YEAR = gql `\r\n    query studentSchoolyear ($student: Int) {\r\n        studentSchoolyear (student: $student) {\r\n            id\r\n            schoolyear\r\n            season\r\n            semesterCode\r\n            startDate\r\n            endDate\r\n        }\r\n    }\r\n`;\r\n\r\nexport const STUDENT_MARK_REL = gql `\r\n    query studentMarkRel ($student: Int, $schoolyear: Int) {\r\n        studentMarkRel (student: $student, schoolyear: $schoolyear) {\r\n            id\r\n            mark {\r\n                student {\r\n                    studentCode \r\n                }\r\n                markBoard {\r\n                    subject {\r\n                        id\r\n                        subject\r\n                        subjectCode\r\n                        credit\r\n                    }\r\n                    schoolyear {\r\n                        schoolyear \r\n                        season\r\n                    }\r\n                }\r\n            }\r\n            markSetting {\r\n                name\r\n                percentage\r\n            }\r\n            markVal\r\n        }\r\n    }\r\n`;\r\n\r\nexport const MARK_PERCENTAGE = gql `\r\n    query markPercentage ($percentage: Int) {\r\n        markPercentage (percentage: $percentage) {\r\n            type\r\n            percentage\r\n            diam\r\n        }\r\n    }\r\n`;\r\n\r\nexport const MARK_CON = gql `\r\n    query markCon ($subject: Int!, $schoolyear: Int!, $student: Int!) {\r\n        markCon (subject: $subject, schoolyear: $schoolyear, student: $student) {\r\n            percentage\r\n            type\r\n            diam\r\n        }\r\n    }\r\n`;\r\n\r\nexport const MARK_CON_SUBJECT = gql `\r\n    query markconSubject ($schoolyear: Int!, $section: Int!) {\r\n        markconSubject (schoolyear: $schoolyear, section: $section) {\r\n            subjectId\r\n            subject\r\n            subjectCode\r\n            subjectCredit\r\n        }\r\n    }\r\n`;\r\n\r\nexport const MARK_CON_STUDENT = gql `\r\n    query markconStudent ($section: Int!) {\r\n        markconStudent (section: $section) {\r\n            studentId\r\n            familyName\r\n            name\r\n            studentCode\r\n            registerNo\r\n        }\r\n    }\r\n`;\r\n\r\nexport const MARK_CON_QUERY = gql`\r\n    query markConQuery ($section: Int!, $schoolyear: Int!) {\r\n        markconSubject (schoolyear: $schoolyear, section: $section) {\r\n            subjectId \r\n            subject\r\n            subjectCode\r\n            subjectCredit\r\n        }\r\n        markconStudent (section: $section) {\r\n            studentId\r\n            familyName\r\n            name\r\n            studentCode\r\n            registerNo\r\n        }\r\n    },\r\n`;\r\n\r\nexport const MARK_CON_TEST = gql `\r\n    query markCon ($sdf: Array) {\r\n        D1934081_3: markCon(subject: 3, schoolyear: 1, student: 98150) {    \r\n            percentage    \r\n            type    \r\n            diam  \r\n        }  \r\n        D1934087_3: markCon(subject: 3, schoolyear: 1, student: 98489) { percentage    type    diam  }  \r\n        D1934076_3: markCon(subject: 3, schoolyear: 1, student: 103324) {    percentage    type    diam  }  \r\n        D1834046_3: markCon(subject: 3, schoolyear: 1, student: 98894) {    percentage    type    diam  }  \r\n        D1934077_3: markCon(subject: 3, schoolyear: 1, student: 100276) {    percentage    type    diam  }  \r\n        D1934073_3: markCon(subject: 3, schoolyear: 1, student: 104950) {    percentage    type    diam  }  \r\n        D1934089_3: markCon(subject: 3, schoolyear: 1, student: 100633) {    percentage    type    diam  }  \r\n        D1934086_3: markCon(subject: 3, schoolyear: 1, student: 100787) {    percentage    type    diam  }  \r\n        D1934098_3: markCon(subject: 3, schoolyear: 1, student: 105890) {    percentage    type    diam  }  \r\n        D1934075_3: markCon(subject: 3, schoolyear: 1, student: 101336) {    percentage    type    diam  }  \r\n        D1934071_3: markCon(subject: 3, schoolyear: 1, student: 101355) {    percentage    type    diam  }  \r\n        D1934084_3: markCon(subject: 3, schoolyear: 1, student: 101452) {    percentage    type    diam  }  \r\n        D1934090_3: markCon(subject: 3, schoolyear: 1, student: 101491) {    percentage    type    diam  }  \r\n        D1934088_3: markCon(subject: 3, schoolyear: 1, student: 102593) {    percentage    type    diam  }  \r\n        D1724120_3: markCon(subject: 3, schoolyear: 1, student: 103392) {    percentage    type    diam  }  \r\n        D1934080_3: markCon(subject: 3, schoolyear: 1, student: 104140) {    percentage    type    diam  }  \r\n        D1934079_3: markCon(subject: 3, schoolyear: 1, student: 105052) {    percentage    type    diam  }  \r\n        D1934097_3: markCon(subject: 3, schoolyear: 1, student: 105101) {    percentage    type    diam  }  \r\n        D1934103_3: markCon(subject: 3, schoolyear: 1, student: 105110) {    percentage    type    diam  }  \r\n        D1934096_3: markCon(subject: 3, schoolyear: 1, student: 105112) {    percentage    type    diam  }  \r\n        D1934074_3: markCon(subject: 3, schoolyear: 1, student: 105596) {    percentage    type    diam  }  \r\n        D1934078_3: markCon(subject: 3, schoolyear: 1, student: 105697) {    percentage    type    diam  }  \r\n        D1934094_3: markCon(subject: 3, schoolyear: 1, student: 107882) {    percentage    type    diam  }  \r\n        D1934104_3: markCon(subject: 3, schoolyear: 1, student: 107918) {    percentage    type    diam  }  \r\n        D1934101_3: markCon(subject: 3, schoolyear: 1, student: 107971) {    percentage    type    diam  }  \r\n        D1934100_3: markCon(subject: 3, schoolyear: 1, student: 108400) {    percentage    type    diam  }  \r\n        D1934093_3: markCon(subject: 3, schoolyear: 1, student: 109395) {    percentage    type    diam  } \r\n        D1934085_3: markCon(subject: 3, schoolyear: 1, student: 109445) {    percentage    type    diam  }  \r\n        D1744080_3: markCon(subject: 3, schoolyear: 1, student: 109448) {    percentage    type    diam  }  \r\n        D1934095_3: markCon(subject: 3, schoolyear: 1, student: 109996) {    percentage    type    diam  }  \r\n        D1934102_3: markCon(subject: 3, schoolyear: 1, student: 110102) {    percentage    type    diam  }  \r\n        D1934072_3: markCon(subject: 3, schoolyear: 1, student: 111723) {    percentage    type    diam  }  \r\n        D1834021_3: markCon(subject: 3, schoolyear: 1, student: 95960) {    percentage    type    diam  } \r\n        D1934091_3: markCon(subject: 3, schoolyear: 1, student: 105549) {    percentage    type    diam  }  \r\n        D1934092_3: markCon(subject: 3, schoolyear: 1, student: 111134) {    percentage    type    diam  }  \r\n        D1934083_3: markCon(subject: 3, schoolyear: 1, student: 111971) {    percentage    type    diam  }\r\n    }\r\n`;\r\nexport const ALL_STUDENTS_REPORT = gql`\r\n    query allStudentsReport {\r\n        allStudentsReport {\r\n            id\r\n            user {\r\n                id\r\n                username\r\n                email\r\n            }\r\n            studentCode\r\n            surname\r\n            familyName\r\n            name\r\n            religion\r\n            registerNo\r\n            nationality\r\n            state\r\n            photo\r\n            phone\r\n            address\r\n            activity {\r\n                id\r\n                name\r\n            }\r\n            joinDate\r\n            sex\r\n            birthdate\r\n            classtime {\r\n                id\r\n                name\r\n            }\r\n            birthCity {\r\n                id\r\n                name\r\n            }\r\n            birthDistrict {\r\n                id\r\n                name\r\n            }\r\n            status {\r\n                id\r\n                name\r\n            }\r\n            statusExtra {\r\n                id\r\n                name\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            classes {\r\n                id\r\n                classes\r\n            }\r\n            section {\r\n                id\r\n                section\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            joinSchoolyear {\r\n                id\r\n                schoolyear\r\n            }\r\n        }\r\n    }\r\n`;","import { gql } from '@apollo/client';\r\n\r\nexport const SELECT_STUDENT = gql`\r\n    query allStudents ($filter: String) {\r\n        allStudents (filter: $filter) {\r\n            id\r\n            familyName\r\n            name\r\n            studentCode\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const SELECT_TEACHER = gql`\r\n    query allTeachers ($filter: String) {\r\n        allTeachers (filter: $filter) {\r\n            id\r\n            familyName\r\n            name\r\n            teacherCode\r\n        }\r\n    }\r\n`;\r\n\r\n// export const SELECT_SECTION_TEACHER = gql `\r\n//     query allAssistantTeachers ($filter: String) {\r\n//         allAssistantTeachers (filter: $filter) {\r\n//             id\r\n//             familyName\r\n//             name \r\n//             teacherCode\r\n//         }\r\n//     }\r\n// `\r\n\r\nexport const SELECT_CLASSES = gql`\r\n    query allClassess ($filter: String, $program: Int) {\r\n        allClassess (filter: $filter, program: $program) {\r\n            id\r\n            classes\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const SELECT_SUBJECT = gql`\r\n    query allSubjects ($offset: Int!, $limit: Int!, $filter: String) {\r\n        count (appName: \"subject\", modelName: \"Subject\", filter: $filter) {\r\n            count\r\n        }\r\n        allSubjects (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            subject\r\n            content\r\n            createUserid {\r\n                firstName\r\n                lastName\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SELECT_PROGRAM = gql`\r\n    query selectProgram {\r\n        allPrograms {\r\n            id\r\n            program\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SECTIONS_BY_PROGRAM = gql`\r\n    query sectionsByProgram ($program: Int!) {\r\n        sectionsByProgram (program: $program) {\r\n            id\r\n            section \r\n            classes {\r\n                classes\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SELECT_SECTION = gql`\r\n    query sectionsByClasses ($classes: Int!){\r\n        sectionsByClasses (classes: $classes) {\r\n            id \r\n            section\r\n        }\r\n    }\r\n`\r\n\r\nexport const SELECT_STUDENT_PAGINATION = gql`\r\n    query allStudentsPagination (\r\n        $page: Int\r\n        $perPage: Int\r\n        $filter: String = \"\"\r\n    ) {\r\n        allStudentsPagination (\r\n            page: $page\r\n            perPage: $perPage\r\n            filter: $filter\r\n        ) {\r\n            page\r\n            perPage\r\n            pageCount\r\n            totalCount\r\n            records {\r\n                id\r\n                name\r\n                familyName\r\n            }\r\n        }\r\n    }\r\n`","import React, { Fragment, useRef, useState } from 'react'\r\nimport { Button, Checkbox, Input, message, Modal, Space, Table } from 'antd';\r\nimport { SearchOutlined } from '@ant-design/icons';\r\nimport { DeleteTwoTone, EditTwoTone } from '@ant-design/icons';\r\nimport { Excel } from 'antd-table-saveas-excel';\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { ALL_STUDENTS_REPORT } from 'graphql/report';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport { classNames } from 'utils';\r\nimport { Menu, Transition } from '@headlessui/react';\r\nimport { DownloadIcon, FilterIcon } from '@heroicons/react/outline';\r\nimport { CheckPer } from 'hooks/checkPermission';\r\nimport ChangePassword from 'components/shared-components/ChangePassword';\r\nimport StudentForm from 'views/app-views/student/form';\r\nimport FormModal from 'components/shared-components/FormModal';\r\nimport { DELETE_STUDENT } from 'graphql/delete';\r\n\r\nconst { confirm } = Modal\r\n\r\nconst Index = () => {\r\n\r\n    const [excelData, setExelData] = useState([])\r\n    const [searchedColumn, setSearchedColumn] = useState({});\r\n    const [editData, setEditData] = useState({});\r\n    const modalRef = useRef();\r\n\r\n    const { data, loading, refetch } = useQuery(ALL_STUDENTS_REPORT, {\r\n        onCompleted: res => {\r\n            setExelData(res.allStudentsReport)\r\n        }\r\n    })\r\n\r\n    console.log(searchedColumn);\r\n    \r\n\tconst [deleteStudent] = useMutation(DELETE_STUDENT, {\r\n\t\tonCompleted: data => {\r\n            refetch();\r\n            message.success('Амжилттай устлаа');\r\n\t\t}\r\n\t});\r\n\r\n    function handleSearch(selectedKeys, confirm, dataIndex, dataIndex2) {\r\n        confirm();\r\n        setSearchedColumn(prevData => ({\r\n            ...prevData,\r\n            [dataIndex+dataIndex2]: selectedKeys[0]\r\n        }))\r\n    }\r\n    \r\n    function handleReset(clearFilters, dataIndex, dataIndex2) {\r\n        clearFilters();\r\n        setSearchedColumn(current => {\r\n            const copy = {...current};\r\n            delete copy[dataIndex+dataIndex2];\r\n            return copy;\r\n        });\r\n    }\r\n\r\n    function getColumnSearchProps(dataIndex, dataIndex2) {\r\n\r\n        return ({\r\n            filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\r\n                <div className='p-2'>\r\n                    <Input\r\n                        placeholder={'Хайх'}\r\n                        value={selectedKeys[0]}\r\n                        onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n                        onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex, dataIndex2)}\r\n                        style={{ marginBottom: 8, display: 'block' }}\r\n                    />\r\n                    <Space>\r\n                        <Button\r\n                            type=\"primary\"\r\n                            onClick={() => handleSearch(selectedKeys, confirm, dataIndex, dataIndex2)}\r\n                            icon={<SearchOutlined />}\r\n                            size=\"small\"\r\n                            style={{ width: 90 }}\r\n                        > Хайх </Button>\r\n                        <Button onClick={() => handleReset(clearFilters, dataIndex, dataIndex2)} size=\"small\" style={{ width: 90 }}> Арилгах </Button>\r\n                    </Space>\r\n                </div>\r\n            ),\r\n            filterIcon: filtered => (\r\n                <SearchOutlined \r\n                    className={classNames(\r\n                        filtered ? `text-[#F8B6A8]` : ''\r\n                    )}\r\n                />\r\n            ),\r\n            onFilter: (value, record) => (\r\n                dataIndex2 ? record[dataIndex][dataIndex2].toString().toLowerCase().includes(value.toLowerCase())\r\n                : record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\r\n            ),\r\n            render: text => (\r\n                text\r\n                // searchedColumn[dataIndex+dataIndex2] ? (\r\n                //     <Highlighter\r\n                //         highlightStyle={{ backgroundColor: '#69ffc0', padding: 0 }}\r\n                //         searchWords={[searchedColumn[dataIndex+dataIndex2]]}\r\n                //         autoEscape\r\n                //         textToHighlight={text ? text.toString() : ''}\r\n                //     />\r\n                // ) : (\r\n                //     text\r\n                // )\r\n            ),\r\n        })\r\n    };\r\n\r\n    const [columns, setColumns] = useState([\r\n        {\r\n            title: \"Эцэг /эх/-ийн нэр \",\r\n            dataIndex: 'familyName',\r\n            key: 'familyName',\r\n            width: 150,\r\n            visible: true,\r\n            ...getColumnSearchProps('familyName'),\r\n        },\r\n        {\r\n            title: \"Нэр\",\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n            width: 150,\r\n            visible: true,\r\n            ...getColumnSearchProps('name'),\r\n        },\r\n        {\r\n            title: \"Иргэншил\",\r\n            dataIndex: 'nationality',\r\n            key: 'nationality',\r\n            width: 150,\r\n            visible: true,\r\n            ...getColumnSearchProps('nationality'),\r\n        },\r\n        {\r\n            title: \"Үндэс угсаа\",\r\n            dataIndex: 'religion',\r\n            key: 'religion',\r\n            width: 150,\r\n            visible: true,\r\n            ...getColumnSearchProps('religion'),\r\n        },\r\n        {\r\n            title: \"Суралцагчийн код\",\r\n            dataIndex: 'studentCode',\r\n            key: 'studentCode',\r\n            width: 150,\r\n            visible: true,\r\n            ...getColumnSearchProps('studentCode'),\r\n        },\r\n        {\r\n            title: \"Салбар сургууль\",\r\n            dataIndex: ['school', 'name'],\r\n            key: 'school',\r\n            width: 200,\r\n            visible: true,\r\n            ...getColumnSearchProps('school', 'name'),\r\n        },\r\n        {\r\n            title: \"Хөтөлбөр\",\r\n            dataIndex: ['program', 'program'],\r\n            key: 'program',\r\n            width: 100,\r\n            visible: true,\r\n            ...getColumnSearchProps('program', 'program'),\r\n        },\r\n        {\r\n            title: \"Анги дамжаа\",\r\n            dataIndex: ['classes', 'classes'],\r\n            key: 'classes',\r\n            width: 100,\r\n            visible: true,\r\n            ...getColumnSearchProps('classes', 'classes'),\r\n        },\r\n        {\r\n            title: \"Бүлэг\",\r\n            dataIndex: ['section', 'section'],\r\n            key: 'section',\r\n            width: 100,\r\n            visible: true,\r\n            ...getColumnSearchProps('section', 'section'),\r\n        },\r\n        {\r\n            title: \"Төрсөн огноо\",\r\n            dataIndex: 'birthdate',\r\n            key: 'birthdate',\r\n            width: 150,\r\n            visible: true,\r\n            ...getColumnSearchProps('birthdate'),\r\n        },\r\n        {\r\n            title: \"Төрсөн аймаг /хот/\",\r\n            dataIndex: ['birthCity', 'name'],\r\n            key: 'birthCity',\r\n            width: 150,\r\n            visible: true,\r\n            ...getColumnSearchProps('birthCity', 'name'),\r\n        },\r\n        {\r\n            title: \"Төрсөн сум /дүүрэг/\",\r\n            dataIndex: ['birthDistrict', 'name'],\r\n            key: 'birthDistrict',\r\n            width: 150,\r\n            visible: true,\r\n            ...getColumnSearchProps('birthDistrict', 'name'),\r\n        },\r\n        {\r\n            title: \"И-мэйл\",\r\n            dataIndex: ['user', 'email'],\r\n            key: 'email',\r\n            width: 100,\r\n            visible: true,\r\n            ...getColumnSearchProps('user', 'email'),\r\n        },\r\n        {\r\n            title: \"Утас\",\r\n            dataIndex: 'phone',\r\n            key: 'phone',\r\n            width: 100,\r\n            visible: true,\r\n            ...getColumnSearchProps('phone'),\r\n        },\r\n        {\r\n            title: \"Сургуульд элссэн огноо\",\r\n            dataIndex: ['joinSchoolyear', 'schoolyear'],\r\n            key: 'email',\r\n            width: 150,\r\n            visible: true,\r\n            ...getColumnSearchProps('joinSchoolyear', 'joinSchoolyear'),\r\n        },\r\n        {\r\n            title: \"Суралцагчийн төлөв\",\r\n            dataIndex: ['status', 'name'],\r\n            key: 'status',\r\n            width: 150,\r\n            visible: true,\r\n            ...getColumnSearchProps('status', 'name'),\r\n        },\r\n        {\r\n            title: \"Суралцагчийн нэмэлт төлөв\",\r\n            dataIndex: ['statusExtra', 'name'],\r\n            key: 'status',\r\n            width: 150,\r\n            visible: true,\r\n            ...getColumnSearchProps('statusExtra', 'name'),\r\n        },\r\n    ])\r\n\r\n\tfunction deleteRow(row) {\r\n\t\tconfirm({\r\n            title: \"Устгах уу?\",\r\n            okText: \"Устгах\",\r\n            okType: 'danger',\r\n            cancelText: \"Болих\",\r\n            onOk() {\r\n                deleteStudent({ variables: { id: row.id } }); \r\n            },\r\n\t\t});\r\n\t}\r\n\r\n    function onCheckBoxClick(e, dataIndex) {\r\n        const temporaryarray = columns.slice();\r\n        temporaryarray[dataIndex]['visible'] = e.target.checked\r\n        setColumns(temporaryarray)\r\n    }\r\n\r\n    function handleOpen(params) {\r\n        setEditData(params);\r\n        modalRef.current.handleOpen()\r\n    }\r\n    \r\n    function handleCancel() {\r\n        modalRef.current.handleCancel()\r\n    }\r\n\r\n    const permissions = {\r\n        edit: CheckPer('change_student'),\r\n        destroy: CheckPer('delete_student'),\r\n        password: CheckPer('change_user_password')\r\n    }\r\n\r\n    return (\r\n        <div className='bg-white p-2'>\r\n            <FormModal ref={modalRef} formName=\"StudentForm\">\r\n                <StudentForm\r\n                    refetch={refetch}\r\n                    formType={'edit'} \r\n                    editData={editData} \r\n                    setIsModalVisible={handleCancel}\r\n                />\r\n            </FormModal>\r\n            <div className='flex justify-end'>\r\n                <button\r\n                    className='px-4 py-2 hover:bg-gray-50'\r\n                    onClick={() => {\r\n                        const excel = new Excel();\r\n                        excel\r\n                        .addSheet('Суралцагч')\r\n                        .addColumns(columns.filter(col => col.visible))\r\n                        .addDataSource(excelData)\r\n                        .saveAs('Суралцагч.xlsx');\r\n                    }}\r\n                >\r\n                    <DownloadIcon className=\"h-5 w-5 text-mkp\" aria-hidden=\"true\" />\r\n                </button>\r\n                <Menu as=\"div\" className=\"relative inline-block text-left\">\r\n                    <div>\r\n                        <Menu.Button className=\"inline-flex w-full justify-center rounded-md px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50\">\r\n                            <FilterIcon className=\"h-5 w-5 text-mkp\" aria-hidden=\"true\" />\r\n                        </Menu.Button>\r\n                    </div>\r\n                    <Transition\r\n                        as={Fragment}\r\n                        enter=\"transition ease-out duration-100\"\r\n                        enterFrom=\"transform opacity-0 scale-95\"\r\n                        enterTo=\"transform opacity-100 scale-100\"\r\n                        leave=\"transition ease-in duration-75\"\r\n                        leaveFrom=\"transform opacity-100 scale-100\"\r\n                        leaveTo=\"transform opacity-0 scale-95\"\r\n                    >\r\n                        <Menu.Items className=\"absolute right-0 z-10 mt-2 w-56 origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none\">\r\n                        <div className=\"flex flex-col p-1\">\r\n                            { columns.map((item, index) => (\r\n                                <Checkbox \r\n                                    key={index}\r\n                                    onChange={e => onCheckBoxClick(e, index)}\r\n                                    checked={item.visible} \r\n                                    className='ml-1' \r\n                                    value={item.dataIndex} \r\n                                >\r\n                                    {item.title}\r\n                                </Checkbox>\r\n                            ))}\r\n                        </div>\r\n                        </Menu.Items>\r\n                    </Transition>\r\n                </Menu>\r\n            </div>\r\n            <Table\r\n                className='mt-4'\r\n                loading={loading}\r\n                columns={[...columns.filter(col => col.visible), ...[\r\n                    {\r\n                        key: 'actions',\r\n                        title: <IntlMessage id=\"main.action\" />,\r\n                        width: '15vw',\r\n                        dataIndex: 'actions',\r\n                        render: (_, elm) => (\r\n                            <div className=\"text-center\">\r\n                                { permissions.password &&\r\n                                    <ChangePassword user={elm.user.id} />\r\n                                }\r\n                                {/* <Button size=\"small\" onClick={() => history.push({pathname: '/app/student/transfer-student', state: {student: elm}})} type=\"text\" icon={<SwapOutlined />} > <IntlMessage id=\"transfer-student\" /></Button> */}\r\n                                { permissions.edit === true &&\r\n                                    <Button size=\"small\" onClick={() => handleOpen(elm)} type=\"text\" icon={<EditTwoTone twoToneColor=\"#ffdb00\"/>} > <IntlMessage id=\"edit\" /></Button>\r\n                                }\r\n                                { permissions.destroy === true &&\r\n                                    <Button size=\"small\" onClick={() => deleteRow(elm)} type=\"text\" icon={<DeleteTwoTone twoToneColor=\"#f42f2f\"/>} > <IntlMessage id=\"delete\" /></Button>\r\n                                }\r\n                            </div>\r\n                        )\r\n                    }\r\n                ]]}\r\n                dataSource={data?.allStudentsReport}\r\n                rowKey=\"id\"\r\n                bordered\r\n                size=\"small\"\r\n                onChange={\r\n                    (pagination, filters, sorter, extra) => {\r\n                        setExelData(extra.currentDataSource)\r\n                    } \r\n               } \r\n                pagination={{\r\n                    defaultPageSize: 20\r\n                }}\r\n                scroll={{ x: 2000, y: 500 }}\r\n            />\r\n            \r\n        </div>\r\n    )\r\n}\r\nexport default Index;","import React, { useState, useEffect } from 'react';\r\nimport { Form, Input, message, Spin, Row, Col, Select, DatePicker } from 'antd';\r\nimport { useMutation, useQuery, useLazyQuery } from '@apollo/client';\r\nimport {\r\n    ALL_PROGRAMS, ALL_USERS, ALL_CITYS, ALL_DISTRICTS, ALL_SCHOOLS,\r\n    ALL_CLASSTIME, ALL_SCHOOL_YEAR\r\n} from 'graphql/all';\r\nimport { ALL_ACTIVITY, ALL_STUDENT_STATUS, ALL_STUDENT_STATUS_EXTRA } from 'graphql/core'\r\nimport { CREATE_STUDENT } from 'graphql/create'\r\nimport { UPDATE_STUDENT } from 'graphql/update'\r\nimport moment from 'moment';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\n// import { ImageSvg } from 'assets/svg/icon';\r\n// import CustomIcon from 'components/util-components/CustomIcon';\r\n// import { BASE_SERVER_URL } from 'configs/AppConfig';\r\nimport { SELECT_CLASSES, SELECT_SECTION } from 'graphql/select';\r\n\r\n// const { Dragger } = Upload;\r\n\r\nfunction StudentForm({ editData, formType, setIsModalVisible, refetch }) {\r\n\r\n    const { Option } = Select;\r\n    const [form] = Form.useForm();\r\n    const { TextArea } = Input;\r\n\r\n    // const [selectedImage, setSelectedImage] = useState();\r\n\r\n    const dateFormat = \"YYYY-MM-DD\";\r\n\r\n    const [createStudent, { loading: studentLoading }] = useMutation(CREATE_STUDENT, {\r\n        onCompleted: data => {\r\n            refetch();\r\n            message.success('Амжилттай хадгаллаа');\r\n            form.resetFields();\r\n            setIsModalVisible(false);\r\n        }\r\n    });\r\n\r\n    // const imageProps = {\r\n    //     accept: '.jpg',\r\n    //     name: 'file',\r\n    //     multiple: false,\r\n    //     listType: \"picture-card\",\r\n    //     showUploadList: false,\r\n    //     beforeUpload: file => {\r\n    //         return false\r\n    //     }\r\n    // };\r\n\r\n    // const onImageChange = (file) => {\r\n    //     if (file) {\r\n    //         setSelectedImage(file.file)\r\n    //     }\r\n    // }\r\n\r\n    // const normFile = (e) => {\r\n    //     if (Array.isArray(e)) {\r\n    //         return e;\r\n    //     }\r\n    //     return e && e.fileList;\r\n    // };\r\n\r\n    const [updateStudent, { loading: editLoading }] = useMutation(UPDATE_STUDENT, {\r\n        onCompleted: data => {\r\n            refetch();\r\n            message.success('Амжилттай хадгаллаа');\r\n            setIsModalVisible(false);\r\n        }\r\n    })\r\n\r\n    // start useQuery\r\n    const { data: activityData } = useQuery(ALL_ACTIVITY);\r\n    const [allClassess, { data: classessData }] = useLazyQuery(SELECT_CLASSES);\r\n    const { data: programData } = useQuery(ALL_PROGRAMS);\r\n    const { data: citysData } = useQuery(ALL_CITYS);\r\n    const { data: districtsData } = useQuery(ALL_DISTRICTS);\r\n    const { data: schoolsData } = useQuery(ALL_SCHOOLS);\r\n    const { data: statusData } = useQuery(ALL_STUDENT_STATUS);\r\n    const { data: extraStatusData } = useQuery(ALL_STUDENT_STATUS_EXTRA);\r\n    const { data: usersData } = useQuery(ALL_USERS);\r\n    const { data: classtimeData } = useQuery(ALL_CLASSTIME);\r\n    const [fetchSection, { data: sectionData }] = useLazyQuery(SELECT_SECTION);\r\n    const { data: schoolYearData } = useQuery(ALL_SCHOOL_YEAR);\r\n\r\n    // end useQuery\r\n\r\n    useEffect(() => {\r\n        if (formType === \"edit\") {\r\n            const newData = {\r\n                username: editData.user.username,\r\n                email: editData.user.email,\r\n                studentCode: editData.studentCode,\r\n                surname: editData.surname,\r\n                familyName: editData.familyName,\r\n                // familyNameMgl: editData.familyNameMgl,\r\n                name: editData.name,\r\n                // nameMgl: editData.nameMgl,\r\n                religion: editData.religion,\r\n                registerNo: editData.registerNo,\r\n                nationality: editData.nationality,\r\n                state: editData.state,\r\n                phone: editData.phone,\r\n                // phone2: editData.phone2,\r\n                address: editData.address,\r\n                citizen: editData.citizen,\r\n                // degree: editData.degree.id,\r\n                activity: editData.activity.id,\r\n                // joinBefore: editData.joinBefore,\r\n                sex: editData.sex,\r\n                classtime: editData.classtime.id,\r\n                birthCity: editData.birthCity.id,\r\n                birthDistrict: editData.birthDistrict.id,\r\n                status: editData.status.id,\r\n                statusExtra: editData.statusExtra.id,\r\n                school: editData.school.id,\r\n                classes: editData.classes.id,\r\n                section: editData.section.id,\r\n                program: editData.program.id,\r\n                joinSchoolyear: editData.joinSchoolyear.id,\r\n                joinDate: moment(editData.joinDate),\r\n                birthdate: moment(editData.birthdate)\r\n            }\r\n            setDistrict(newData.birthCity)\r\n            allClassess({ variables: { program: newData.program, offset: 1, limit: 1, filter: '' } });\r\n            setClasses(newData.program);\r\n            setJoinDay(moment(newData.joinDate).format(\"YYYY-MM-DD\"))\r\n            setBDay(moment(newData.birthdate).format(\"YYYY-MM-DD\"))\r\n            form.setFieldsValue(newData);\r\n        } else if (formType === \"create\") {\r\n            form.resetFields();\r\n        }\r\n    }, [allClassess, form, editData, formType])\r\n\r\n    // Change BirthDistrict\r\n\r\n    const [district, setDistrict] = useState(\"\");\r\n\r\n    const onBirthCityChange = (value) => {\r\n        setDistrict(value);\r\n    };\r\n\r\n    let districtType = null;\r\n\r\n    let districtsOption = null;\r\n\r\n    if (district) {\r\n        districtType = district;\r\n    }\r\n\r\n    if (districtType) {\r\n        districtsOption = districtsData?.allDistricts.filter(District => District.cityID.id === districtType).map(filteredDistrict => (\r\n            <Option key={filteredDistrict.id} value={filteredDistrict.id}>{filteredDistrict.name}</Option>\r\n        ))\r\n    }\r\n\r\n    // end change BirthDistrict\r\n\r\n    // Change BirthDistrict\r\n\r\n\r\n    const [classes, setClasses] = useState(\"\");\r\n\r\n    const programOnChange = (value) => {\r\n        allClassess({ variables: { program: value, offset: 1, limit: 1, filter: '' } });\r\n        setClasses(value);\r\n    }\r\n\r\n    let programType = null;\r\n\r\n    let classesOption = null;\r\n\r\n    if (classes) {\r\n        programType = classes;\r\n    }\r\n\r\n    if (programType) {\r\n        classesOption = classessData?.allClassess.map(filteredClass => (\r\n            <Option key={filteredClass.id} value={filteredClass.id}>{filteredClass.classes}</Option>\r\n        ))\r\n    }\r\n\r\n    // end change BirthDistrict\r\n\r\n\r\n\r\n    const [joinDay, setJoinDay] = useState('');\r\n\r\n    function joinDayOnChange(date) {\r\n        setJoinDay(moment(date).format(\"YYYY-MM-DD\"));\r\n    }\r\n\r\n    const [BDay, setBDay] = useState('');\r\n\r\n    function joinBDayOnChange(date) {\r\n        setBDay(moment(date).format(\"YYYY-MM-DD\"));\r\n    }\r\n\r\n    function userExists(username) {\r\n        return usersData?.allUsers.some(function (el) {\r\n            if (formType === \"edit\" && editData.user.username === username) {\r\n                return false;\r\n            } else {\r\n                return el.username === username;\r\n            }\r\n        });\r\n    }\r\n\r\n    const phoneRegEx = new RegExp(/^[7-9][0-9]{3}[0-9]{4}$/u);\r\n    const registerNumRegEx = new RegExp(/[А-ЯӨҮЁ]{2}(\\d){8}$/u);\r\n\r\n    function onFinish(values) {\r\n        if (formType === 'edit') {\r\n            values.joinDate = joinDay\r\n            values.birthdate = BDay\r\n            values.id = editData.id\r\n            updateStudent({ variables: values })\r\n        } else {\r\n            values.joinDate = joinDay\r\n            values.birthdate = BDay\r\n            createStudent({ variables: values });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Spin spinning={studentLoading || editLoading} tip=\"Ачааллаж байна...\">\r\n            <Form\r\n                id=\"StudentForm\"\r\n                layout={'vertical'}\r\n                form={form}\r\n                name=\"control-hooks\"\r\n                onFinish={onFinish}\r\n                size=\"small\"\r\n            >\r\n                <Row gutter={[16, 24]}>\r\n                    <Col className=\"gutter-row\" span={12}>\r\n                        <Form.Item name=\"school\" label={<IntlMessage id=\"school\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select>\r\n                                {schoolsData?.allSchools.map((school, index) => (\r\n                                    <Option key={index} value={school.id}>{school.name}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"program\" label={<IntlMessage id=\"program\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select onChange={programOnChange}>\r\n                                {programData?.allPrograms.map((program, index) => (\r\n                                    <Option key={index} value={program.id}>{program.program}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"classes\" label={<IntlMessage id=\"classes\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select onChange={e => fetchSection({ variables: { classes: e } })}>\r\n                                {classesOption}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"section\" label={<IntlMessage id=\"section\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select>\r\n                                {sectionData?.sectionsByClasses.map((section, index) => (\r\n                                    <Option key={index} value={section.id}>{section.section}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"studentCode\" label={<IntlMessage id=\"studentCode\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"status\" label={<IntlMessage id=\"status\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select>\r\n                                {statusData?.allStudentStatuss.map((status, index) => (\r\n                                    <Option key={index} value={status.id}>{status.name}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"statusExtra\" label={<IntlMessage id=\"student-status-extra\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select>\r\n                                {extraStatusData?.allStudentStatusExtras.map((extra, index) => (\r\n                                    <Option key={index} value={extra.id}>{extra.name}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"joinDate\" label={<IntlMessage id=\"joinDate\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <DatePicker style={{ width: '100%' }} onChange={joinDayOnChange} format={dateFormat} />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"nationality\" label={<IntlMessage id=\"nationality\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"phone\" label={<IntlMessage id=\"parent_phone\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                            {\r\n                                validator(rule, value) {\r\n                                    if (phoneRegEx.test(value)) {\r\n                                        return Promise.resolve();\r\n                                    }\r\n                                    return Promise.reject('Утасны дугаар буруу байна!');\r\n                                },\r\n                            }\r\n                        ]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"state\" label={<IntlMessage id=\"state\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"classtime\" label={<IntlMessage id=\"classtime\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select>\r\n                                {classtimeData?.allClasstimes.map((classtime, index) => (\r\n                                    <Option key={index} value={classtime.id}>{classtime.name}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"address\" label={<IntlMessage id=\"address\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <TextArea rows={2} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col className=\"gutter-row\" span={12}>\r\n                        <Form.Item name=\"religion\" label={<IntlMessage id=\"religion\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"surname\" label={<IntlMessage id=\"surname\" />} rules={[{ required: true }]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"familyName\" label={<IntlMessage id=\"familyName\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"name\" label={<IntlMessage id=\"name\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"registerNo\" label={<IntlMessage id=\"registerNo\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                            {\r\n                                validator(rule, value) {\r\n                                    if (!registerNumRegEx.test(value)) {\r\n                                        return Promise.reject('Регистерийн дугаар буруу байна!');\r\n                                    }\r\n                                    return Promise.resolve();\r\n                                },\r\n                            },\r\n                        ]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"birthdate\" label={<IntlMessage id=\"birthdate\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <DatePicker style={{ width: '100%' }} onChange={joinBDayOnChange} format={dateFormat} />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"sex\" label={<IntlMessage id=\"sex\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select>\r\n                                <Option key=\"0\" value=\"Эрэгтэй\"><IntlMessage id=\"sex.male\" /></Option>\r\n                                <Option key=\"1\" value=\"Эмэгтэй\"><IntlMessage id=\"sex.female\" /></Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"birthCity\" label={<IntlMessage id=\"birthCity\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select onChange={onBirthCityChange}>\r\n                                {citysData?.allCitys.map((city, index) => (\r\n                                    <Option key={index} value={city.id}>{city.name}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"birthDistrict\" label={<IntlMessage id=\"birthDistrict\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select>\r\n                                {districtsOption}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"activity\" label={<IntlMessage id=\"activity\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select>\r\n                                {activityData?.allActivitys.map((activity, index) => (\r\n                                    <Option key={index} value={activity.id}>{activity.name}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"joinSchoolyear\" label={<IntlMessage id=\"joinSchoolyear\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select>\r\n                                {schoolYearData?.allSchoolyears.map((year, index) => (\r\n                                    <Option key={index} value={year.id}>{year.schoolyear} {year.season}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"username\" label={<IntlMessage id=\"username\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                            {\r\n                                validator(rule, value) {\r\n                                    if (userExists(value)) {\r\n                                        return Promise.reject('Нэвтрэх нэр бүртгэлтэй байна');\r\n                                    }\r\n                                    return Promise.resolve();\r\n                                },\r\n                            },\r\n                        ]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        {formType === 'create' &&\r\n                            <Form.Item name=\"password\" label={<IntlMessage id=\"password\" />} rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: <IntlMessage id=\"form.required\" />\r\n                                },\r\n                                {\r\n                                    min: 8,\r\n                                    message: 'Нууц үг 8-аас урттай дээш байх ёстой'\r\n                                },\r\n                                ({ getFieldValue }) => ({\r\n                                    validator(rule, value) {\r\n                                        if (!value || getFieldValue('username') === value) {\r\n                                            return Promise.reject('Нэвтрэх нэр нууц үг хоёр ижил байх боломгүй!');\r\n                                        }\r\n                                        return Promise.resolve();\r\n                                    },\r\n                                }),\r\n                            ]}>\r\n                                <Input.Password />\r\n                            </Form.Item>\r\n                        }\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </Spin>\r\n    );\r\n};\r\n\r\nexport default StudentForm"],"names":["STUDENT_REPORT","gql","STUDENT_REPORT_SECTION","MARK_CON","MARK_CON_SUBJECT","MARK_CON_STUDENT","ALL_STUDENTS_REPORT","SELECT_STUDENT","SELECT_TEACHER","SELECT_CLASSES","SELECT_SUBJECT","SELECT_PROGRAM","SECTIONS_BY_PROGRAM","SELECT_SECTION","SELECT_STUDENT_PAGINATION","confirm","Modal","useState","excelData","setExelData","searchedColumn","setSearchedColumn","editData","setEditData","modalRef","useRef","useQuery","onCompleted","res","allStudentsReport","data","loading","refetch","console","log","useMutation","DELETE_STUDENT","message","deleteStudent","handleSearch","selectedKeys","dataIndex","dataIndex2","prevData","getColumnSearchProps","filterDropdown","setSelectedKeys","clearFilters","className","placeholder","value","onChange","e","target","onPressEnter","style","marginBottom","display","type","onClick","icon","size","width","current","copy","handleReset","filterIcon","filtered","classNames","onFilter","record","toString","toLowerCase","includes","render","text","title","key","visible","columns","setColumns","permissions","edit","CheckPer","destroy","password","ref","formName","formType","setIsModalVisible","handleCancel","Excel","addSheet","addColumns","filter","col","addDataSource","saveAs","as","Fragment","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","map","item","index","temporaryarray","slice","checked","onCheckBoxClick","id","_","elm","user","handleOpen","twoToneColor","row","okText","okType","cancelText","onOk","variables","dataSource","rowKey","bordered","pagination","filters","sorter","extra","currentDataSource","defaultPageSize","scroll","x","y","Option","Select","Form","form","TextArea","Input","dateFormat","CREATE_STUDENT","resetFields","createStudent","studentLoading","UPDATE_STUDENT","updateStudent","editLoading","activityData","ALL_ACTIVITY","useLazyQuery","allClassess","classessData","programData","ALL_PROGRAMS","citysData","ALL_CITYS","districtsData","ALL_DISTRICTS","schoolsData","ALL_SCHOOLS","statusData","ALL_STUDENT_STATUS","extraStatusData","ALL_STUDENT_STATUS_EXTRA","usersData","ALL_USERS","classtimeData","ALL_CLASSTIME","fetchSection","sectionData","schoolYearData","ALL_SCHOOL_YEAR","useEffect","newData","username","email","studentCode","surname","familyName","name","religion","registerNo","nationality","state","phone","address","citizen","activity","sex","classtime","birthCity","birthDistrict","status","statusExtra","school","classes","section","program","joinSchoolyear","joinDate","moment","birthdate","setDistrict","offset","limit","setClasses","setJoinDay","format","setBDay","setFieldsValue","district","districtType","districtsOption","allDistricts","District","cityID","filteredDistrict","programType","classesOption","filteredClass","joinDay","BDay","phoneRegEx","RegExp","registerNumRegEx","spinning","tip","layout","onFinish","values","gutter","span","label","rules","required","allSchools","allPrograms","sectionsByClasses","allStudentStatuss","allStudentStatusExtras","date","validator","rule","test","Promise","resolve","reject","allClasstimes","rows","allCitys","city","allActivitys","allSchoolyears","year","schoolyear","season","allUsers","some","el","min","getFieldValue"],"sourceRoot":""}