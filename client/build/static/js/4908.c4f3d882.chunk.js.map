{"version":3,"file":"static/js/4908.c4f3d882.chunk.js","mappings":"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","sources":["components/layout-components/Folder/index.js","components/shared-components/Flex/index.js","graphql/lesson.js","views/app-views/online-file/folderForm.js","views/app-views/online-file/index.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\r\nimport { DeleteTwoTone, EditTwoTone } from '@ant-design/icons';\r\nimport { message, Modal } from 'antd';\r\nimport { useMutation } from '@apollo/client';\r\nimport { DELETE_ONLINE_FILE_FOLDER } from 'graphql/lesson';\r\nimport { FolderSVG } from 'assets/svg/icon';\r\n\r\nconst { confirm } = Modal;\r\n\r\nconst Folder = ({ data, setFolder, setFolderHistory, refetch }) => {\r\n\r\n\tconst [points, setPoints] = useState({ x: 0, y: 0 });\r\n\tconst [show, setShow] = useState(false);\r\n\r\n\tconst ref = useRef(null);\r\n\r\n\tconst [deleteFolder] = useMutation(DELETE_ONLINE_FILE_FOLDER, {\r\n\t\tonCompleted: data => {\r\n\t\t\tmessage.success('Амжилттай устлаа');\r\n\t\t\trefetch()\r\n\t\t}\r\n\t})\r\n\r\n\tfunction onFolderClicked ({ id, name }) {\r\n\t\tsetFolder(id)\r\n\t\tsetFolderHistory(prevData => [...prevData, { id: id, name: name }])\r\n\t}\r\n\r\n\tfunction onDragOver (e) {\r\n\t\t// console.log(\"onDragOver\");\r\n\t\te.stopPropagation();\r\n\t  }\r\n\t\r\n\tfunction onDragEnter (e) {\r\n\t\t// console.log(\"onDragEnter\");\r\n\t\te.stopPropagation();\r\n\t  }\r\n\t\r\n\tfunction onFileDrop (e) {\r\n\t\tconsole.log(\"onFileDrop\");\r\n\t\te.stopPropagation();\r\n\t}\r\n\r\n\tfunction onDelete (id) {\r\n\t\tconfirm({\r\n            title: 'Устгах уу?',\r\n            okText: 'Устгах',\r\n            okType: 'danger',\r\n            cancelText: 'Болих',\r\n            onOk() {\r\n\t\t\t\tdeleteFolder({ variables: { id: id } })\r\n            },\r\n\t\t});\r\n\t}\r\n\t\r\n\tuseEffect(() => {\r\n\r\n\t\tfunction onClickOutside() {\r\n\t\t\tsetShow(false)\r\n\t\t}\r\n\r\n\t\tconst handleClickOutside = (event) => {\r\n\t\t\tif (ref.current && !ref.current.contains(event.target)) {\r\n\t\t\t\tonClickOutside && onClickOutside();\r\n\t\t\t}\r\n\t\t};\r\n\t\tdocument.addEventListener('contextmenu', handleClickOutside, true);\r\n\t\tdocument.addEventListener('click', handleClickOutside, true);\r\n\t\treturn () => {\r\n\t\t  \tdocument.removeEventListener('contextmenu', handleClickOutside, true);\r\n\t\t\t  document.addEventListener('click', handleClickOutside, true);\r\n\t\t};\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div \r\n\t\t\t\tclassName=\"relative hover:cursor-pointer\"\r\n\t\t\t\tdraggable\r\n\t\t\t\tonDragEnter={onDragEnter}\r\n\t\t\t\tonDragOver={onDragOver}\r\n\t\t\t\tonDropCapture={() => onFileDrop()}\r\n\t\t\t\tonContextMenuCapture={(e) => {\r\n\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\tsetShow(true);\r\n\t\t\t\t\tsetPoints({ x: e.pageX, y: e.pageY });\r\n\t\t\t\t}}\r\n\t\t\t\tonClick={() => onFolderClicked({ id: data.id, name: data.name })}\r\n\t\t\t>\r\n\t\t\t\t<div className=\"relative px-5 py-1 bg-white ring-1 ring-gray-900/5 rounded-lg leading-none flex items-top justify-start space-x-6\">\r\n\t\t\t\t\t<FolderSVG className=\"w-8 h-8 fill-emind my-auto\" />\r\n\t\t\t\t\t<div className=\"space-y-2\">\r\n\t\t\t\t\t\t<p className=\"text-slate-800 text-sm my-auto\">{data.name}</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t{ show && \r\n\t\t\t\t<div ref={ref} className=\"absolute z-10\"style={{\r\n\t\t\t\t\ttop: points.y,\r\n\t\t\t\t\tleft: points.x\r\n\t\t\t\t  }}> \r\n\t\t\t\t\t<div className=\"bg-white w-60 border border-gray-300 rounded-lg flex flex-col text-sm py-4 px-2 text-gray-500 shadow-lg\">\r\n\t\t\t\t\t<div className=\"flex py-1 px-2 rounded hover:bg-background hover:cursor-pointer\">\r\n\t\t\t\t\t\t<div className=\"w-8 \"><EditTwoTone twoToneColor=\"#ffdb00\" /></div>\r\n\t\t\t\t\t\t<div>Засах</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"flex py-1 px-2 rounded hover:bg-background hover:cursor-pointer\" onClick={() => onDelete(data.id)}>\r\n\t\t\t\t\t\t<div className=\"w-8\">\r\n\t\t\t\t\t\t\t<DeleteTwoTone twoToneColor=\"#eb2f96\" key=\"delete\" />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div>Устгах</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default Folder","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Flex = props => {\r\n\tconst { children, className, alignItems, justifyContent, mobileFlex, flexDirection } = props\r\n\tconst getFlexResponsive = () => mobileFlex ? 'd-flex' : 'd-md-flex'\r\n\treturn (\r\n\t\t<div className={`${getFlexResponsive()} ${className} ${flexDirection?('flex-' + flexDirection): ''} ${alignItems?('align-items-' + alignItems):''} ${justifyContent?('justify-content-' + justifyContent):''}` }>\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nFlex.propTypes = {\r\n\tclassName: PropTypes.string,\r\n\talignItems: PropTypes.string,\r\n\tflexDirection: PropTypes.string,\r\n\tjustifyContent: PropTypes.string,\r\n\tmobileFlex: PropTypes.bool\r\n}\r\n\r\nFlex.defaultProps = {\r\n\tmobileFlex: true,\r\n\tflexDirection: 'row',\r\n\tclassName: ''\r\n};\r\n\r\n\r\nexport default Flex\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const ALL_ONLINE_TYPE = gql `\r\n    query allOnlineTypes {\r\n        allOnlineTypes {\r\n            id\r\n            name\r\n        }\r\n    }\r\n\r\n`;\r\n\r\nexport const ALL_ONLINE_FILE = gql `\r\n    query allOnlineFiles ($folder: Int){\r\n        allOnlineFiles (folder: $folder){\r\n            id\r\n            file\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_FOLDERS = gql `\r\n    query allFolders ($folder: Int){\r\n        allFolders(folder: $folder){\r\n            id\r\n            name\r\n        }\r\n    }\r\n    `\r\n\r\nexport const CREATE_ONLINE_FILE = gql `\r\n    mutation createOnlineFile($file: Upload!, $folder: Int) {\r\n        createOnlineFile(file: $file, folder: $folder) {\r\n            onlineFile {\r\n                id\r\n                file\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_ONLINE_FILE_FOLDER = gql `\r\n    mutation createOnlineFileFolder($name: String, $subFolder: Int){\r\n        createOnlineFileFolder(name: $name, subFolder: $subFolder){\r\n            onlineFileFolder{\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_ONLINE_FILE = gql `\r\n    mutation deleteOnlineFile ($id: ID) {\r\n        deleteOnlineFile (id: $id) {\r\n            onlineFile {\r\n                file\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_ONLINE_FILE_FOLDER = gql`\r\n    mutation deleteOnlineFileFolder ($id: Int){\r\n        deleteOnlineFileFolder (id: $id){\r\n            onlineFileFolder {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const CREATE_ONLINE_LESSON = gql`\r\n    mutation createOnlineLesson ($description: String, $schoolyear: Int, $status: String, $subject: Int) {\r\n        createOnlineLesson (description: $description, schoolyear: $schoolyear, status: $status, subject: $subject) {\r\n            onlineLesson {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_ONLINE_LESSON = gql`\r\n    mutation updateOnlineLesson ($description: String, $id: ID, $schoolyear: Int, $status: String, $subject: Int) {\r\n        updateOnlineLesson (description: $description, id: $id, schoolyear: $schoolyear, status: $status, subject: $subject) {\r\n            onlineLesson {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_ONLINE_LESSON = gql`\r\n    query allOnlineLessonsPagination ($page: Int, $perPage: Int) {\r\n        allOnlineLessonsPagination (page: $page, perPage: $perPage) {\r\n            page\r\n            perPage\r\n            pageCount\r\n            totalCount\r\n            records{\r\n                id\r\n                schoolyear {\r\n                    id\r\n                    schoolyear\r\n                }\r\n                subject {\r\n                    id\r\n                    subject\r\n                }\r\n                description\r\n                createdAt\r\n                status\r\n                createUserid {\r\n                    isTeacher\r\n                    teacher {\r\n                        name\r\n                        photo\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const LESSON_BY_ID = gql `\r\n    query onlineLessonById ($id: Int!) {\r\n        onlineLessonById (id: $id) {\r\n            id\r\n            schoolyear {\r\n                schoolyear\r\n                id\r\n            }\r\n            description\r\n            status\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_ONLINE_LESSON = gql `\r\n    mutation deleteOnlineLesson ($id: ID) {\r\n        deleteOnlineLesson (id: $id) {\r\n            onlineLesson {\r\n                status\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_SUB_LESSON_BY_LESSON = gql `\r\n    query allOnlineSubByLesson ($onlineLesson: Int!) {\r\n        allOnlineSubByLesson (onlineLesson: $onlineLesson) {\r\n            id\r\n            title\r\n            description\r\n            createUserid {\r\n                isTeacher\r\n                teacher {\r\n                    name\r\n                }\r\n            }\r\n            onlineType {\r\n                id\r\n                name\r\n            }\r\n            onlineSubFileSet {\r\n                onlineFile {\r\n                    id\r\n                    file\r\n                }\r\n            }\r\n            status\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_SUB_LESSON = gql`\r\n    mutation createOnlineSub ($description: String, $onlineLesson: Int, $status: String, $title: String, $onlineType: Int) {\r\n        createOnlineSub (description: $description, onlineLesson: $onlineLesson, status: $status, title: $title, onlineType: $onlineType) {\r\n            onlineSub {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_SUB_LESSON = gql `\r\n    mutation updateOnlineSub ( $description: String, $id: ID, $onlineLesson: Int, $status: String, $title: String, $onlineType: Int) {\r\n        updateOnlineSub (description: $description, id: $id, onlineLesson: $onlineLesson, status: $status, title: $title, onlineType: $onlineType) {\r\n            onlineSub {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_SUB_LESSON = gql `\r\n    mutation deleteOnlineSub ($id: ID) {\r\n        deleteOnlineSub (id: $id) {\r\n            onlineSub {\r\n                title\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SUB_BY_ID = gql `\r\n    query onlineSubById ($id: Int!) {\r\n        onlineSubById (id: $id) {\r\n            title\r\n            description\r\n            onlineSubFileSet {\r\n                onlineFile {\r\n                    id\r\n                    file\r\n                }\r\n            }\r\n            onlineType {\r\n                id\r\n                name\r\n            }\r\n            onlineAttendanceSet {\r\n                student {\r\n                    id\r\n                    studentCode\r\n                    name\r\n                    familyName\r\n                    photo\r\n                }\r\n            }\r\n            status\r\n            createdAt\r\n        }\r\n    } \r\n`;\r\n\r\nexport const CREATE_ONLINE_STUDENT = gql `\r\n    mutation createOnlineStudent ($onlineLesson: Int, $studentCode: String, $section: Int) {\r\n        createOnlineStudent (onlineLesson: $onlineLesson, studentCode: $studentCode, section: $section) {\r\n            onlineStudent {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_ONLINE_STUDENT = gql `\r\n    mutation deleteOnlineStudent ($id: ID) {\r\n        deleteOnlineStudent (id: $id) {\r\n            onlineStudent {\r\n                student {\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_ONLINE_STUDENT_BY_LESSON = gql `\r\n    query allOnlineStudentByLesson ($onlineLesson: Int!) {\r\n        allOnlineStudentByLesson (onlineLesson: $onlineLesson) {\r\n            id\r\n            student {\r\n                id\r\n                familyName\r\n                name\r\n                studentCode\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_ONLINE_SUB_FILES = gql`\r\n    query allOnlineSubFiles ($onlineSub: Int) {\r\n        allOnlineSubFiles (onlineSub: $onlineSub) {\r\n            id\r\n            onlineFile {\r\n                id\r\n                file\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const CREATE_ONLINE_SUB_FILE = gql`\r\n    mutation createOnlineSubFile ($onlineFile: Int, $onlineSub: Int) {\r\n        createOnlineSubFile (onlineFile: $onlineFile, onlineSub: $onlineSub) {\r\n            onlineSubFile {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const DELETE_ONLINE_SUB_FILE = gql`\r\n    mutation deleteOnlineSubFile ($id: Int) {\r\n        deleteOnlineSubFile (id: $id) {\r\n            onlineSubFile {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const LESSONS_NAV = gql`\r\n    query lessonsNav {\r\n        allOnlineLessons {\r\n            id\r\n            subject {\r\n            subject\r\n            }\r\n        }\r\n        allOnlineTypes {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`","import React from 'react'\r\nimport { Form, Input, message } from 'antd';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport { CREATE_ONLINE_FILE_FOLDER } from 'graphql/lesson'\r\nimport { useMutation } from '@apollo/client';\r\n\r\n\r\nconst FolderForm = ({ refetch, currentFolder, handleCancel }) => {\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const [createFolder] = useMutation(CREATE_ONLINE_FILE_FOLDER, {\r\n        onCompleted: res => {\r\n            refetch()\r\n            handleCancel()\r\n            form.resetFields()\r\n            message.success(`Хавтас амжилттай үүслээ`)\r\n        }\r\n    })\r\n\r\n    const onFinish = values => {\r\n        values.subFolder = currentFolder\r\n        createFolder({ variables: values })\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Form\r\n                id=\"FolderForm\"\r\n                layout={'vertical'}\r\n                form={form}\r\n                name=\"title\"\r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item name=\"name\" label={<IntlMessage id=\"name\" />} rules={[\r\n                    {\r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    },\r\n                ]}>\r\n\r\n                    <Input />\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FolderForm","import React, { useState, useEffect } from \"react\";\r\nimport { List, Card, Button, Upload, message, Tabs, Modal, Image } from 'antd';\r\nimport Flex from 'components/shared-components/Flex'\r\nimport { DeleteTwoTone, UploadOutlined, FileOutlined, FileImageOutlined, VideoCameraOutlined, FolderAddOutlined } from '@ant-design/icons';\r\nimport { useMutation, useQuery, NetworkStatus } from '@apollo/client';\r\nimport ReactPlayer from \"react-player\";\r\nimport { SizeMe } from \"react-sizeme\";\r\nimport { Document, Page, pdfjs } from \"react-pdf\";\r\nimport { CREATE_ONLINE_FILE, ALL_ONLINE_FILE, DELETE_ONLINE_FILE, ALL_FOLDERS } from 'graphql/lesson';\r\nimport { BASE_SERVER_URL } from \"configs/AppConfig\";\r\nimport IntlMessage from \"components/util-components/IntlMessage\";\r\nimport Loading from \"components/shared-components/Loading\";\r\nimport { CheckPer } from \"hooks/checkPermission\";\r\nimport Folder from \"components/layout-components/Folder\";\r\nimport FolderForm from \"./folderForm\";\r\nimport { classNames } from \"utils\";\r\n\r\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\r\n\r\nconst { TabPane } = Tabs;\r\nconst { confirm } = Modal;\r\nconst { Meta } = Card;\r\n\r\nconst Index = () => {\r\n\r\n    const [images, setImages] = useState([]);\r\n    const [videos, setVideos] = useState([]);\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const [isFolderModalVisible, setIsFolderModalVisible] = useState(false);\r\n    const [selectedFile, setSelectedFile] = useState();\r\n    const [numPages, setNumPages] = useState(null);\r\n    const [pageNumber, setPageNumber] = useState(1);\r\n    const [currentFolder, setCurrentFolder] = useState(0)\r\n    const [folderHistory, setFolderHistory] = useState([{\r\n        id: 0,\r\n        name: \"Үндсэн хавтас\"\r\n    }]);\r\n\r\n    const filterImage = (values) => {\r\n        let filterredData = values.filter(file => file.file.split('.').pop() === 'png'\r\n            || file.file.split('.').pop() === 'jpeg'\r\n            || file.file.split('.').pop() === 'jpg'\r\n            || file.file.split('.').pop() === 'webp'\r\n            || file.file.split('.').pop() === 'svg').map((image) => (image));\r\n        setImages(filterredData);\r\n    };\r\n\r\n    const filterVideo = (values) => {\r\n        let filterredData = values.filter(file => file.file.split('.').pop() === 'mp4'\r\n            || file.file.split('.').pop() === 'mp3'\r\n            || file.file.split('.').pop() === 'flac'\r\n            || file.file.split('.').pop() === 'm4a').map((video) => (video));\r\n        setVideos(filterredData);\r\n    };\r\n    const { data, loading, refetch, networkStatus } = useQuery(ALL_ONLINE_FILE, {\r\n        variables: { folder: currentFolder }\r\n    });\r\n\r\n    const { data: folders, loading: folderLoading, refetch: folderRefetch } = useQuery(ALL_FOLDERS, {\r\n        variables: { folder: currentFolder }\r\n    })\r\n\r\n    const [upload, { loading: uploadLoading }] = useMutation(CREATE_ONLINE_FILE, {\r\n        onCompleted: data => {\r\n            refetch();\r\n            message.success(`Амжилттай хууллаа`);\r\n        }\r\n    });\r\n\r\n    const [deleteFile] = useMutation(DELETE_ONLINE_FILE, {\r\n        onCompleted: data => {\r\n            refetch();\r\n            message.success(`Амжилттай устлаа`);\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (networkStatus === NetworkStatus.ready) {\r\n            filterImage(data.allOnlineFiles);\r\n            filterVideo(data.allOnlineFiles);\r\n        }\r\n    }, [data?.allOnlineFiles, networkStatus])\r\n\r\n    const showModal = (value) => {\r\n        setIsModalVisible(true);\r\n        setSelectedFile(filePreview(value))\r\n    };\r\n\r\n    const showForm = ({ type }) => {\r\n        setIsFolderModalVisible(true)\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n        setIsFolderModalVisible(false)\r\n    };\r\n\r\n    const goToPrevPage = () => {\r\n        setPageNumber(pageNumber - 1)\r\n    }\r\n    const goToNextPage = () => {\r\n        setPageNumber(pageNumber + 1)\r\n    }\r\n\r\n    const checkPreviewFileType = (file) => {\r\n        const type = file.split('.').pop()\r\n        switch (type) {\r\n            case 'jpg':\r\n            case 'jpeg':\r\n            case 'webp':\r\n            case 'svg':\r\n            case 'png':\r\n                return `image`;\r\n            case 'mp3':\r\n            case 'm4a':\r\n            case 'flac':\r\n                return `audio`;\r\n            case 'mp4':\r\n                return `video`;\r\n            case `pdf`:\r\n                return `pdf`;\r\n            default:\r\n                return `${window.location.origin}/img/file/file-icon.png`;\r\n        }\r\n    }\r\n\r\n    const checkFileType = (file) => {\r\n        const type = file.split('.').pop()\r\n        switch (type) {\r\n            case 'jpg':\r\n            case 'jpeg':\r\n            case 'webp':\r\n            case 'svg':\r\n            case 'png':\r\n                return `${BASE_SERVER_URL}${file}`;\r\n            case 'mp3':\r\n            case 'm4a':\r\n            case 'flac':\r\n                return `${window.location.origin}/img/file/audio-file-attachment-icon.png`;\r\n            case 'mp4':\r\n                return `${window.location.origin}/img/file/video-file-attachment-icon.png`;\r\n            default:\r\n                return `${window.location.origin}/img/file/file-icon.png`;\r\n        }\r\n    }\r\n\r\n    const onBreadcrumbsChange = ({ key, id }) => {\r\n        if (key === 0) {\r\n            setFolderHistory([{\r\n                id: 0,\r\n                name: \"Үндсэн хавтас\"\r\n            }])\r\n        }\r\n        else {\r\n            setFolderHistory(folderHistory.slice(0, key + 1))\r\n        }\r\n        setCurrentFolder(id)\r\n    }\r\n\r\n    const filePreview = (file) => {\r\n\r\n        switch (checkPreviewFileType(file)) {\r\n            case `audio`:\r\n                return (\r\n                    <ReactPlayer\r\n                        className=\"react-player\"\r\n                        width=\"100%\"\r\n                        height=\"50px\"\r\n                        controls={true}\r\n                        url={BASE_SERVER_URL + file}\r\n                    />\r\n                )\r\n            case `video`:\r\n                return (\r\n                    <ReactPlayer\r\n                        width=\"100%\"\r\n                        height=\"100%\"\r\n                        controls={true}\r\n                        url={BASE_SERVER_URL + file}\r\n                    />\r\n                )\r\n            case 'image':\r\n                return (\r\n                    <Image style={{ maxHeight: '500px' }} preview={false} className=\"img-fluid\" alt=\"Preview\" src={BASE_SERVER_URL + file} />\r\n                )\r\n            case `pdf`:\r\n                return (\r\n                    <div>\r\n                        <SizeMe\r\n                            monitorHeight\r\n                            refreshRate={128}\r\n                            refreshMode={\"debounce\"}\r\n                            render={({ size }) => (\r\n                                <Document\r\n                                    file={BASE_SERVER_URL + file}\r\n                                    onLoadSuccess={({ numPagess }) => setNumPages(numPagess)}\r\n                                    renderTextLayer={false}\r\n                                    loading={<Loading cover=\"content\" />}\r\n                                    renderMode=\"svg\"\r\n                                >\r\n                                    <Page\r\n                                        className=\"test\"\r\n                                        width={size.width}\r\n                                        pageNumber={pageNumber}\r\n                                        renderTextLayer={false}\r\n                                        renderAnnotationLayer={false}\r\n                                    />\r\n                                </Document>\r\n                            )}\r\n                        />\r\n                        <p>Нийт {numPages} хуудсаас {pageNumber}-г харуулж байна </p>\r\n                        <div>\r\n                            <Button key=\"back\" type='text' disabled={pageNumber === 1 && true} onClick={goToPrevPage}>\r\n                                <IntlMessage id=\"main.previous\" />\r\n                            </Button>\r\n                            <Button key=\"next\" type=\"primary\" disabled={pageNumber === numPages && true} onClick={goToNextPage}>\r\n                                <IntlMessage id=\"main.next\" />\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    const fileUploading = value => {\r\n        upload({ variables: { file: value.file, folder: currentFolder } });\r\n        value.onSuccess(\"Ok\");\r\n    };\r\n\r\n    const deleteModal = value => {\r\n        confirm({\r\n            title: 'Устгах уу?',\r\n            okText: 'Устгах',\r\n            okType: 'danger',\r\n            cancelText: 'Болих',\r\n            onOk() {\r\n                deleteFile({ variables: { id: value } });\r\n            },\r\n        });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                forceRender\r\n                width={'80vw'}\r\n                visible={isModalVisible}\r\n                onCancel={handleCancel}\r\n                footer={<Button type=\"primary\" onClick={handleCancel} >Ok</Button>}\r\n            >\r\n                <div\r\n                    className=\"mt-4 text-center\"\r\n                >\r\n                    {selectedFile}\r\n                </div>\r\n            </Modal>\r\n            <Modal\r\n                forceRender\r\n                width={'80vw'}\r\n                visible={isFolderModalVisible}\r\n                onCancel={handleCancel}\r\n                okButtonProps={{ form: 'FolderForm', key: 'submit', htmlType: 'submit' }}\r\n            >\r\n                <div\r\n                    className=\"mt-4 text-center\"\r\n                >\r\n                    <FolderForm\r\n                        currentFolder={currentFolder}\r\n                        refetch={folderRefetch}\r\n                        handleCancel={handleCancel}\r\n                    />\r\n                </div>\r\n            </Modal>\r\n            <Flex justifyContent=\"end\" alignItems=\"center\" className=\"py-2\">\r\n                <nav aria-label=\"breadcrumb\" className=\"w-full px-4\">\r\n                    <ol className=\"flex h-8 space-x-2\">\r\n                        {folderHistory.map((item, index) => (\r\n                            <li key={index} className=\"flex items-center text-center\">\r\n                                {index !== 0 && <span className=\" text-center text-emind\">/</span>}\r\n                                <span\r\n                                    onClick={() => currentFolder !== item.id && onBreadcrumbsChange({ key: index, id: item.id })}\r\n                                    className={classNames(\r\n                                        currentFolder === item.id && 'font-bold',\r\n                                        \"flex items-center text-center px-1 capitalize text-emind hover:underline hover:cursor-pointer\"\r\n                                    )}\r\n                                >\r\n                                    {item.name}\r\n                                </span>\r\n                            </li>\r\n                        ))}\r\n                    </ol>\r\n                </nav>\r\n                <div className=\"flex space-x-4\">\r\n                    {CheckPer(\"add_online_file\") &&\r\n                        <Upload\r\n                            multiple={true}\r\n                            accept=\".jpg, .png, .pdf, .mp3, .mp4, .m4a\"\r\n                            orientation=\"right\"\r\n                            customRequest={fileUploading}\r\n                            showUploadList={false}\r\n                        >\r\n                            <Button\r\n                                style={{ float: 'right' }}\r\n                                size='small'\r\n                                type=\"primary\"\r\n                                icon={<UploadOutlined />}\r\n                                loading={uploadLoading}\r\n                            > <IntlMessage id=\"main.upload-file\" /> </Button>\r\n                        </Upload>\r\n                    }\r\n                    {CheckPer('add_online_file_folder') &&\r\n                        <Button\r\n                            onClick={() => showForm({ type: 'create' })}\r\n                            style={{ float: 'right' }}\r\n                            size='small'\r\n                            type=\"primary\"\r\n                            icon={<FolderAddOutlined />}\r\n                        > <IntlMessage id=\"folder-file\" /> </Button>\r\n                    }\r\n                </div>\r\n            </Flex>\r\n            <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\r\n                {\r\n                    folderLoading ?\r\n                        <Loading cover=\"content\" />\r\n                        :\r\n                        folders?.allFolders.map((folder, index) => (\r\n                            <Folder\r\n                                key={index}\r\n                                data={folder}\r\n                                refetch={folderRefetch}\r\n                                // onEdit={onEdit}\r\n                                setFolder={setCurrentFolder}\r\n                                setFolderHistory={setFolderHistory}\r\n                            />\r\n                        ))\r\n                }\r\n            </div>\r\n            <Card className=\"mt-4\" loading={loading}>\r\n\r\n                <div className={`my-4 container-fluid`}>\r\n                    <Tabs tabPosition='top' defaultActiveKey=\"1\" size='small'>\r\n                        <TabPane\r\n                            key=\"1\"\r\n                            tab={\r\n                                <span>\r\n                                    <FileOutlined /> <IntlMessage id=\"main.all-file\" />\r\n                                </span>\r\n                            }\r\n                        >\r\n                            <List\r\n                                pagination={{\r\n                                    pageSize: 12,\r\n                                }}\r\n                                grid={{\r\n                                    gutter: 16,\r\n                                    xs: 1,\r\n                                    sm: 2,\r\n                                    md: 4,\r\n                                    lg: 4,\r\n                                    xl: 6,\r\n                                    xxl: 6,\r\n                                }}\r\n                                dataSource={data?.allOnlineFiles}\r\n                                renderItem={item => (\r\n                                    <List.Item>\r\n                                        <Card\r\n                                            hoverable\r\n                                            bordered={false}\r\n                                            type=\"inner\"\r\n                                            cover={\r\n                                                <Image\r\n                                                    alt=\"preview\"\r\n                                                    preview={false}\r\n                                                    onClick={() => showModal(item.file)}\r\n                                                    src={checkFileType(item.file)}\r\n                                                />\r\n                                            }\r\n                                            actions={[\r\n                                                <DeleteTwoTone twoToneColor=\"#eb2f96\" key=\"delete\" onClick={event => deleteModal(item.id)} />\r\n                                            ]}\r\n                                        >\r\n                                            <Meta description={item.file} />\r\n                                        </Card>\r\n                                    </List.Item>\r\n                                )}\r\n                            />\r\n                        </TabPane>\r\n                        <TabPane\r\n                            tab={\r\n                                <span>\r\n                                    <FileImageOutlined /> <IntlMessage id=\"main.image\" />\r\n                                </span>\r\n                            }\r\n                            key=\"2\"\r\n                        >\r\n                            <List\r\n                                pagination={{\r\n                                    pageSize: 12,\r\n                                }}\r\n                                grid={{\r\n                                    gutter: 16,\r\n                                    xs: 1,\r\n                                    sm: 2,\r\n                                    md: 4,\r\n                                    lg: 4,\r\n                                    xl: 6,\r\n                                    xxl: 6,\r\n                                }}\r\n                                dataSource={images}\r\n                                renderItem={item => (\r\n                                    <List.Item>\r\n                                        <Card\r\n                                            hoverable\r\n                                            bordered={false}\r\n                                            type=\"inner\"\r\n                                            cover={\r\n                                                <Image\r\n                                                    alt=\"preview\"\r\n                                                    preview={false}\r\n                                                    onClick={() => showModal(item.file)}\r\n                                                    src={checkFileType(item.file)}\r\n                                                />\r\n\r\n                                            }\r\n                                            actions={[\r\n                                                <DeleteTwoTone twoToneColor=\"#eb2f96\" key=\"delete\" onClick={event => deleteModal(item.id)} />\r\n                                            ]}\r\n                                        >\r\n                                            <Meta description={item.file} />\r\n                                        </Card>\r\n                                    </List.Item>\r\n                                )}\r\n                            />\r\n                        </TabPane>\r\n                        <TabPane\r\n                            tab={\r\n                                <span>\r\n                                    <VideoCameraOutlined /> <IntlMessage id=\"main.media\" />\r\n                                </span>\r\n                            }\r\n                            key=\"3\"\r\n                        >\r\n                            <List\r\n                                pagination={{\r\n                                    pageSize: 12,\r\n                                }}\r\n                                grid={{\r\n                                    gutter: 16,\r\n                                    xs: 1,\r\n                                    sm: 2,\r\n                                    md: 4,\r\n                                    lg: 4,\r\n                                    xl: 6,\r\n                                    xxl: 6,\r\n                                }}\r\n                                dataSource={videos}\r\n                                renderItem={item => (\r\n                                    <List.Item>\r\n                                        <Card\r\n                                            hoverable\r\n                                            bordered={false}\r\n                                            type=\"inner\"\r\n                                            cover={\r\n                                                <Image\r\n                                                    alt=\"preview\"\r\n                                                    preview={false}\r\n                                                    onClick={() => showModal(item.file)}\r\n                                                    src={checkFileType(item.file)}\r\n                                                />\r\n\r\n                                            }\r\n                                            actions={[\r\n                                                <DeleteTwoTone twoToneColor=\"#eb2f96\" key=\"delete\" onClick={event => deleteModal(item.id)} />\r\n                                            ]}\r\n                                        >\r\n                                            <Meta description={item.file} />\r\n                                        </Card>\r\n                                    </List.Item>\r\n                                )}\r\n                            />\r\n                        </TabPane>\r\n                    </Tabs>\r\n                </div>\r\n            </Card>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Index;"],"names":["confirm","Modal","data","setFolder","setFolderHistory","refetch","useState","x","y","points","setPoints","show","setShow","ref","useRef","useMutation","DELETE_ONLINE_FILE_FOLDER","onCompleted","message","deleteFolder","useEffect","onClickOutside","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","className","draggable","onDragEnter","e","stopPropagation","onDragOver","onDropCapture","console","log","onContextMenuCapture","preventDefault","pageX","pageY","onClick","id","name","prevData","onFolderClicked","style","top","left","twoToneColor","title","okText","okType","cancelText","onOk","variables","Flex","props","children","alignItems","justifyContent","mobileFlex","flexDirection","defaultProps","ALL_ONLINE_TYPE","gql","ALL_ONLINE_FILE","ALL_FOLDERS","CREATE_ONLINE_FILE","CREATE_ONLINE_FILE_FOLDER","DELETE_ONLINE_FILE","CREATE_ONLINE_LESSON","UPDATE_ONLINE_LESSON","ALL_ONLINE_LESSON","LESSON_BY_ID","DELETE_ONLINE_LESSON","ALL_SUB_LESSON_BY_LESSON","CREATE_SUB_LESSON","UPDATE_SUB_LESSON","DELETE_SUB_LESSON","SUB_BY_ID","CREATE_ONLINE_SUB_FILE","LESSONS_NAV","currentFolder","handleCancel","Form","form","res","resetFields","createFolder","layout","onFinish","values","subFolder","label","IntlMessage","rules","required","pdfjs","TabPane","Tabs","Meta","Card","images","setImages","videos","setVideos","isModalVisible","setIsModalVisible","isFolderModalVisible","setIsFolderModalVisible","selectedFile","setSelectedFile","numPages","setNumPages","pageNumber","setPageNumber","setCurrentFolder","folderHistory","useQuery","folder","loading","networkStatus","folders","folderLoading","folderRefetch","upload","uploadLoading","deleteFile","NetworkStatus","filterredData","filter","file","split","pop","map","image","filterImage","allOnlineFiles","video","filterVideo","showModal","value","filePreview","goToPrevPage","goToNextPage","checkFileType","BASE_SERVER_URL","window","location","origin","checkPreviewFileType","width","height","controls","url","maxHeight","preview","alt","src","SizeMe","monitorHeight","refreshRate","refreshMode","render","size","onLoadSuccess","numPagess","renderTextLayer","Loading","cover","renderMode","renderAnnotationLayer","type","disabled","deleteModal","forceRender","visible","onCancel","footer","okButtonProps","key","htmlType","item","index","slice","onBreadcrumbsChange","classNames","CheckPer","multiple","accept","orientation","customRequest","onSuccess","showUploadList","float","icon","UploadOutlined","FolderAddOutlined","allFolders","Folder","tabPosition","defaultActiveKey","tab","FileOutlined","pagination","pageSize","grid","gutter","xs","sm","md","lg","xl","xxl","dataSource","renderItem","hoverable","bordered","actions","DeleteTwoTone","description","FileImageOutlined","VideoCameraOutlined"],"sourceRoot":""}