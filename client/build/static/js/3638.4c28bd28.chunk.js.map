{"version":3,"file":"static/js/3638.4c28bd28.chunk.js","mappings":"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","sources":["components/shared-components/Flex/index.js","graphql/test.js","views/app-views/take-test/exam-form.js","views/app-views/take-test/exam.js","views/app-views/take-test/show-score.js"],"sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Flex = props => {\r\n\tconst { children, className, alignItems, justifyContent, mobileFlex, flexDirection } = props\r\n\tconst getFlexResponsive = () => mobileFlex ? 'd-flex' : 'd-md-flex'\r\n\treturn (\r\n\t\t<div className={`${getFlexResponsive()} ${className} ${flexDirection?('flex-' + flexDirection): ''} ${alignItems?('align-items-' + alignItems):''} ${justifyContent?('justify-content-' + justifyContent):''}` }>\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nFlex.propTypes = {\r\n\tclassName: PropTypes.string,\r\n\talignItems: PropTypes.string,\r\n\tflexDirection: PropTypes.string,\r\n\tjustifyContent: PropTypes.string,\r\n\tmobileFlex: PropTypes.bool\r\n}\r\n\r\nFlex.defaultProps = {\r\n\tmobileFlex: true,\r\n\tflexDirection: 'row',\r\n\tclassName: ''\r\n};\r\n\r\n\r\nexport default Flex\r\n","import { gql } from \"@apollo/client\";\r\n\r\nexport const ALL_ONLINE_TESTS = gql `\r\n    query allOnlineTests {\r\n        allOnlineTests {\r\n            id\r\n            title\r\n            description\r\n            subject {\r\n                id\r\n                subject\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_ONLINE_TEST = gql `\r\n    mutation createOnlineTest ($description: String, $subject: Int, $title: String) {\r\n        createOnlineTest (description: $description, subject: $subject, title: $title) {\r\n            onlineTest {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_ONLINE_TEST = gql `\r\n    mutation updateOnlineTest ($description: String, $id: ID, $subject: Int, $title: String) {\r\n        updateOnlineTest (description: $description, id: $id, subject: $subject, title: $title) {\r\n            OnlineTest {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_ONLINE_TEST = gql `\r\n    mutation deleteOnlineTest ($id: ID) {\r\n        deleteOnlineTest (id: $id) {\r\n            onlineTest {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_QUESTION_LEVELS = gql `\r\n    query allQuestionLevels {\r\n        allQuestionLevels {\r\n            level\r\n            id\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_QUESTION_LEVEL = gql `\r\n    mutation createQuestionLevel ($level: String) {\r\n        createQuestionLevel (level: $level) {\r\n            questionLevel {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_QUESTION_LEVEL = gql `\r\n    mutation updateQuestionLevel ($level: String, $id: ID) {\r\n        updateQuestionLevel (level: $level, id: $id) {\r\n            questionLevel {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_QUESTION_LEVEL = gql `\r\n    mutation deleteQuestionLevel ($id: ID) {\r\n        deleteQuestionLevel (id: $id) {\r\n            questionLevel {\r\n                level\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_QUESTIONS_BY_TEST = gql `\r\n    query allQuestionsByTest ($id: Int!) {\r\n        allQuestionsByTest (id: $id) {\r\n            id\r\n            question\r\n            hint\r\n            image\r\n            answerType\r\n            questionLevel {\r\n                id\r\n                level\r\n            }\r\n            questionChoiceSet {\r\n                id\r\n                answer\r\n                score\r\n            }\r\n        }\r\n    }\r\n`; \r\n\r\nexport const CREATE_QUESTION = gql `\r\n    mutation createQuestion ($answerType: String, $hint: String, $image: Upload, $onlineTest: Int, $questionL: String, $questionLevel: Int) {\r\n        createQuestion (answerType: $answerType, hint: $hint, image: $image, onlineTest: $onlineTest, questionL: $questionL, questionLevel: $questionLevel) {\r\n            question {\r\n                id\r\n                answerType\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_QUESTION = gql `\r\n    mutation updateQuestion ($answerType: String, $hint: String, $image: Upload, $onlineTest: Int, $questionL: String, $questionLevel: Int, $id: ID) {\r\n        updateQuestion (answerType: $answerType, hint: $hint, image: $image, onlineTest: $onlineTest, questionL: $questionL, questionLevel: $questionLevel, id: $id) {\r\n            question {\r\n                id\r\n                answerType\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_QUESTION = gql `\r\n    mutation deleteQuestion ($id: ID) {\r\n        deleteQuestion (id: $id) {\r\n            question {\r\n                question\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_QUESTION_CHOICE = gql `\r\n    mutation createQuestionChoice ($answer: String, $question: Int, $score: Decimal) {\r\n        createQuestionChoice (answer: $answer, question: $question, score: $score) {\r\n            questionChoice {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_QUESTION_CHOICE = gql `\r\n    mutation updateQuestionChoice ($answer: String, $question: Int, $score: Decimal, $id: ID) {\r\n        updateQuestionChoice (answer: $answer, question: $question, score: $score, id: $id) {\r\n            questionChoice {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_QUESTION_CHOICE = gql `\r\n    mutation deleteQuestionChoice ($id: ID) {\r\n        deleteQuestionChoice (id: $id) {\r\n            questionChoice {\r\n                score\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_TAKE_TEST = gql `\r\n    query allTakeTests {\r\n        allTakeTests {\r\n            id\r\n            title\r\n            description\r\n            startAt\r\n            endAt\r\n            duration\r\n            status\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_TAKE_TEST = gql `\r\n    mutation createTakeTest ($duration: Int, $endAt: String, $startAt: String, $status: String, $description: String, $title: String) {\r\n        createTakeTest (duration: $duration, endAt: $endAt, startAt: $startAt, status: $status, description: $description, title: $title) {\r\n            takeTest {\r\n                status\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_TAKE_TEST = gql `\r\n    mutation updateTakeTest ($duration: Int, $endAt: String, $startAt: String, $status: String, $id: ID, $description: String, $title: String) {\r\n        updateTakeTest (duration: $duration, endAt: $endAt, startAt: $startAt, status: $status, id: $id, description: $description, title: $title) {\r\n            takeTest {\r\n                status\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_TAKE_TEST = gql `\r\n    mutation deleteTakeTest ($id: ID) {\r\n        deleteTakeTest (id: $id) {\r\n            takeTest {\r\n                status\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_PARTICIPANT_BY_TEST = gql `\r\n    query allParticipantByTest ($takeTest: Int!) {\r\n        allParticipantByTest (takeTest: $takeTest) {\r\n            id\r\n            student {\r\n                studentCode\r\n                familyName\r\n                name\r\n            }\r\n            started\r\n            completed\r\n            answerSet {\r\n                answerType\r\n                questionText\r\n                choices\r\n                score\r\n                givenAnswer\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_PARTICIPANT = gql `\r\n    mutation createParticipant ($section: Int, $studentCode: String, $takeTest: Int) {\r\n        createParticipant (section: $section, studentCode: $studentCode, takeTest: $takeTest) {\r\n            participant {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_PARTICIPANT = gql `\r\n    mutation deleteParticipant ($id: ID, $takeTest: Int) {\r\n        deleteParticipant (id: $id, takeTest: $takeTest) {\r\n            participant {\r\n                started\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_TAKE_LEVEL = gql `\r\n    query allTakeLevelByTest ($takeTest: Int!) {\r\n        allTakeLevelByTest (takeTest: $takeTest) {\r\n            id\r\n            onlineTest {\r\n                id\r\n                title\r\n            }\r\n            questionLevel {\r\n                id\r\n                level\r\n            }\r\n            takeNumber\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_TAKE_LEVEL = gql `\r\n    mutation createTakeLevel ($onlineTest: Int, $questionLevel: Int, $takeNumber: Int, $takeTest: Int) {\r\n        createTakeLevel (onlineTest: $onlineTest, questionLevel: $questionLevel, takeNumber: $takeNumber, takeTest: $takeTest) {\r\n            takeLevel {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_TAKE_LEVEL = gql `\r\n    mutation deleteTakeLevel ($id: ID) {\r\n        deleteTakeLevel (id: $id) {\r\n            takeLevel {\r\n                takeNumber\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_SECTIONS = gql `\r\n    query allSections {\r\n        allSections {\r\n            id\r\n            section\r\n            studentSet {\r\n                id\r\n                studentCode\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const START_TEST = gql `\r\n    query startTest ($takeTest: Int!) {\r\n        startTest (takeTest: $takeTest) {\r\n            id\r\n            questionText\r\n            choices\r\n            answerType\r\n            givenAnswer\r\n            question {\r\n                hint\r\n                image\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_ANSWER = gql `\r\n    mutation updateAnswer ($givenAnswer: String, $id: ID) {\r\n        updateAnswer (givenAnswer: $givenAnswer, id: $id) {\r\n            answer {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const TEST_TIME = gql `\r\n    query testTime ($takeTest: Int!) {\r\n        testTime (takeTest: $takeTest) {\r\n            duration\r\n            started\r\n            endAt\r\n        }\r\n    }\r\n`;\r\n\r\nexport const FINISH_TEST = gql `\r\n    query finishTest ($takeTest: Int!) {\r\n        finishTest (takeTest: $takeTest) {\r\n            score\r\n        }\r\n    }\r\n`;","import React, { useState, useEffect } from 'react';\r\nimport { Button, Card, Form, Typography, Input, Radio, Checkbox, Image, Modal, Result } from 'antd';\r\nimport {\r\n    LeftOutlined,\r\n    RightOutlined,\r\n    DoubleRightOutlined,\r\n    CheckOutlined\r\n} from '@ant-design/icons';\r\nimport { useMutation } from '@apollo/client';\r\nimport { UPDATE_ANSWER } from 'graphql/test';\r\nimport { BASE_SERVER_URL } from \"configs/AppConfig\";\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\n\r\nconst { Title, Paragraph, Text } = Typography;\r\nconst { TextArea } = Input;\r\nconst { confirm } = Modal;\r\n\r\nconst layout = {\r\n    labelCol: { span: 3 },\r\n    wrapperCol: { span: 24 },\r\n};\r\nconst tailLayout = {\r\n    wrapperCol: { span: 32 },\r\n};\r\n\r\nconst ExamForm = ({ answer, refetch, next, prev, setIsFinished, page, answers }) => {\r\n\r\n    const [form] = Form.useForm();\r\n    const [question, setQuestion] = useState(answer);\r\n\r\n    useEffect(() => {\r\n        if (answer) {\r\n            const selectedAnswers = [];\r\n            let selectedAnswer = \"\";\r\n\r\n            setQuestion(answer)\r\n            if (answer !== answer.givenAnswer) {\r\n                if (answer.answerType === \"TEXT\") {\r\n                    form.setFieldsValue({\r\n                        givenAnswer: answer.givenAnswer\r\n                    });\r\n                }\r\n                if (answer.answerType === \"MULTIPLE\") {\r\n                    let splitted = answer?.givenAnswer.split(',|')\r\n                    splitted.pop();\r\n                    splitted.map(sValue => (\r\n                        answer.choices.filter(choice => choice.text === sValue).map(aValue => (selectedAnswers.push(aValue.value)))\r\n                    ))\r\n                    form.setFieldsValue({\r\n                        givenAnswer: selectedAnswers\r\n                    });\r\n                }\r\n                if (answer.answerType === \"CHOOSE\") {\r\n                    answer.choices.filter(choice => choice.text === answer.givenAnswer).map(aValue => (selectedAnswer = aValue.value))\r\n                    form.setFieldsValue({\r\n                        givenAnswer: selectedAnswer\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }, [answer, form, question])\r\n\r\n    const [updateAnswer, { loading: updateLoading }] = useMutation(UPDATE_ANSWER, {\r\n        onCompleted: data => {\r\n            refetch();\r\n            next();\r\n        }\r\n    })\r\n\r\n    const onFinish = (valuess) => {\r\n        valuess.id = question.id;\r\n        if (question.answerType === 'MULTIPLE') {\r\n            valuess.givenAnswer = valuess.givenAnswer.map((values) => `${values}`).join(',');\r\n        }\r\n        updateAnswer({ variables: valuess });\r\n    }\r\n\r\n    const finishTest = () => {\r\n        confirm({\r\n            title: \"Шалгалт дуусгах уу?\",\r\n            okText: \"Дуусгах\",\r\n            cancelText: \"Болих\",\r\n            onOk() {\r\n                setIsFinished(true)\r\n            },\r\n        });\r\n    }\r\n\r\n    if (question === undefined) {\r\n        return <Result\r\n            title=\"Асуулт алга байна!\"\r\n        />\r\n    }\r\n\r\n    return (\r\n        <Card className='bg-mkp/5'>\r\n            <Title level={3}><IntlMessage id=\"question\" /> {page + 1}</Title>\r\n            <Paragraph >\r\n                {question.questionText}\r\n            </Paragraph>\r\n            {answer.hint &&\r\n                <div>\r\n                    <Title type=\"secondary\" level={4}><IntlMessage id=\"question.hint\" /></Title>\r\n                    <Text type=\"secondary\">\r\n                        {answer.hint}\r\n                    </Text>\r\n                </div>\r\n            }\r\n            {answer.image &&\r\n                <div className=\"p-2\">\r\n                    <Image preview={false} style={{ maxHeight: '400px' }} className=\"img-fluid\" alt=\"Preview\" src={BASE_SERVER_URL + answer.image} />\r\n                </div>\r\n            }\r\n            <Form\r\n                {...layout}\r\n                layout=\"vertical\"\r\n                form={form}\r\n                name=\"control-hooks\"\r\n                onFinish={onFinish}\r\n                initialvaluess={{\r\n                    givenAnswer: question.givenAnswer\r\n                }}\r\n            >\r\n                {\r\n                    question.answerType === 'TEXT' ? (\r\n                        <Form.Item name=\"givenAnswer\" label={<IntlMessage id=\"question.answer\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <TextArea rows={4} />\r\n                        </Form.Item>\r\n                    ) : null\r\n                }\r\n                {\r\n                    question.answerType === 'CHOOSE' ? (\r\n                        <Form.Item name=\"givenAnswer\" label={<IntlMessage id=\"question.answer\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Radio.Group>\r\n                                <div className='flex flex-col gap-2'>\r\n                                    {question.choices.map((choice, index) => (\r\n                                        <Radio value={choice.value} key={index} >{choice.text}</Radio>\r\n                                    ))}\r\n                                </div>\r\n                            </Radio.Group>\r\n                        </Form.Item>\r\n                    ) : null\r\n                }\r\n                {\r\n                    question.answerType === 'MULTIPLE' ? (\r\n                        <Form.Item name=\"givenAnswer\" label={<IntlMessage id=\"question.answer\" />} rules={[{ required: true }]}>\r\n                            <Checkbox.Group>\r\n                                <div className='flex flex-col gap-2 justify-start'>\r\n                                    {question.choices.map((choice, index) => (\r\n                                        <Checkbox value={choice.value} key={index} >{choice.text}</Checkbox>\r\n                                    ))}\r\n                                </div>\r\n                            </Checkbox.Group>\r\n                        </Form.Item>\r\n                    ) : null\r\n                }\r\n                <Form.Item {...tailLayout}>\r\n                    <Button disabled={page < 1 && true} className=\"mr-2\" type=\"primary\" htmlType=\"button\" loading={updateLoading} onClick={() => prev()}>\r\n                        <LeftOutlined /> <IntlMessage id=\"main.previous\" />\r\n                    </Button>\r\n                    <Button disabled={page + 1 === answers.length} type=\"danger\" className=\"mr-2\" htmlType=\"button\" loading={updateLoading} onClick={() => next()}>\r\n                        <IntlMessage id=\"main.skip\" /> <DoubleRightOutlined />\r\n                    </Button>\r\n                    <Button disabled={page + 1 === answers.length} className=\"mr-2\" type=\"primary\" htmlType=\"submit\" loading={updateLoading}>\r\n                        <IntlMessage id=\"main.next\" /> <RightOutlined />\r\n                    </Button>\r\n                    {page + 1 === answers.length &&\r\n                        <Button style={{ float: 'right', background: \"#5aac44\", borderColor: \"#5aac44\", color: \"#fff\" }} className=\"mr-2\" type=\"danger\" htmlType=\"submit\" onClick={() => finishTest()}>\r\n                            <CheckOutlined /> <IntlMessage id=\"main.finish-exam\" />\r\n                        </Button>\r\n                    }\r\n                </Form.Item>\r\n            </Form>\r\n        </Card>\r\n    )\r\n\r\n}\r\n\r\nexport default ExamForm","import React, { useState, useEffect } from 'react';\r\nimport { useQuery, useLazyQuery } from '@apollo/client';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Card, Col, Row, Statistic, Button, message } from 'antd';\r\nimport { START_TEST, TEST_TIME, FINISH_TEST } from 'graphql/test';\r\nimport moment from 'moment';\r\nimport ExamForm from './exam-form';\r\nimport Loading from 'components/shared-components/Loading';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport ShowScore from './show-score';\r\n\r\nconst { Countdown } = Statistic;\r\n\r\nconst Exam = () => {\r\n\r\n    const slug = useParams();\r\n    const [score, setScore] = useState(0)\r\n\r\n    const [leftTime, setLeftTime] = useState(null);\r\n    const [isFinished, setIsFinished] = useState(false);\r\n    const [loading, setLoading] = useState(true);\r\n    \r\n    const [page, setPage] = useState(0);\r\n    const [answers, setAnswers] = useState([]);\r\n\r\n    let filledForm = 0;\r\n\r\n    const [getTime] = useLazyQuery(TEST_TIME, {\r\n        onCompleted: data => {\r\n            const endAt = moment(data.testTime.endAt);\r\n            const startedAt = moment(data.testTime.started);\r\n            const current = moment();\r\n            if (moment.duration(endAt.diff(current)).asMilliseconds() < 0) {\r\n                return message.error('Хугацаа дууссан байна!')\r\n            } else {\r\n                if (moment(startedAt).add(data.testTime.duration, 'm').valueOf() <=  moment(endAt).valueOf()) {\r\n                    if (moment.duration(moment(startedAt).add(data.testTime.duration, 'm').diff(current)).asMilliseconds() < 0) {\r\n                        // setIsFinished(true);\r\n                    } else {\r\n                        setLeftTime(moment(startedAt).add(data.testTime.duration, 'm'))\r\n                    }\r\n                } else {\r\n                    setLeftTime(endAt)\r\n                }\r\n            }\r\n        }\r\n    })\r\n\r\n    const [finishTest, { called }] = useLazyQuery(FINISH_TEST, {\r\n        onCompleted: data => {\r\n            setLoading(false)\r\n            message.warning('Шалгалт дууссан!')\r\n            setScore(data.finishTest.score);\r\n        }\r\n    })\r\n\r\n    const { refetch } = useQuery(START_TEST, {\r\n        variables: { takeTest: slug.test },\r\n        onCompleted: data => {\r\n            getTime({variables: { takeTest: slug.test }})\r\n            const newData = [];\r\n            if (data.startTest === null) {\r\n                setIsFinished(true);\r\n            } else {\r\n                data.startTest.map(function (item) {\r\n                    let allChoices = [];\r\n    \r\n                    if (item.answerType === ('CHOOSE') || item.answerType === ('MULTIPLE' )) {\r\n                        const choices = item.choices.split(',|')\r\n                        choices.pop();\r\n                        choices.map(function (e) {\r\n                            const splitted = e.split(':|');\r\n                            return allChoices.push({\r\n                                value: splitted[0],\r\n                                text: splitted[1]\r\n                            });\r\n                        });\r\n                    }\r\n                    return newData.push({\r\n                        hint: item.question.hint,\r\n                        image: item.question.image,\r\n                        answerType: item.answerType,\r\n                        givenAnswer: item.givenAnswer,\r\n                        id: item.id,\r\n                        questionText: item.questionText,\r\n                        choices: allChoices\r\n                    })\r\n                })\r\n                setAnswers(newData);\r\n                setLoading(false);\r\n            }\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (isFinished) {\r\n            finishTest({ variables: { takeTest: slug.test } })\r\n        }\r\n    }, [finishTest, isFinished, slug])\r\n\r\n    const handleChange = (value) => {\r\n        setPage(value);\r\n    }\r\n\r\n    const next = () => {\r\n        if (answers.length > page + 1) {\r\n            setPage(prevPage => (prevPage + 1))\r\n        }\r\n    }\r\n\r\n    const prev = () => {\r\n        setPage(prevPage => (prevPage - 1))\r\n    }\r\n\r\n    const Buttons = ({ answer, index }) => {\r\n        if (index === page) {\r\n            return (\r\n                <Button \r\n                    key={index}\r\n                    shape=\"circle\" \r\n                    type=\"primary\"\r\n                    className='mx-1' \r\n                    size='small'\r\n                    onClick={() => handleChange(index)}\r\n                >\r\n                    {index+1}\r\n                </Button>\r\n            )\r\n        }\r\n        if (answer.givenAnswer === \"\") {\r\n             return <Button \r\n                key={index}\r\n                shape=\"circle\"\r\n                className='mx-1' \r\n                size='small'\r\n                onClick={() => handleChange(index)}\r\n            >\r\n                {index+1}\r\n            </Button>\r\n        } \r\n        return (\r\n            <Button \r\n                key={index}\r\n                shape=\"circle\" \r\n                type=\"primary\"\r\n                className='mx-1 bg-green-500' \r\n                size='small'\r\n                onClick={() => handleChange(index)}\r\n            >\r\n                {index+1}\r\n            </Button>\r\n        )\r\n    }\r\n\r\n    if (loading) {\r\n        return <Loading cover=\"content\" />\r\n    }\r\n\r\n    if (called) {\r\n        return <ShowScore score={score} />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Row gutter={[8, 16]}>\r\n                <Col xs={24} xl={18}>\r\n                    <ExamForm \r\n                        answer={answers[page]}\r\n                        answers={answers}\r\n                        page={page}\r\n                        next={next}\r\n                        prev={prev}\r\n                        refetch={refetch}\r\n                        setIsFinished={setIsFinished}\r\n                    />\r\n                </Col>\r\n                <Col xs={24} xl={6}>\r\n                    <Card className='bg-red-500/5'>\r\n                        <Countdown \r\n                            title={<span className='mb-4' ><IntlMessage id=\"exam.time-left\" /></span>}  \r\n                            value={leftTime} \r\n                            onFinish={() => setIsFinished(true)} \r\n                        />\r\n                    </Card>\r\n                    <Card\r\n                        title={<IntlMessage id=\"question\" />}\r\n                        className='bg-mkp/5'\r\n                    >\r\n                        { answers.map(function (answer, index) {\r\n                            filledForm = filledForm + 1\r\n                            return (\r\n                                <Buttons answer={answer} key={index} index={index} />\r\n                            )\r\n                        })}\r\n                    </Card>\r\n                    <Card\r\n                        title={<IntlMessage id=\"exam.recommendations\" />}\r\n                        className='bg-blue-500/5'\r\n                    >\r\n                        <div className='mt-2'>\r\n                            <Button shape=\"circle\" type='primary' className='mx-1' size='small'>\r\n                                1\r\n                            </Button>\r\n                            <IntlMessage id=\"exam.current\" />\r\n                        </div>\r\n                        <div className='mt-2'>\r\n                            <Button shape=\"circle\" type='primary' className='mx-1 bg-green-500' size='small'>\r\n                                2\r\n                            </Button>\r\n                            <IntlMessage id=\"exam.completed\" />\r\n                        </div>\r\n                        <div className='mt-2'>\r\n                            <Button shape=\"circle\" className='mx-1' size='small'>\r\n                                3\r\n                            </Button>\r\n                            <IntlMessage id=\"exam.uncompleted\" />\r\n                        </div>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Exam;","import React from 'react';\r\nimport { RollbackOutlined } from '@ant-design/icons';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport { Button } from 'antd';\r\nimport { Link } from 'react-router-dom';\r\nimport { APP_PREFIX_PATH } from 'configs/AppConfig';\r\nimport Flex from 'components/shared-components/Flex';\r\n\r\nconst ShowScore = ({ score }) => {\r\n\r\n\treturn (\r\n\t\t<div className=\"container text-center\">\r\n\t\t\t<Flex alignItems=\"center\" justifyContent=\"between\" mobileFlex={false}>\r\n\t\t\t\t<Flex mobileFlex={false}>\r\n\t\t\t\t\t<div className='text-right' >\r\n\t\t\t\t\t\t<Link to={`${APP_PREFIX_PATH}/take-test`}>\r\n\t\t\t\t\t\t\t<Button type=\"default\" icon={<RollbackOutlined />} block> <IntlMessage id=\"back\" /></Button>\r\n\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Flex>\r\n\t\t\t</Flex>\r\n\t\t\t<div className=\"py-lg-4 bg-mkp rounded-4 mt-4\">\r\n\t\t\t\t<h1 className=\"text-white display-4\"><IntlMessage id=\"total-exam-score\" /></h1>\r\n\t\t\t\t<p className=\"text-white text-center text-2xl mt-2 mb-4 mx-auto\">\r\n\t\t\t\t\t{score}\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n\r\n}\r\n\r\nexport default ShowScore"],"names":["Flex","props","children","className","alignItems","justifyContent","mobileFlex","flexDirection","defaultProps","ALL_ONLINE_TESTS","gql","CREATE_ONLINE_TEST","UPDATE_ONLINE_TEST","DELETE_ONLINE_TEST","ALL_QUESTION_LEVELS","CREATE_QUESTION_LEVEL","UPDATE_QUESTION_LEVEL","DELETE_QUESTION_LEVEL","ALL_QUESTIONS_BY_TEST","CREATE_QUESTION","UPDATE_QUESTION","DELETE_QUESTION","CREATE_QUESTION_CHOICE","UPDATE_QUESTION_CHOICE","DELETE_QUESTION_CHOICE","ALL_TAKE_TEST","CREATE_TAKE_TEST","UPDATE_TAKE_TEST","DELETE_TAKE_TEST","ALL_PARTICIPANT_BY_TEST","CREATE_PARTICIPANT","DELETE_PARTICIPANT","ALL_TAKE_LEVEL","CREATE_TAKE_LEVEL","DELETE_TAKE_LEVEL","START_TEST","UPDATE_ANSWER","TEST_TIME","FINISH_TEST","Title","Typography","Paragraph","Text","TextArea","Input","confirm","Modal","layout","labelCol","span","wrapperCol","tailLayout","answer","refetch","next","prev","setIsFinished","page","answers","Form","form","useState","question","setQuestion","useEffect","selectedAnswers","selectedAnswer","givenAnswer","answerType","setFieldsValue","splitted","split","pop","map","sValue","choices","filter","choice","text","aValue","push","value","useMutation","onCompleted","data","updateAnswer","updateLoading","loading","undefined","title","level","IntlMessage","id","questionText","hint","type","image","preview","style","maxHeight","alt","src","BASE_SERVER_URL","name","onFinish","valuess","values","join","variables","initialvaluess","label","rules","required","message","rows","index","disabled","htmlType","onClick","LeftOutlined","length","DoubleRightOutlined","RightOutlined","float","background","borderColor","color","okText","cancelText","onOk","CheckOutlined","Countdown","Statistic","slug","useParams","score","setScore","leftTime","setLeftTime","isFinished","setLoading","setPage","setAnswers","useLazyQuery","endAt","moment","testTime","startedAt","started","current","diff","asMilliseconds","add","duration","valueOf","getTime","finishTest","called","useQuery","takeTest","test","newData","startTest","item","allChoices","e","handleChange","Buttons","shape","size","Loading","cover","gutter","xs","xl","prevPage","to","APP_PREFIX_PATH","icon","block"],"sourceRoot":""}