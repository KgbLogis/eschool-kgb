{"version":3,"file":"static/js/510.678a0310.chunk.js","mappings":"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","sources":["components/shared-components/Flex/index.js","graphql/create.js","graphql/delete.js","graphql/select.js","views/app-views/section/form.js","views/app-views/section/table.js","views/app-views/section/index.js"],"sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Flex = props => {\r\n\tconst { children, className, alignItems, justifyContent, mobileFlex, flexDirection } = props\r\n\tconst getFlexResponsive = () => mobileFlex ? 'd-flex' : 'd-md-flex'\r\n\treturn (\r\n\t\t<div className={`${getFlexResponsive()} ${className} ${flexDirection?('flex-' + flexDirection): ''} ${alignItems?('align-items-' + alignItems):''} ${justifyContent?('justify-content-' + justifyContent):''}` }>\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nFlex.propTypes = {\r\n\tclassName: PropTypes.string,\r\n\talignItems: PropTypes.string,\r\n\tflexDirection: PropTypes.string,\r\n\tjustifyContent: PropTypes.string,\r\n\tmobileFlex: PropTypes.bool\r\n}\r\n\r\nFlex.defaultProps = {\r\n\tmobileFlex: true,\r\n\tflexDirection: 'row',\r\n\tclassName: ''\r\n};\r\n\r\n\r\nexport default Flex\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const CREATE_SCHOOL = gql `\r\n    mutation createSchool($name: String, $nameMgl: String) {\r\n      createSchool(name: $name, nameMgl: $nameMgl) {\r\n        school {\r\n          id\r\n          name\r\n          nameMgl\r\n        }\r\n      }\r\n    }\r\n`;\r\n\r\nexport const CREATE_SUB_SCHOOL = gql `\r\n    mutation createSubSchool($name: String, $nameMgl: String, $school: Int!){\r\n      createSubSchool(name: $name, nameMgl: $nameMgl, school: $school) {\r\n        subSchool {\r\n          id\r\n          name\r\n          nameMgl \r\n          school {\r\n            id\r\n          }\r\n        }\r\n      }\r\n    }\r\n`;\r\n\r\nexport const REGISTER = gql `\r\n    mutation register($email: String!, $username: String!, $isTeacher: Boolean!, $isStudent: Boolean!, $password1: String!, $password2: String!){\r\n      register(email: $email, username: $username, isTeacher: $isTeacher, isStudent: $isStudent, password1: $password1, password2: $password2) {\r\n          success\r\n          errors\r\n          token\r\n      } \r\n    }\r\n\r\n`;\r\n\r\nexport const CREATE_TEACHER = gql `\r\n    mutation createTeacher($address: String, $birthCity: Int, $birthDistrict: Int, $birthdate: String, $degree: Int,\r\n                            $familyName: String, $joinBefore: String, $joinDate: String, $name: String, $phone: String, $phone2: String,\r\n                            $registerNo: String, $school: Int, $sex: String, $status: Int, $subSchool: Int, $teacherCode: String!,\r\n                            $username: String!, $password: String!, $email: String!, $access: String!\r\n                            # $user: Int\r\n                            ) {\r\n      createTeacher(address: $address, birthCity: $birthCity, birthDistrict: $birthDistrict, birthdate: $birthdate, degree: $degree,\r\n                             familyName: $familyName, joinBefore: $joinBefore, joinDate: $joinDate, name: $name, phone: $phone, phone2: $phone2, \r\n                            registerNo: $registerNo, school: $school, sex: $sex, status: $status, subSchool: $subSchool, \r\n                            teacherCode: $teacherCode, access: $access,\r\n                            username: $username, password: $password, email: $email\r\n                            # user: $user \r\n                            ) {\r\n        teacher {\r\n          id\r\n        }\r\n      }\r\n    }\r\n`;\r\n\r\nexport const CREATE_EMPLOYEE = gql `\r\n    mutation createEmployee(\r\n                $address: String\r\n                $birthCity: Int\r\n                $birthDistrict: Int\r\n                $birthdate: String\r\n                $email: String!\r\n                $employeeCode: String!\r\n                $familyName: String\r\n                $group: Int\r\n                $name: String\r\n                $password: String!\r\n                $phone: String\r\n                $phone2: String\r\n                $photo: Upload\r\n                $registerNo: String\r\n                $sex: String\r\n                $status: Int\r\n                $compartment: Int\r\n                $username: String!\r\n              ) {\r\n      createEmployee(\r\n                address: $address\r\n                birthCity: $birthCity\r\n                birthDistrict: $birthDistrict\r\n                birthdate: $birthdate\r\n                email: $email\r\n                employeeCode: $employeeCode\r\n                familyName: $familyName\r\n                group: $group\r\n                name: $name\r\n                password: $password\r\n                phone: $phone\r\n                phone2: $phone2\r\n                photo: $photo\r\n                compartment: $compartment\r\n                registerNo: $registerNo\r\n                sex: $sex\r\n                status: $status\r\n                username: $username\r\n          ) {\r\n          employee {\r\n          id\r\n        }\r\n      }\r\n    }\r\n`;\r\n\r\nexport const CREATE_STUDENT = gql `\r\n    mutation createStudent($activity: Int, $address: String, $birthCity: Int, $birthDistrict: Int, $birthdate: String,\r\n                            $classes: Int, $classtime: Int, $familyName: String, $joinDate: String,\r\n                            $joinSchoolyear: String, $name: String, $nationality: String, $phone: String, $program: Int, \r\n                            $registerNo: String, $religion: String, $school: Int, $section: Int, $sex: String, $state: String, $status: Int, \r\n                            $statusExtra: Int, $surname: String, $studentCode: String,\r\n                            $username: String!, $password: String!) {\r\n      createStudent(activity: $activity, address: $address, birthCity: $birthCity, birthDistrict: $birthDistrict, birthdate: $birthdate, \r\n                    classes: $classes, familyName: $familyName, joinDate: $joinDate, name: $name, phone: $phone, \r\n                    registerNo: $registerNo, religion: $religion, school: $school, sex: $sex, status: $status,\r\n                    surname: $surname, studentCode: $studentCode, classtime: $classtime, joinSchoolyear: $joinSchoolyear, \r\n                    nationality: $nationality, program: $program, section: $section, state: $state, statusExtra: $statusExtra,\r\n                    username: $username, password: $password, email: \"test@test.mn\") {\r\n        student {\r\n          id\r\n        }\r\n      }\r\n    }\r\n`;\r\n\r\nexport const CREATE_SECTION = gql `\r\n  mutation createSection($classes: Int, $maxStudentNum: Int, $program: Int, $teacher: Int,  $school: Int, $section: String) {\r\n    createSection(classes: $classes, program: $program, school: $school, section: $section, maxStudentNum: $maxStudentNum, teacher: $teacher) {\r\n      section {\r\n        section\r\n      }\r\n    }\r\n  }\r\n`\r\nexport const CREATE_CLASSES = gql `\r\n  mutation createClasses($activity: Int, $classes: String,\r\n                          $program: Int, $school: Int, $status: String) {\r\n    createClasses(activity: $activity, classes: $classes,\r\n                  program: $program, school: $school, status: $status) {\r\n      classes {\r\n        classes\r\n      }\r\n    }\r\n  }\r\n`\r\nexport const CREATE_PROGRAM = gql `\r\n    mutation createProgram($program: String, $programMgl: String,  \r\n                           $status: String, $maxStudentNum: Int, $school: Int, $subSchool: Int) {\r\n      createProgram(program: $program, programMgl: $programMgl,  \r\n                    status: $status, maxStudentNum: $maxStudentNum, school: $school, subSchool: $subSchool) {\r\n        program {\r\n          id\r\n        }\r\n      }\r\n    }\r\n`;\r\n\r\nexport const CREATE_SUBJECT = gql `\r\n  mutation createSubject($credit: String, $subject: String, $content: String, $school: Int, $subSchool: Int) {\r\n    createSubject(credit: $credit, subject: $subject, school: $school, content: $content, subSchool: $subSchool) {\r\n      subject {\r\n        credit\r\n      }\r\n    }\r\n  }\r\n`\r\nexport const CREATE_PROGRAM_SUBJECT = gql `\r\n  mutation createProgramSubject($program: Int, $subject: Int) {\r\n    createProgramSubject(program: $program, subject: $subject) {\r\n      programSubjectType {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CREATE_ROUTINE_STUDENT = gql `\r\n  mutation createRoutineStudent ($routine: Int, $studentCode: String, $section: Int) {\r\n    createRoutineStudent (routine: $routine, studentCode: $studentCode, section: $section) {\r\n      routineStudent {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const CREATE_PARENT = gql `\r\n    mutation createParent ($address: String, $familyName: String, $name: String, $phone: String, $profession: String, $student: Int) {\r\n        createParent (address: $address, familyName: $familyName, name: $name, phone: $phone, profession: $profession, student: $student) {\r\n            parent {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_EVENT_TYPE = gql `\r\n    mutation createEventType ($color: String, $name: String) {\r\n        createEventType (color: $color, name: $name) {\r\n            eventType {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_EVENT = gql`\r\n    mutation createEvent ($content: String, $description: String, $endAt: String, $eventType: Int, $startAt: String, $title: String) {\r\n        createEvent (content: $content, description: $description, endAt: $endAt, eventType: $eventType, startAt: $startAt, title: $title) {\r\n            event {\r\n                title\r\n            }\r\n        }\r\n    }\r\n`;","import { gql } from '@apollo/client'\r\n\r\nexport const DELETE_CITY = gql `\r\n    mutation deleteCity($id: ID!){\r\n        deleteCity(id: $id){\r\n            city{\r\n              name\r\n              code\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const DELETE_USER = gql `\r\n    mutation deleteAccount($username: String) {\r\n        deleteAccount(username: $username) {\r\n            account {\r\n                username\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const DELETE_TEACHER = gql `\r\n    mutation deleteTeacher($id: ID!){\r\n      deleteTeacher(id: $id){\r\n            teacher{\r\n              name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_EMPLOYEES = gql `\r\n  mutation deleteEmployee($id: ID){\r\n    deleteEmployee(id: $id){\r\n      employee{\r\n        name\r\n      }\r\n    }\r\n  }\r\n  `;\r\n\r\nexport const DELETE_SUBJECT = gql `\r\n  mutation deleteSubject ($id: ID) {\r\n    deleteSubject (id: $id) {\r\n      subject {\r\n        credit\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const DELETE_STUDENT = gql `\r\n    mutation deleteStudent($id: ID!){\r\n      deleteStudent(id: $id){\r\n            student{\r\n              surname\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const DELETE_SUB_SCHOOL = gql `\r\n  mutation deleteSubSchool($id: ID){\r\n    deleteSubSchool(id: $id){\r\n      subSchool{\r\n        name\r\n      }\r\n    }\r\n}\r\n`\r\n\r\nexport const DELETE_SCHOOL = gql `\r\n  mutation deleteSchool($id: ID!){\r\n    deleteSchool(id: $id){\r\n      school{\r\n        name\r\n      }\r\n    }\r\n}\r\n`\r\n\r\nexport const DELETE_SECTION = gql `\r\n  mutation deleteSection($id: ID){\r\n    deleteSection(id: $id){\r\n      section{\r\n        section\r\n      }\r\n    }\r\n}\r\n`\r\n\r\nexport const DELETE_CLASS = gql `\r\n  mutation deleteClasses($id: ID!){\r\n    deleteClasses(id: $id){\r\n      classes{\r\n        classes\r\n      }\r\n    }\r\n}\r\n`\r\n\r\nexport const DELETE_PROGRAM = gql `\r\n    mutation deleteProgram($id: ID!){\r\n        deleteProgram(id: $id){\r\n            program{\r\n                program\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_ROUTINE = gql `\r\n    mutation deleteRoutine ($id: ID) {\r\n        deleteRoutine (id: $id) {\r\n            routine {\r\n                createdAt\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_PARENT = gql `\r\n    mutation deleteParent ($id: ID) {\r\n        deleteParent (id: $id) {\r\n            parent {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_EVENT_TYPE = gql `\r\n    mutation deleteEventType ($id: ID) {\r\n        deleteEventType (id: $id) {\r\n            eventType {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_EVENT = gql`\r\n    mutation deleteEvent ($id: ID) {\r\n        deleteEvent (id: $id) {\r\n            event {\r\n                title\r\n            }\r\n        }\r\n    }\r\n`;\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const SELECT_STUDENT = gql`\r\n    query allStudents ($filter: String) {\r\n        allStudents (filter: $filter) {\r\n            id\r\n            familyName\r\n            name\r\n            studentCode\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const SELECT_TEACHER = gql`\r\n    query allTeachers ($filter: String) {\r\n        allTeachers (filter: $filter) {\r\n            id\r\n            familyName\r\n            name\r\n            teacherCode\r\n        }\r\n    }\r\n`;\r\n\r\n// export const SELECT_SECTION_TEACHER = gql `\r\n//     query allAssistantTeachers ($filter: String) {\r\n//         allAssistantTeachers (filter: $filter) {\r\n//             id\r\n//             familyName\r\n//             name \r\n//             teacherCode\r\n//         }\r\n//     }\r\n// `\r\n\r\nexport const SELECT_CLASSES = gql`\r\n    query allClassess ($filter: String, $program: Int) {\r\n        allClassess (filter: $filter, program: $program) {\r\n            id\r\n            classes\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const SELECT_SUBJECT = gql`\r\n    query allSubjects ($offset: Int!, $limit: Int!, $filter: String) {\r\n        count (appName: \"subject\", modelName: \"Subject\", filter: $filter) {\r\n            count\r\n        }\r\n        allSubjects (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            subject\r\n            content\r\n            createUserid {\r\n                firstName\r\n                lastName\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SELECT_PROGRAM = gql`\r\n    query selectProgram {\r\n        allPrograms {\r\n            id\r\n            program\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SECTIONS_BY_PROGRAM = gql`\r\n    query sectionsByProgram ($program: Int!) {\r\n        sectionsByProgram (program: $program) {\r\n            id\r\n            section \r\n            classes {\r\n                classes\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SELECT_SECTION = gql`\r\n    query sectionsByClasses ($classes: Int!){\r\n        sectionsByClasses (classes: $classes) {\r\n            id \r\n            section\r\n        }\r\n    }\r\n`\r\n\r\nexport const SELECT_STUDENT_PAGINATION = gql`\r\n    query allStudentsPagination (\r\n        $page: Int\r\n        $perPage: Int\r\n        $filter: String = \"\"\r\n    ) {\r\n        allStudentsPagination (\r\n            page: $page\r\n            perPage: $perPage\r\n            filter: $filter\r\n        ) {\r\n            page\r\n            perPage\r\n            pageCount\r\n            totalCount\r\n            records {\r\n                id\r\n                name\r\n                familyName\r\n            }\r\n        }\r\n    }\r\n`","import React, { useEffect, useState } from 'react';\r\nimport { Form, Input, message, Spin, Select, Empty } from 'antd';\r\nimport { useMutation, useLazyQuery } from '@apollo/client';\r\nimport { SECTION_BY_CLASSES } from 'graphql/all';\r\nimport { CREATE_SECTION } from 'graphql/create'\r\nimport { UPDATE_SECTION } from 'graphql/update'\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport { SELECT_TEACHER } from 'graphql/select';\r\nimport Loading from 'components/shared-components/Loading';\r\n\r\nfunction SectionForm({ editData, formType, setIsModalVisible, classData }) {\r\n\r\n    const { Option } = Select;\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const [teachers, setTeachers] = useState([]);\r\n\r\n    const [createSection, { loading }] = useMutation(CREATE_SECTION, {\r\n        refetchQueries: [\r\n            {\r\n                query: SECTION_BY_CLASSES,\r\n                variables: { classes: classData.classes }\r\n            }\r\n        ],\r\n        onCompleted: data => {\r\n            message.success('Амжилттай хадгаллаа');\r\n            setIsModalVisible(false);\r\n        }\r\n    });\r\n\r\n    const [fetchTeacher, { loading: loadingTeacher }] = useLazyQuery(SELECT_TEACHER, {\r\n        onCompleted: data => {\r\n            setTeachers(data.allTeachers);\r\n        }\r\n    });\r\n\r\n    const [updateSection, { loading: updateLoading }] = useMutation(UPDATE_SECTION, {\r\n        refetchQueries: [\r\n            {\r\n                query: SECTION_BY_CLASSES,\r\n                variables: { classes: classData.classes }\r\n            }\r\n        ],\r\n        onCompleted: data => {\r\n            message.success('Амжилттай хадгаллаа');\r\n            setIsModalVisible(false);\r\n        }\r\n    })\r\n\r\n    // end useQuery\r\n\r\n    useEffect(() => {\r\n        if (formType === \"edit\") {\r\n            form.setFieldsValue({\r\n                section: editData.section,\r\n                teacher: editData.teacher?.id,\r\n                maxStudentNum: editData.maxStudentNum,\r\n                id: editData.id,\r\n            });\r\n            fetchTeacher({ variables: { filter: editData.teacher?.name } })\r\n        } else if (formType === \"create\") {\r\n            form.resetFields();\r\n        }\r\n    }, [editData, form, formType, fetchTeacher]);\r\n\r\n\r\n\r\n    const onFinish = values => {\r\n        if (formType === \"edit\") {\r\n            values.id = editData.id;\r\n            const finalResult = Object.assign(values, classData);\r\n            updateSection({ variables: finalResult });\r\n        } else {\r\n            const finalResult = Object.assign(values, classData);\r\n            createSection({ variables: finalResult, });\r\n        }\r\n    };\r\n\r\n    const onTeacherSearch = value => {\r\n        if (value === '') {\r\n            setTeachers([]);\r\n        } else {\r\n            fetchTeacher({ variables: { offset: 0, limit: 99999999, filter: value } });\r\n        }\r\n    }\r\n\r\n    // const onSectionTeacherSearch = value => {\r\n    //     if (value === '') {\r\n    //         setSectionTeacher([]);\r\n    //     } else {\r\n    //         fetchsectionTeacher({ variables: { offset: 0, limit: 99999999, filter: value } });\r\n    //     }\r\n    // }\r\n\r\n\r\n\r\n    return (\r\n        <Spin spinning={loading || updateLoading} tip=\"Ачааллаж байна...\">\r\n            <Form\r\n                id=\"SectionForm\"\r\n                layout={'vertical'}\r\n                form={form}\r\n                name=\"control-hooks\"\r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item name=\"section\" label={<IntlMessage id=\"name\" />} rules={[\r\n                    {\r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    },\r\n                ]}>\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item name=\"teacher\" label={<IntlMessage id=\"teacher\" />} rules={[\r\n                    {\r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    },\r\n                ]}>\r\n                    <Select\r\n                        showSearch\r\n                        filterOption={false}\r\n                        notFoundContent={\r\n                            loadingTeacher ? <Loading cover='content' />\r\n                                : <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\r\n                        }\r\n                        onSearch={onTeacherSearch}>\r\n                        {teachers.map((item, index) => (\r\n                            <Option value={item.id} key={index} >{item.familyName} {item.name} / {item.teacherCode} </Option>\r\n                        ))}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item name=\"maxStudentNum\" label={<IntlMessage id=\"maxStudentNum\" />} rules=\r\n                    {[\r\n                        {\r\n                            required: true,\r\n                            message: <IntlMessage id=\"form.required\" />\r\n                        },\r\n                        {\r\n                            pattern: new RegExp(/^[0-9]+$/),\r\n                            message: 'Зөвхөн тоон утга оруулна'\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n            </Form>\r\n        </Spin>\r\n    );\r\n};\r\n\r\nexport default SectionForm","import React, { useEffect, useState } from 'react'\r\nimport { Card, Table, Input, Modal, message, Button } from 'antd';\r\nimport { DeleteTwoTone, SearchOutlined, EditTwoTone, PlusCircleOutlined, RollbackOutlined } from '@ant-design/icons';\r\nimport Flex from 'components/shared-components/Flex'\r\nimport utils from 'utils'\r\nimport SectionForm from './form'\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { DELETE_SECTION } from 'graphql/delete';\r\nimport { SECTION_BY_CLASSES } from 'graphql/all';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nfunction  SectionTable (props) {\r\n\r\n    const history = useHistory();\r\n\r\n\tconst [list, setList] = useState([])\r\n\r\n    const { loading, data } = useQuery(SECTION_BY_CLASSES, {\r\n        variables: { classes: props.classes.id },\r\n    })\r\n\r\n\tconst [isModalVisible, setIsModalVisible] = useState(false);\r\n\tconst [editData, setEditData] = useState([]);\r\n\tconst [formType, setFormType] = useState([]);\r\n\r\n    const showModal = () => {\r\n\t\tsetFormType(\"create\");\r\n      setIsModalVisible(true);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n      setIsModalVisible(false);\r\n    };\r\n\r\n\tconst editRow = row => {\r\n\t\tsetFormType(\"edit\");\r\n\t\tsetEditData(row);\r\n\t\tsetIsModalVisible(true);\r\n\t};\r\n\r\n    useEffect(() => {\r\n        if (loading === false && data) {\r\n            setList(data.sectionsByClasses)\r\n        }\r\n    }, [data, loading])\r\n    \r\n\r\n\tconst { confirm } = Modal;\r\n\r\n\tconst [deleteSection] = useMutation(DELETE_SECTION, {\r\n\t\trefetchQueries: [\r\n            {\r\n                query: SECTION_BY_CLASSES,\r\n                variables: { classes:  props.classes.id}\r\n            }\r\n        ],\r\n\t\tonCompleted: data => {\r\n            message.success('Амжилттай устлаа');\r\n\t\t}\r\n\t});\r\n\r\n\tfunction deleteRow(row) {\r\n\t\tconfirm({\r\n\t\t  title: 'Устгах уу?',\r\n\t\t  okText: 'Устгах',\r\n\t\t  okType: 'danger',\r\n\t\t  cancelText: 'Болих',\r\n\t\t  onOk() {\r\n\t\t\tdeleteSection({ variables: { id: row.id } }); \r\n\t\t  },\r\n\t\t});\r\n\t}\r\n\r\n\tconst tableColumns = [\r\n\t\t{\r\n\t\t\tkey: 'section',\r\n\t\t\ttitle: <IntlMessage id=\"section\" />,\r\n\t\t\tdataIndex: 'section',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'section')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'school',\r\n\t\t\ttitle: <IntlMessage id=\"school\" />,\r\n\t\t\tdataIndex: ['school', 'name'],\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'school')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'program',\r\n\t\t\ttitle: <IntlMessage id='program' />,\r\n\t\t\tdataIndex: ['program', 'program'],\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'program')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'classes',\r\n\t\t\ttitle: <IntlMessage id='classes' />,\r\n\t\t\tdataIndex: ['classes', 'classes'],\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'classes')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'maxStudentNum',\r\n            title: <IntlMessage id=\"maxStudentNum\" />,\r\n            dataIndex: 'maxStudentNum', \r\n            responsive: ['lg'],\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'maxStudentNum'),\r\n\t\t\t// render: text => <span>{nf.format(text)}</span>\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'teacher',\r\n\t\t\ttitle: <IntlMessage id=\"teacher\" />,\r\n\t\t\tdataIndex: ['teacher', 'name'], \r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'teacher')\r\n\t\t},\r\n\t\t// {\r\n\t\t// \tkey: 'sectionTeacher',\r\n\t\t// \ttitle: <IntlMessage id=\"sectionTeacher\" />,\r\n\t\t// \tdataIndex: ['sectionTeacher', 'name'], \r\n\t\t// \tsorter: (a, b) => utils.antdTableSorter(a, b, 'sectionTeacher')\r\n\t\t// },\r\n\t];\r\n\r\n\tif (props.permissions.edit === true || props.permissions.destroy === true) {\r\n\t\ttableColumns.push(\r\n\t\t\t{\r\n\t\t\t\tkey: 'actions',\r\n\t\t\t\ttitle: <IntlMessage id='main.action' />,\r\n\t\t\t\twidth: '15vw',\r\n\t\t\t\tdataIndex: 'actions',\r\n\t\t\t\trender: (_, elm) => (\r\n\t\t\t\t\t<div className=\"text-center\">\r\n\t\t\t\t\t\t{ props.permissions.edit === true &&\r\n\t\t\t\t\t\t\t<Button size=\"small\" onClick={() => editRow(elm)} type=\"text\" icon={<EditTwoTone twoToneColor=\"#ffdb00\"/>} > <IntlMessage id='edit' /></Button>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t{ props.permissions.destroy === true &&\r\n\t\t\t\t\t\t\t<Button size=\"small\" onClick={() => deleteRow(elm)} type=\"text\" icon={<DeleteTwoTone twoToneColor=\"#f42f2f\"/>} > <IntlMessage id='delete' /></Button>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n\r\n\tconst onSearch = e => {\r\n\t\tconst value = e.currentTarget.value\r\n\t\tconst searchArray = list\r\n\t\tconst datas = utils.wildCardSearch(searchArray, value)\r\n\t\tsetList(datas)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Modal \r\n                title= {formType === 'create' ? <IntlMessage id=\"add_new\" />  : <IntlMessage id=\"edit\" />}\r\n                visible={isModalVisible}\r\n\t\t\t\tokText={<IntlMessage id=\"main.okText\" />}\r\n\t\t\t\tcancelText={<IntlMessage id=\"main.cancelText\" />}\r\n\t\t\t\tonCancel={handleCancel}\r\n\t\t\t\tokButtonProps={{form:'SectionForm', key: 'submit', htmlType: 'submit'}}\r\n            >\r\n                <SectionForm\r\n\t\t\t\t\tformType={formType} \r\n\t\t\t\t\teditData={editData} \r\n\t\t\t\t\tsetIsModalVisible={setIsModalVisible} \r\n                    classData={{ \r\n                        school: props.classes.school.id,\r\n                        program: props.classes.program.id,\r\n                        classes: props.classes.id\r\n                    }}\r\n                    classes={props.classes}\r\n\t\t\t\t/>\r\n            </Modal>\r\n            <Flex alignItems=\"center\" justifyContent=\"between\" mobileFlex={false}>\r\n                <Flex mobileFlex={false}>\r\n                    <div className='text-right' >\r\n                        <Button onClick={() => history.goBack()} type=\"default\" icon={<RollbackOutlined />} block> <IntlMessage id=\"back\" /></Button>\r\n                    </div>\r\n                </Flex>\r\n            </Flex>\r\n\t\t\t<Card className='mt-4'>\r\n\t\t\t\t<Flex alignItems=\"center\" justifyContent=\"between\" mobileFlex={false}>\r\n\t\t\t\t\t<Flex className=\"mb-1\" mobileFlex={false}>\r\n\t\t\t\t\t\t<div className=\"mr-md-3 mb-3\">\r\n\t\t\t\t\t\t\t<Input placeholder={'Хайх'} prefix={<SearchOutlined />} onChange={e => onSearch(e)}/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Flex>\r\n\t\t\t\t\t{ props.permissions.create === true &&\r\n\t\t\t\t\t\t<div className=\"mr-md-3 mb-3\">\r\n\t\t\t\t\t\t\t<Button onClick={showModal} type=\"primary\" icon={<PlusCircleOutlined />} block> <IntlMessage id=\"add_new\" /></Button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t</Flex>\r\n\t\t\t\t<div className=\"table-responsive\">\r\n\t\t\t\t\t<Table \r\n\t\t\t\t\t\tcolumns={tableColumns} \r\n\t\t\t\t\t\tdataSource={list}\r\n\t\t\t\t\t\tsize='small'\r\n\t\t\t\t\t\trowKey='id'\r\n                        loading={loading}\r\n\t\t\t\t\t\tbordered\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</Card>\r\n\t\t</>\r\n\t\t\r\n\t)\r\n}\r\n\r\nexport default SectionTable\r\n","import React, { useState } from \"react\";\r\nimport SectionTable from './table';\r\nimport { CheckPer } from 'hooks/checkPermission';\r\nimport Loading from \"components/shared-components/Loading\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Index = (props) => {\r\n\r\n    const history = useHistory();\r\n\r\n    const create = CheckPer('add_section');\r\n    const edit = CheckPer('change_section');\r\n    const destroy = CheckPer('delete_section');\r\n    \r\n    const [classes] = useState(props.location.state?.message);\r\n\r\n    const permissions = {\r\n        create: create,\r\n        edit: edit,\r\n        destroy: destroy\r\n    }\r\n\r\n    if (Object.values(permissions).indexOf('loading') > -1) {\r\n        return <Loading cover=\"content\" />\r\n    }\r\n\r\n    if (props.location.state === undefined) {\r\n        history.push('/app/home');\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <SectionTable title={props.title} permissions={permissions} classes={classes} />\r\n    )\r\n}\r\n\r\nexport default Index;"],"names":["Flex","props","children","className","alignItems","justifyContent","mobileFlex","flexDirection","defaultProps","CREATE_SCHOOL","gql","CREATE_SUB_SCHOOL","CREATE_TEACHER","CREATE_EMPLOYEE","CREATE_STUDENT","CREATE_SECTION","CREATE_CLASSES","CREATE_PROGRAM","CREATE_SUBJECT","CREATE_PARENT","CREATE_EVENT_TYPE","CREATE_EVENT","DELETE_TEACHER","DELETE_EMPLOYEES","DELETE_SUBJECT","DELETE_STUDENT","DELETE_SUB_SCHOOL","DELETE_SCHOOL","DELETE_SECTION","DELETE_CLASS","DELETE_PROGRAM","DELETE_ROUTINE","DELETE_PARENT","DELETE_EVENT_TYPE","DELETE_EVENT","SELECT_STUDENT","SELECT_TEACHER","SELECT_CLASSES","SELECT_SUBJECT","SELECT_PROGRAM","SECTIONS_BY_PROGRAM","SELECT_SECTION","SELECT_STUDENT_PAGINATION","editData","formType","setIsModalVisible","classData","Option","Select","Form","form","useState","teachers","setTeachers","useMutation","refetchQueries","query","SECTION_BY_CLASSES","variables","classes","onCompleted","data","message","createSection","loading","useLazyQuery","allTeachers","fetchTeacher","loadingTeacher","UPDATE_SECTION","updateSection","updateLoading","useEffect","setFieldsValue","section","teacher","id","maxStudentNum","filter","name","resetFields","spinning","tip","layout","onFinish","values","finalResult","Object","assign","label","IntlMessage","rules","required","showSearch","filterOption","notFoundContent","Loading","cover","image","Empty","onSearch","value","offset","limit","map","item","index","familyName","teacherCode","pattern","RegExp","history","useHistory","list","setList","useQuery","isModalVisible","setEditData","setFormType","sectionsByClasses","confirm","Modal","deleteSection","tableColumns","key","title","dataIndex","sorter","a","b","utils","responsive","permissions","edit","destroy","push","width","render","_","elm","size","onClick","row","type","icon","EditTwoTone","twoToneColor","okText","okType","cancelText","onOk","DeleteTwoTone","visible","onCancel","okButtonProps","htmlType","school","program","goBack","RollbackOutlined","block","placeholder","prefix","SearchOutlined","onChange","e","currentTarget","searchArray","datas","create","PlusCircleOutlined","columns","dataSource","rowKey","bordered","CheckPer","location","state","indexOf","undefined"],"sourceRoot":""}