{"version":3,"file":"static/js/2973.16da8139.chunk.js","mappings":"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","sources":["components/shared-components/AsyncTable/index.js","components/shared-components/Flex/index.js","graphql/core.js","graphql/create.js","graphql/delete.js","views/app-views/classes/form.js","views/app-views/classes/table.js","views/app-views/classes/index.js","../node_modules/@ant-design/icons-svg/es/asn/EyeTwoTone.js","../node_modules/@ant-design/icons/es/icons/EyeTwoTone.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Button, Card, Input, Pagination, Table } from 'antd'\r\nimport { PlusCircleOutlined, SearchOutlined } from '@ant-design/icons';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport Flex from '../Flex';\r\n\r\nconst AsyncTable = ({ fetchData, loading, columns, data, permissions, showModal }) => {\r\n\r\n    const [filter, setFilter] = useState('');\r\n\r\n    const triggerFetch = (page, pageSize) => {\r\n        var start = 0;\r\n        var end = pageSize;\r\n        if (page !== 1) {\r\n            start = (page * pageSize) - pageSize\r\n            end = pageSize * page\r\n        }\r\n        fetchData({ variables: { offset: start, limit: end, filter: filter, program: 0 } })\r\n    }\r\n\r\n    const onPageChange = (page, pageSize) => {\r\n        triggerFetch(page, pageSize);\r\n    }\r\n\r\n    const onSearch = e => {\r\n        const value = e.currentTarget.value\r\n        fetchData({ variables: { offset: 0, limit: 10, filter: value, program: 0 } })\r\n        setFilter(value)\r\n    }\r\n\r\n    return (\r\n\t\t<Card>\r\n            <Flex alignItems=\"center\" justifyContent=\"between\" mobileFlex={false}>\r\n                <Flex className=\"mb-1\" mobileFlex={false}>\r\n                    <div className=\"mr-md-3 mb-3\">\r\n                        <Input placeholder={'Хайх'} prefix={<SearchOutlined />} onChange={e => onSearch(e)}/>\r\n                    </div>\r\n                </Flex>\r\n                { permissions.create === true &&\r\n                    <div className=\"mr-md-3 mb-3\">\r\n                        <Button onClick={showModal} type=\"primary\" icon={<PlusCircleOutlined />} block> <IntlMessage id=\"add_new\" /></Button>\r\n                    </div>\r\n                }\r\n            </Flex>\r\n            <div className=\"table-responsive\">\r\n                <Table \r\n                    // pagination={false}\r\n                    size=\"small\"\r\n                    columns={columns} \r\n                    dataSource={data}\r\n                    rowKey='id' \r\n                    bordered\r\n                    loading={loading}\r\n                />\r\n                {/* <Pagination \r\n                    className='text-right mt-4' \r\n                    total={count} \r\n                    onChange={onPageChange}\r\n                /> */}\r\n            </div>\r\n        </Card>    \r\n    )\r\n}\r\n\r\nexport default AsyncTable","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Flex = props => {\r\n\tconst { children, className, alignItems, justifyContent, mobileFlex, flexDirection } = props\r\n\tconst getFlexResponsive = () => mobileFlex ? 'd-flex' : 'd-md-flex'\r\n\treturn (\r\n\t\t<div className={`${getFlexResponsive()} ${className} ${flexDirection?('flex-' + flexDirection): ''} ${alignItems?('align-items-' + alignItems):''} ${justifyContent?('justify-content-' + justifyContent):''}` }>\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nFlex.propTypes = {\r\n\tclassName: PropTypes.string,\r\n\talignItems: PropTypes.string,\r\n\tflexDirection: PropTypes.string,\r\n\tjustifyContent: PropTypes.string,\r\n\tmobileFlex: PropTypes.bool\r\n}\r\n\r\nFlex.defaultProps = {\r\n\tmobileFlex: true,\r\n\tflexDirection: 'row',\r\n\tclassName: ''\r\n};\r\n\r\n\r\nexport default Flex\r\n","import { gql } from \"@apollo/client\";\r\n\r\nexport const ALL_DEGREES = gql`\r\n  \tquery allDegrees {\r\n        allDegrees {\r\n            id\r\n            name\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const CREATE_DEGREE = gql `\r\n    mutation createDegree($name: String) {\r\n      createDegree(name: $name) {\r\n        degree {\r\n          id\r\n          name\r\n        }\r\n      }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_DEGREE  = gql `\r\n    mutation updateDegree ($id: ID, $name: String) {\r\n        updateDegree (id: $id, name: $name) {\r\n            degree {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_DEGREE = gql `\r\n    mutation deleteDegree($id: ID!){\r\n        deleteDegree(id: $id){\r\n            degree{\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_ACTIVITY = gql`\r\n  \tquery allActivitys {\r\n        allActivitys {\r\n            id\r\n            name\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const CREATE_ACTIVITY = gql `\r\n    mutation createActivity($name: String) {\r\n      createActivity(name: $name) {\r\n        activity {\r\n          id\r\n          name\r\n        }\r\n      }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_ACTIVITY  = gql `\r\n    mutation updateActivity ($id: ID, $name: String) {\r\n        updateActivity (id: $id, name: $name) {\r\n            activity {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_ACTIVITY = gql `\r\n    mutation deleteActivity($id: ID!){\r\n        deleteActivity(id: $id){\r\n            activity{\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_STUDENT_STATUS = gql `\r\n    query allStudentStatuss {\r\n        allStudentStatuss {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_STUDENT_STATUS = gql `\r\n    mutation createStudentStatus($name: String) {\r\n        createStudentStatus(name: $name) {\r\n            studentStatus {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_STUDENT_STATUS = gql `\r\n    mutation updateStudentStatus ($id: ID, $name: String) {\r\n        updateStudentStatus (id: $id, name: $name) {\r\n            studentStatus {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_STUDENET_STATUS = gql `\r\n    mutation deleteStudentStatus ($id: ID) {\r\n        deleteStudentStatus (id: $id) {\r\n            studentStatus {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_STUDENT_STATUS_EXTRA = gql `\r\n    query allStudentStatusExtras {\r\n        allStudentStatusExtras {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_STUDENT_STATUS_EXTRA = gql `\r\n    mutation createStudentStatusExtra($name: String) {\r\n        createStudentStatusExtra(name: $name) {\r\n            studentStatusExtra {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_STUDENT_STATUS_EXTRA = gql `\r\n    mutation updateStudentStatusExtra ($id: ID, $name: String) {\r\n        updateStudentStatusExtra (id: $id, name: $name) {\r\n            studentStatusExtra {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_STUDENET_STATUS_EXTRA = gql `\r\n    mutation deleteStudentStatusExtra ($id: ID) {\r\n        deleteStudentStatusExtra (id: $id) {\r\n            studentStatusExtra {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nexport const ALL_TEACHER_STATUS = gql `\r\n    query allTeacherStatuss {\r\n        allTeacherStatuss {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_TEACHER_STATUS = gql `\r\n    mutation createTeacherStatus($name: String) {\r\n        createTeacherStatus(name: $name) {\r\n            teacherStatus {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_TEACHER_STATUS = gql `\r\n    mutation updateTeacherStatus ($id: ID, $name: String) {\r\n        updateTeacherStatus (id: $id, name: $name) {\r\n            teacherStatus {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_STEACHER_STATUS = gql `\r\n    mutation deleteTeacherStatus ($id: ID) {\r\n        deleteTeacherStatus (id: $id) {\r\n            teacherStatus {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_CLASSTIME = gql `\r\n    query allClasstimes {\r\n        allClasstimes {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_CLASSTIME = gql `\r\n    mutation createClasstime($name: String) {\r\n        createClasstime(name: $name) {\r\n            classtime {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_CLASSTIME = gql `\r\n    mutation updateClasstime ($id: ID, $name: String) {\r\n        updateClasstime (id: $id, name: $name) {\r\n            classtime {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_SCLASSTIME = gql `\r\n    mutation deleteClasstime ($id: ID) {\r\n        deleteClasstime (id: $id) {\r\n            classtime {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_ROUTINE = gql `\r\n    mutation createRoutine ($classes: Int, $endDate: Date, $program: Int, $room: String, $schoolyear: Int, $section: Int, $startDate: Date, \r\n                            $subject: Int, $teacher: Int, $time: String, $type: String, $weekly: Int) {\r\n        createRoutine (classes: $classes, endDate: $endDate, program: $program, room: $room, schoolyear: $schoolyear, section: $section, \r\n                        startDate: $startDate, subject: $subject, teacher: $teacher, time: $time, type: $type, weekly: $weekly) {\r\n            routine {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_MENUS = gql `\r\n    query allMenus{\r\n        allMenus {\r\n            priority\r\n            key\r\n            path\r\n            title\r\n            icon\r\n            breadcrumb\r\n            subMenu\r\n            menuSet {\r\n                priority\r\n                key\r\n                path\r\n                title\r\n                icon\r\n                breadcrumb\r\n                subMenu\r\n            }\r\n        }\r\n    }\r\n`; \r\n\r\nexport const UPDATE_MENU = gql `\r\n    mutation updateMenu($breadcrumb: Boolean, $icon: String, $id: ID, $priority: Int, $status: String, $submenu: Int) {\r\n        updateMenu (breadcrumb: $breadcrumb, icon: $icon, id: $id, priority: $priority, status: $status, submenu: $submenu) {\r\n            menu {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_SCHOOLYEAR = gql `\r\n    query allSchoolyears {\r\n        allSchoolyears {\r\n            id\r\n            schoolyear\r\n            startDate\r\n            endDate\r\n            isCurrent\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_SCHOOLYEAR = gql `\r\n    mutation createSchoolyear ($endDate: String, $schoolyear: String, $startDate: String, $isCurrent: Boolean) {\r\n        createSchoolyear (endDate: $endDate, schoolyear: $schoolyear, startDate: $startDate, isCurrent: $isCurrent) {\r\n            schoolyear {\r\n                schoolyear\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_SCHOOLYEAR = gql `\r\n    mutation updateSchoolyear ($endDate: String, $id: ID, $schoolyear: String, $startDate: String, $isCurrent: Boolean) {\r\n        updateSchoolyear (endDate: $endDate, id: $id, schoolyear: $schoolyear, startDate: $startDate, isCurrent: $isCurrent) {\r\n            schoolyear {\r\n                schoolyear\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_SCHOOLYEAR = gql `\r\n    mutation deleteSchoolyear ($id: ID) {\r\n        deleteSchoolyear (id: $id) {\r\n            schoolyear {\r\n                schoolyear\r\n            }\r\n        }\r\n    }\r\n`;","import { gql } from '@apollo/client';\r\n\r\nexport const CREATE_SCHOOL = gql `\r\n    mutation createSchool($name: String, $nameMgl: String) {\r\n      createSchool(name: $name, nameMgl: $nameMgl) {\r\n        school {\r\n          id\r\n          name\r\n          nameMgl\r\n        }\r\n      }\r\n    }\r\n`;\r\n\r\nexport const CREATE_SUB_SCHOOL = gql `\r\n    mutation createSubSchool($name: String, $nameMgl: String, $school: Int!){\r\n      createSubSchool(name: $name, nameMgl: $nameMgl, school: $school) {\r\n        subSchool {\r\n          id\r\n          name\r\n          nameMgl \r\n          school {\r\n            id\r\n          }\r\n        }\r\n      }\r\n    }\r\n`;\r\n\r\nexport const REGISTER = gql `\r\n    mutation register($email: String!, $username: String!, $isTeacher: Boolean!, $isStudent: Boolean!, $password1: String!, $password2: String!){\r\n      register(email: $email, username: $username, isTeacher: $isTeacher, isStudent: $isStudent, password1: $password1, password2: $password2) {\r\n          success\r\n          errors\r\n          token\r\n      } \r\n    }\r\n\r\n`;\r\n\r\nexport const CREATE_TEACHER = gql `\r\n    mutation createTeacher($address: String, $birthCity: Int, $birthDistrict: Int, $birthdate: String, $degree: Int,\r\n                            $familyName: String, $joinBefore: String, $joinDate: String, $name: String, $phone: String, $phone2: String,\r\n                            $registerNo: String, $school: Int, $sex: String, $status: Int, $subSchool: Int, $teacherCode: String!,\r\n                            $username: String!, $password: String!, $email: String!, $access: String!\r\n                            # $user: Int\r\n                            ) {\r\n      createTeacher(address: $address, birthCity: $birthCity, birthDistrict: $birthDistrict, birthdate: $birthdate, degree: $degree,\r\n                             familyName: $familyName, joinBefore: $joinBefore, joinDate: $joinDate, name: $name, phone: $phone, phone2: $phone2, \r\n                            registerNo: $registerNo, school: $school, sex: $sex, status: $status, subSchool: $subSchool, \r\n                            teacherCode: $teacherCode, access: $access,\r\n                            username: $username, password: $password, email: $email\r\n                            # user: $user \r\n                            ) {\r\n        teacher {\r\n          id\r\n        }\r\n      }\r\n    }\r\n`;\r\n\r\nexport const CREATE_EMPLOYEE = gql `\r\n    mutation createEmployee(\r\n                $address: String\r\n                $birthCity: Int\r\n                $birthDistrict: Int\r\n                $birthdate: String\r\n                $email: String!\r\n                $employeeCode: String!\r\n                $familyName: String\r\n                $group: Int\r\n                $name: String\r\n                $password: String!\r\n                $phone: String\r\n                $phone2: String\r\n                $photo: Upload\r\n                $registerNo: String\r\n                $sex: String\r\n                $status: Int\r\n                $compartment: Int\r\n                $username: String!\r\n              ) {\r\n      createEmployee(\r\n                address: $address\r\n                birthCity: $birthCity\r\n                birthDistrict: $birthDistrict\r\n                birthdate: $birthdate\r\n                email: $email\r\n                employeeCode: $employeeCode\r\n                familyName: $familyName\r\n                group: $group\r\n                name: $name\r\n                password: $password\r\n                phone: $phone\r\n                phone2: $phone2\r\n                photo: $photo\r\n                compartment: $compartment\r\n                registerNo: $registerNo\r\n                sex: $sex\r\n                status: $status\r\n                username: $username\r\n          ) {\r\n          employee {\r\n          id\r\n        }\r\n      }\r\n    }\r\n`;\r\n\r\nexport const CREATE_STUDENT = gql `\r\n    mutation createStudent($activity: Int, $address: String, $birthCity: Int, $birthDistrict: Int, $birthdate: String,\r\n                            $classes: Int, $classtime: Int, $familyName: String, $joinDate: String,\r\n                            $joinSchoolyear: String, $name: String, $nationality: String, $phone: String, $program: Int, \r\n                            $registerNo: String, $religion: String, $school: Int, $section: Int, $sex: String, $state: String, $status: Int, \r\n                            $statusExtra: Int, $surname: String, $studentCode: String,\r\n                            $username: String!, $password: String!) {\r\n      createStudent(activity: $activity, address: $address, birthCity: $birthCity, birthDistrict: $birthDistrict, birthdate: $birthdate, \r\n                    classes: $classes, familyName: $familyName, joinDate: $joinDate, name: $name, phone: $phone, \r\n                    registerNo: $registerNo, religion: $religion, school: $school, sex: $sex, status: $status,\r\n                    surname: $surname, studentCode: $studentCode, classtime: $classtime, joinSchoolyear: $joinSchoolyear, \r\n                    nationality: $nationality, program: $program, section: $section, state: $state, statusExtra: $statusExtra,\r\n                    username: $username, password: $password, email: \"test@test.mn\") {\r\n        student {\r\n          id\r\n        }\r\n      }\r\n    }\r\n`;\r\n\r\nexport const CREATE_SECTION = gql `\r\n  mutation createSection($classes: Int, $maxStudentNum: Int, $program: Int, $teacher: Int,  $school: Int, $section: String) {\r\n    createSection(classes: $classes, program: $program, school: $school, section: $section, maxStudentNum: $maxStudentNum, teacher: $teacher) {\r\n      section {\r\n        section\r\n      }\r\n    }\r\n  }\r\n`\r\nexport const CREATE_CLASSES = gql `\r\n  mutation createClasses($activity: Int, $classes: String,\r\n                          $program: Int, $school: Int, $status: String) {\r\n    createClasses(activity: $activity, classes: $classes,\r\n                  program: $program, school: $school, status: $status) {\r\n      classes {\r\n        classes\r\n      }\r\n    }\r\n  }\r\n`\r\nexport const CREATE_PROGRAM = gql `\r\n    mutation createProgram($program: String, $programMgl: String,  \r\n                           $status: String, $maxStudentNum: Int, $school: Int, $subSchool: Int) {\r\n      createProgram(program: $program, programMgl: $programMgl,  \r\n                    status: $status, maxStudentNum: $maxStudentNum, school: $school, subSchool: $subSchool) {\r\n        program {\r\n          id\r\n        }\r\n      }\r\n    }\r\n`;\r\n\r\nexport const CREATE_SUBJECT = gql `\r\n  mutation createSubject($credit: String, $subject: String, $content: String, $school: Int, $subSchool: Int) {\r\n    createSubject(credit: $credit, subject: $subject, school: $school, content: $content, subSchool: $subSchool) {\r\n      subject {\r\n        credit\r\n      }\r\n    }\r\n  }\r\n`\r\nexport const CREATE_PROGRAM_SUBJECT = gql `\r\n  mutation createProgramSubject($program: Int, $subject: Int) {\r\n    createProgramSubject(program: $program, subject: $subject) {\r\n      programSubjectType {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CREATE_ROUTINE_STUDENT = gql `\r\n  mutation createRoutineStudent ($routine: Int, $studentCode: String, $section: Int) {\r\n    createRoutineStudent (routine: $routine, studentCode: $studentCode, section: $section) {\r\n      routineStudent {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const CREATE_PARENT = gql `\r\n    mutation createParent ($address: String, $familyName: String, $name: String, $phone: String, $profession: String, $student: Int) {\r\n        createParent (address: $address, familyName: $familyName, name: $name, phone: $phone, profession: $profession, student: $student) {\r\n            parent {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_EVENT_TYPE = gql `\r\n    mutation createEventType ($color: String, $name: String) {\r\n        createEventType (color: $color, name: $name) {\r\n            eventType {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_EVENT = gql`\r\n    mutation createEvent ($content: String, $description: String, $endAt: String, $eventType: Int, $startAt: String, $title: String) {\r\n        createEvent (content: $content, description: $description, endAt: $endAt, eventType: $eventType, startAt: $startAt, title: $title) {\r\n            event {\r\n                title\r\n            }\r\n        }\r\n    }\r\n`;","import { gql } from '@apollo/client'\r\n\r\nexport const DELETE_CITY = gql `\r\n    mutation deleteCity($id: ID!){\r\n        deleteCity(id: $id){\r\n            city{\r\n              name\r\n              code\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const DELETE_USER = gql `\r\n    mutation deleteAccount($username: String) {\r\n        deleteAccount(username: $username) {\r\n            account {\r\n                username\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const DELETE_TEACHER = gql `\r\n    mutation deleteTeacher($id: ID!){\r\n      deleteTeacher(id: $id){\r\n            teacher{\r\n              name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_EMPLOYEES = gql `\r\n  mutation deleteEmployee($id: ID){\r\n    deleteEmployee(id: $id){\r\n      employee{\r\n        name\r\n      }\r\n    }\r\n  }\r\n  `;\r\n\r\nexport const DELETE_SUBJECT = gql `\r\n  mutation deleteSubject ($id: ID) {\r\n    deleteSubject (id: $id) {\r\n      subject {\r\n        credit\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const DELETE_STUDENT = gql `\r\n    mutation deleteStudent($id: ID!){\r\n      deleteStudent(id: $id){\r\n            student{\r\n              surname\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const DELETE_SUB_SCHOOL = gql `\r\n  mutation deleteSubSchool($id: ID){\r\n    deleteSubSchool(id: $id){\r\n      subSchool{\r\n        name\r\n      }\r\n    }\r\n}\r\n`\r\n\r\nexport const DELETE_SCHOOL = gql `\r\n  mutation deleteSchool($id: ID!){\r\n    deleteSchool(id: $id){\r\n      school{\r\n        name\r\n      }\r\n    }\r\n}\r\n`\r\n\r\nexport const DELETE_SECTION = gql `\r\n  mutation deleteSection($id: ID){\r\n    deleteSection(id: $id){\r\n      section{\r\n        section\r\n      }\r\n    }\r\n}\r\n`\r\n\r\nexport const DELETE_CLASS = gql `\r\n  mutation deleteClasses($id: ID!){\r\n    deleteClasses(id: $id){\r\n      classes{\r\n        classes\r\n      }\r\n    }\r\n}\r\n`\r\n\r\nexport const DELETE_PROGRAM = gql `\r\n    mutation deleteProgram($id: ID!){\r\n        deleteProgram(id: $id){\r\n            program{\r\n                program\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_ROUTINE = gql `\r\n    mutation deleteRoutine ($id: ID) {\r\n        deleteRoutine (id: $id) {\r\n            routine {\r\n                createdAt\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_PARENT = gql `\r\n    mutation deleteParent ($id: ID) {\r\n        deleteParent (id: $id) {\r\n            parent {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_EVENT_TYPE = gql `\r\n    mutation deleteEventType ($id: ID) {\r\n        deleteEventType (id: $id) {\r\n            eventType {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_EVENT = gql`\r\n    mutation deleteEvent ($id: ID) {\r\n        deleteEvent (id: $id) {\r\n            event {\r\n                title\r\n            }\r\n        }\r\n    }\r\n`;\r\n","import React, { useEffect } from 'react';\r\nimport { Form, Input, message, Spin, Row, Col, Select } from 'antd';\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { ALL_SCHOOLS, ALL_PROGRAMS } from 'graphql/all';\r\nimport { ALL_ACTIVITY } from 'graphql/core';\r\nimport { CREATE_CLASSES } from 'graphql/create';\r\nimport { UPDATE_CLASSES } from 'graphql/update';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\n\r\nconst { Option } = Select;\r\n\r\nfunction SchoolForm(props) {\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const { data: schoolsData } = useQuery(ALL_SCHOOLS);\r\n    const { data: activityData } = useQuery(ALL_ACTIVITY);\r\n    const { data: programsData } = useQuery(ALL_PROGRAMS);\r\n\r\n    console.log(programsData);\r\n\r\n    const [createClasses, { loading }] = useMutation(CREATE_CLASSES, {\r\n        onCompleted: data => {\r\n            message.success('Амжилттай хадгаллаа');\r\n            props.setIsModalVisible(false);\r\n            props.refetch();\r\n        }\r\n    });\r\n    const [updateClasses, { loading: updateLoading }] = useMutation(UPDATE_CLASSES, {\r\n        onCompleted: data => {\r\n            message.success('Амжилттай хадгаллаа');\r\n            props.setIsModalVisible(false);\r\n            props.refetch();\r\n        }\r\n    })\r\n    useEffect(() => {\r\n        if (props.formType === \"edit\") {\r\n            const newData = {\r\n                classes: props.editData.classes,\r\n                activity: props.editData.activity.id,\r\n                program: props.editData.program.id,\r\n                school: props.editData.school.id,\r\n                status: props.editData.status,\r\n                course: props.editData.course,\r\n                endCourse: props.editData.endCourse,\r\n            }\r\n            form.setFieldsValue(newData);\r\n        } else if (props.formType === \"create\") {\r\n            form.resetFields();\r\n        }\r\n    }, [form, props]);\r\n\r\n    const onFinish = values => {\r\n        if (props.formType === \"edit\") {\r\n            values.id = props.editData.id;\r\n            updateClasses({ variables: values });\r\n        } else {\r\n            createClasses({ variables: values });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Spin spinning={loading || updateLoading} tip=\"Ачааллаж байна...\">\r\n            <Form\r\n                id=\"SchoolForm\"\r\n                layout={'vertical'}\r\n                form={form}\r\n                name=\"control-hooks\"\r\n                onFinish={onFinish}\r\n            >\r\n                <Row gutter={[16, 24]}>\r\n                    <Col className=\"gutter-row\" span={12}>\r\n                        <Form.Item name=\"school\" label={<IntlMessage id=\"school\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select>\r\n                                {schoolsData?.allSchools.map((school, index) => (\r\n                                    <Option key={index} value={school.id}>{school.name}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"activity\" label={<IntlMessage id=\"activity\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select>\r\n                                {activityData?.allActivitys.map((activity, index) => (\r\n                                    <Option key={index} value={activity.id}>{activity.name}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"status\" label={<IntlMessage id=\"status\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select>\r\n                                <Option value=\"OPEN\">Суралцаж буй</Option>\r\n                                <Option value=\"CLOSED\">Төгссөн</Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col className=\"gutter-row\" span={12}>\r\n                        <Form.Item name=\"classes\" label={<IntlMessage id=\"classes\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"program\" label={<IntlMessage id=\"program\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select>\r\n                                {programsData?.allPrograms.map((program, index) => (\r\n                                    <Option value={program.id} key={index}>{program.program}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </Spin>\r\n    );\r\n};\r\n\r\nexport default SchoolForm","import React, { useEffect, useState } from 'react'\r\nimport { Modal, message, Button } from 'antd';\r\nimport { DeleteTwoTone, EditTwoTone, EyeTwoTone } from '@ant-design/icons';\r\nimport utils from 'utils'\r\nimport SchoolForm from './form'\r\nimport { useMutation, useLazyQuery } from '@apollo/client';\r\nimport { ALL_CLASSESS } from 'graphql/all'\r\nimport { DELETE_CLASS } from 'graphql/delete'\r\nimport IntlMessage from \"components/util-components/IntlMessage\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport { APP_PREFIX_PATH } from 'configs/AppConfig';\r\nimport AsyncTable from 'components/shared-components/AsyncTable';\r\n\r\nfunction  ClassesTable (props) {\r\n\r\n    const history = useHistory();\r\n    \r\n\tconst [list, setList] = useState([])\r\n    const [count, setCount] = useState(1);\r\n\r\n\tconst [fetchData, { loading, refetch }] = useLazyQuery(ALL_CLASSESS, {\r\n\t\tonCompleted: data => {\r\n\t\t\tsetList(data.allClassess);\r\n            setCount(data.count.count);\r\n\t\t}\r\n\t});\r\n\r\n    useEffect(() => {\r\n        fetchData({ variables: { offset: 0, limit: 9, filter: '', program: 0} })\r\n    }, [fetchData])\r\n    \r\n\r\n\tconst [isModalVisible, setIsModalVisible] = useState(false);\r\n\tconst [editData, setEditData] = useState([]);\r\n\tconst [formType, setFormType] = useState(\"\");\r\n\r\n    const showModal = () => {\r\n\t\tsetFormType(\"create\");\r\n     \tsetIsModalVisible(true);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n      \tsetIsModalVisible(false);\r\n    };\r\n\r\n\tconst editRow = row => {\r\n\t\tsetFormType(\"edit\");\r\n\t\tsetEditData(row);\r\n\t\tsetIsModalVisible(true);\r\n\t};\r\n\r\n\tconst { confirm } = Modal;\r\n\r\n\tconst [deleteClasses] = useMutation(DELETE_CLASS, {\r\n\t\trefetchQueries: [ALL_CLASSESS],\r\n\t\tonCompleted: data => {\r\n            message.success('Амжилттай устлаа');\r\n\t\t}\r\n\t});\r\n\t\r\n\tfunction deleteRow(row) {\r\n\t\tconfirm({\r\n            title: \"Устгах уу?\",\r\n            okText: \"Устгах\",\r\n            okType: 'danger',\r\n            cancelText: \"Болих\",\r\n\t\t\tonOk() {\r\n\t\t\t\tdeleteClasses({ variables: { id: row.id} }); \r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n\r\n\tconst tableColumns = [\r\n\t\t{\r\n\t\t\tkey: 'classes',\r\n\t\t\ttitle: <IntlMessage id=\"classes\" />,\r\n\t\t\tdataIndex: 'classes',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'classes')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'school',\r\n            title: <IntlMessage id=\"school\" />,\r\n            dataIndex: ['school', 'name'], \r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'school')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'program',\r\n            title: <IntlMessage id=\"program\" />,\r\n            dataIndex: ['program', 'program'], \r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'program')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'activity',\r\n            title: <IntlMessage id=\"activity\" />,\r\n            dataIndex: ['activity', 'name'], \r\n            responsive: ['lg'],\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'activity')\r\n\t\t}\r\n\t];\r\n\r\n\tif (props.permissions.edit === true || props.permissions.destroy === true) {\r\n\t\ttableColumns.push(\r\n\t\t\t{\r\n\t\t\t\tkey: 'actions',\r\n\t\t\t\ttitle: <IntlMessage id=\"main.action\" />,\r\n\t\t\t\twidth: '15vw',\r\n\t\t\t\tdataIndex: 'actions',\r\n\t\t\t\trender: (_, elm) => (\r\n\t\t\t\t\t<div className=\"text-center\">\r\n                        { props.permissions.view_section === true &&\r\n                            <Button size=\"small\" onClick={() =>  history.push({pathname: APP_PREFIX_PATH+'/section', state: {message: elm}})} type=\"text\" icon={<EyeTwoTone />} > <IntlMessage id=\"show2\" /></Button>\r\n                        }{ props.permissions.edit === true &&\r\n\t\t\t\t\t\t\t<Button size=\"small\" onClick={() => editRow(elm)} type=\"text\" icon={<EditTwoTone twoToneColor=\"#ffdb00\"/>} > <IntlMessage id=\"edit\" /></Button>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t{ props.permissions.destroy === true &&\r\n\t\t\t\t\t\t\t<Button size=\"small\" onClick={() => deleteRow(elm)} type=\"text\" icon={<DeleteTwoTone twoToneColor=\"#f42f2f\"/>} > <IntlMessage id=\"delete\" /></Button>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Modal \r\n                title={formType === \"create\" ? <IntlMessage id=\"add_new\" /> : <IntlMessage id=\"edit\" />} \r\n                visible={isModalVisible} \r\n\t\t\t\twidth={'80vw'}\r\n\t\t\t\tokText={<IntlMessage id='main.okText' />}\r\n\t\t\t\tcancelText={<IntlMessage id='main.cancelText' />}\r\n\t\t\t\tonCancel={handleCancel}\r\n\t\t\t\tokButtonProps={{form:'SchoolForm', key: 'submit', htmlType: 'submit'}}\r\n            >\r\n                <SchoolForm\r\n                    refetch={refetch}\r\n\t\t\t\t\teditData={editData} \r\n\t\t\t\t\tformType={formType} \r\n\t\t\t\t\tsetIsModalVisible={setIsModalVisible}\r\n\t\t\t\t/>\r\n            </Modal>\r\n\t\t\t<AsyncTable \r\n                fetchData={fetchData}\r\n                loading={loading}\r\n                columns={tableColumns}\r\n                data={list}\r\n                count={count}\r\n                permissions={props.permissions}\r\n                showModal={showModal}\r\n           />\r\n\t\t</>\r\n\t\t\r\n\t)\r\n}\r\n\r\nexport default ClassesTable\r\n","import React from \"react\";\r\nimport ClassesTable from './table';\r\nimport { CheckPer } from 'hooks/checkPermission';\r\nimport Loading from \"components/shared-components/Loading\";\r\n\r\nconst Index = (props) => {\r\n\r\n    const create = CheckPer('add_classes');\r\n    const edit = CheckPer('change_classes');\r\n    const destroy = CheckPer('delete_classes');\r\n    const view_section = CheckPer('view_section');\r\n\r\n    const permissions = {\r\n        create: create,\r\n        edit: edit,\r\n        destroy: destroy,\r\n        view_section: view_section\r\n    }\r\n\r\n    if (Object.values(permissions).indexOf('loading') > -1) {\r\n        return <Loading cover=\"content\" />\r\n    }\r\n\r\n    return (\r\n        <ClassesTable title={props.title} permissions={permissions} />\r\n    )\r\n}\r\n\r\nexport default Index;","// This icon file is generated automatically.\nvar EyeTwoTone = { \"icon\": function render(primaryColor, secondaryColor) { return { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M81.8 537.8a60.3 60.3 0 010-51.5C176.6 286.5 319.8 186 512 186c-192.2 0-335.4 100.5-430.2 300.3a60.3 60.3 0 000 51.5C176.6 737.5 319.9 838 512 838c-192.1 0-335.4-100.5-430.2-300.2z\", \"fill\": secondaryColor } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M512 258c-161.3 0-279.4 81.8-362.7 254C232.6 684.2 350.7 766 512 766c161.4 0 279.5-81.8 362.7-254C791.4 339.8 673.3 258 512 258zm-4 430c-97.2 0-176-78.8-176-176s78.8-176 176-176 176 78.8 176 176-78.8 176-176 176z\", \"fill\": secondaryColor } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M942.2 486.2C847.4 286.5 704.1 186 512 186c-192.2 0-335.4 100.5-430.2 300.3a60.3 60.3 0 000 51.5C176.6 737.5 319.9 838 512 838c192.2 0 335.4-100.5 430.2-300.3 7.7-16.2 7.7-35 0-51.5zM512 766c-161.3 0-279.4-81.8-362.7-254C232.6 339.8 350.7 258 512 258s279.4 81.8 362.7 254C791.5 684.2 673.4 766 512 766z\", \"fill\": primaryColor } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M508 336c-97.2 0-176 78.8-176 176s78.8 176 176 176 176-78.8 176-176-78.8-176-176-176zm0 288c-61.9 0-112-50.1-112-112s50.1-112 112-112 112 50.1 112 112-50.1 112-112 112z\", \"fill\": primaryColor } }] }; }, \"name\": \"eye\", \"theme\": \"twotone\" };\nexport default EyeTwoTone;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport EyeTwoToneSvg from \"@ant-design/icons-svg/es/asn/EyeTwoTone\";\nimport AntdIcon from '../components/AntdIcon';\nvar EyeTwoTone = function EyeTwoTone(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: EyeTwoToneSvg\n  }));\n};\nEyeTwoTone.displayName = 'EyeTwoTone';\nexport default /*#__PURE__*/React.forwardRef(EyeTwoTone);"],"names":["fetchData","loading","columns","data","permissions","showModal","useState","setFilter","alignItems","justifyContent","mobileFlex","className","placeholder","prefix","onChange","e","value","currentTarget","variables","offset","limit","filter","program","onSearch","create","onClick","type","icon","block","id","size","dataSource","rowKey","bordered","Flex","props","children","flexDirection","defaultProps","ALL_DEGREES","gql","CREATE_DEGREE","UPDATE_DEGREE","DELETE_DEGREE","ALL_ACTIVITY","CREATE_ACTIVITY","UPDATE_ACTIVITY","DELETE_ACTIVITY","ALL_STUDENT_STATUS","CREATE_STUDENT_STATUS","UPDATE_STUDENT_STATUS","DELETE_STUDENET_STATUS","ALL_STUDENT_STATUS_EXTRA","CREATE_STUDENT_STATUS_EXTRA","UPDATE_STUDENT_STATUS_EXTRA","DELETE_STUDENET_STATUS_EXTRA","ALL_TEACHER_STATUS","CREATE_TEACHER_STATUS","UPDATE_TEACHER_STATUS","DELETE_STEACHER_STATUS","ALL_CLASSTIME","CREATE_CLASSTIME","UPDATE_CLASSTIME","DELETE_SCLASSTIME","CREATE_ROUTINE","ALL_SCHOOLYEAR","CREATE_SCHOOLYEAR","UPDATE_SCHOOLYEAR","DELETE_SCHOOLYEAR","CREATE_SCHOOL","CREATE_SUB_SCHOOL","CREATE_TEACHER","CREATE_EMPLOYEE","CREATE_STUDENT","CREATE_SECTION","CREATE_CLASSES","CREATE_PROGRAM","CREATE_SUBJECT","CREATE_PARENT","CREATE_EVENT_TYPE","CREATE_EVENT","DELETE_TEACHER","DELETE_EMPLOYEES","DELETE_SUBJECT","DELETE_STUDENT","DELETE_SUB_SCHOOL","DELETE_SCHOOL","DELETE_SECTION","DELETE_CLASS","DELETE_PROGRAM","DELETE_ROUTINE","DELETE_PARENT","DELETE_EVENT_TYPE","DELETE_EVENT","Option","Select","Form","form","schoolsData","useQuery","ALL_SCHOOLS","activityData","programsData","ALL_PROGRAMS","console","log","useMutation","onCompleted","message","setIsModalVisible","refetch","createClasses","UPDATE_CLASSES","updateClasses","updateLoading","useEffect","formType","newData","classes","editData","activity","school","status","course","endCourse","setFieldsValue","resetFields","spinning","tip","layout","name","onFinish","values","gutter","span","label","IntlMessage","rules","required","allSchools","map","index","allActivitys","allPrograms","history","useHistory","list","setList","count","setCount","useLazyQuery","ALL_CLASSESS","allClassess","isModalVisible","setEditData","setFormType","confirm","Modal","refetchQueries","deleteClasses","tableColumns","key","title","dataIndex","sorter","a","b","utils","responsive","edit","destroy","push","width","render","_","elm","view_section","pathname","APP_PREFIX_PATH","state","EyeTwoTone","row","editRow","EditTwoTone","twoToneColor","okText","okType","cancelText","onOk","deleteRow","DeleteTwoTone","visible","onCancel","okButtonProps","htmlType","AsyncTable","CheckPer","Object","indexOf","Loading","cover","primaryColor","secondaryColor","ref","React","AntdIcon","_objectSpread","EyeTwoToneSvg","displayName"],"sourceRoot":""}