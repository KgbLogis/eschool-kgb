{"version":3,"file":"static/js/44.8c008cc6.chunk.js","mappings":"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","sources":["graphql/all.js","graphql/report.js","graphql/select.js","views/app-views/mark-consolidation/table.js","views/app-views/mark-consolidation/index.js","../node_modules/@ant-design/icons-svg/es/asn/DownOutlined.js","../node_modules/@ant-design/icons/es/icons/DownOutlined.js","../node_modules/antd/es/_util/hooks/useForceUpdate.js","../node_modules/rc-util/es/getScrollBarSize.js"],"sourcesContent":["import { gql } from '@apollo/client';\r\n\r\nexport const ALL_SUBJECTS = gql`\r\n    query allSubjects ($offset: Int!, $limit: Int!, $filter: String) {\r\n        allSubjects (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            subSchool {\r\n                id\r\n                name\r\n            }\r\n            subject \r\n            credit\r\n            content\r\n            createUserid{\r\n                teacher{\r\n                    familyName\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_SUBJECTS_PAGINATION = gql`\r\n    query allSubjectsPagination ($page: Int!, $perPage: Int!, $filter: String) {\r\n        allSubjectsPagination (page: $page, perPage: $perPage, filter: $filter) {\r\n            page\r\n            perPage\r\n            pageCount\r\n            totalCount\r\n            records {\r\n                id\r\n                school {\r\n                    id\r\n                    name\r\n                }\r\n                subSchool {\r\n                    id\r\n                    name\r\n                }\r\n                subject \r\n                credit\r\n                content\r\n                createUserid{\r\n                    teacher{\r\n                        familyName\r\n                        name\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const TEACHER_STATUS = gql`\r\n    query allTeacherStatuss {\r\n        allTeacherStatuss {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\nexport const STUDENT_STATUS = gql`\r\n    query allStudentStatuss {\r\n        allStudentStatuss {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\nexport const STUDENT_STATUS_EXTRA = gql`\r\n    query allStudentStatusExtras {\r\n        allStudentStatusExtras {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_USERS = gql`\r\n    query allUsers {\r\n        allUsers {\r\n            id\r\n            username\r\n            email\r\n        }\r\n    }\r\n`;\r\n\r\nexport const USER_BY_USERNAME = gql`\r\n    query userByUsername($username: String!) {\r\n        userByUsername(username: $username) {\r\n            id\r\n            username\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_EMPLOYEES_ATTANDANCE_BY_RANGE = gql`\r\n    query employeesAttandanceByRange ($startDate: DateTime!, $endDate: DateTime!) {\r\n        employeesAttandanceByRange (startDate: $startDate, endDate: $endDate) {\r\n            id\r\n            isIn\r\n            isOut\r\n            timeIn\r\n            timeOut\r\n            user {\r\n                id\r\n                isTeacher\r\n                isEmployee\r\n                teacher {\r\n                    familyName\r\n                    name\r\n                    teacherCode\r\n                }\r\n                employee {\r\n                    familyName\r\n                    name\r\n                    employeeCode\r\n                }\r\n                groups {\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_TEACHER_AND_EMPLOYESS = gql`\r\n    query allAttendaceEmployees {\r\n        allAttendaceEmployees {\r\n            username\r\n            email\r\n            isTeacher\r\n            isEmployee\r\n            teacher {\r\n                teacherCode\r\n                familyName\r\n                name\r\n            }\r\n            employee {\r\n                employeeCode\r\n                familyName\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_EMPLOYEES_COMPARTMENT = gql`\r\n    query allEmployeesCompartment {\r\n        allEmployeesCompartment {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_EMPLOYEES = gql`\r\n    query allEmployees ($filter: String) {\r\n        allEmployees (filter: $filter) {\r\n            id\r\n            user {\r\n                id\r\n                username\r\n                email\r\n                groups {\r\n                    name\r\n                }\r\n            }\r\n            compartment {\r\n                id\r\n                name\r\n            }\r\n            employeeCode\r\n            familyName\r\n            name\r\n            registerNo\r\n            photo\r\n            phone\r\n            phone2\r\n            address\r\n            sex\r\n            birthdate\r\n            birthCity {\r\n                id\r\n            }\r\n            birthDistrict {\r\n                id\r\n            }\r\n            status {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_TEACHERS = gql`\r\n  \tquery allTeachers ($offset: Int!, $limit: Int!, $filter: String) {\r\n        allTeachers (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            user {\r\n                id\r\n                username\r\n                email\r\n            }\r\n            teacherCode\r\n            degree{\r\n                id\r\n            }\r\n            access\r\n            familyName\r\n            name\r\n            registerNo\r\n            photo\r\n            phone\r\n            phone2\r\n            address\r\n            joinDate\r\n            joinBefore\r\n            sex\r\n            birthdate\r\n            birthCity {\r\n                id\r\n                name\r\n            }\r\n            birthDistrict {\r\n                id\r\n                name\r\n            }\r\n            status {\r\n                id\r\n                name\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            subSchool {\r\n                id\r\n                name\r\n            }\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const ALL_STUDENTS = gql`\r\n  \tquery allStudents ($filter: String, $program: Int, $classes: Int, $section: Int) {\r\n        allStudents (filter: $filter, program: $program, classes: $classes, section: $section) {\r\n            id\r\n            user {\r\n                id\r\n                username\r\n                email\r\n            }\r\n            studentCode\r\n            surname\r\n            familyName\r\n            name\r\n            religion\r\n            registerNo\r\n            nationality\r\n            state\r\n            photo\r\n            phone\r\n            address\r\n            activity {\r\n                id\r\n                name\r\n            }\r\n            joinDate\r\n            sex\r\n            birthdate\r\n            classtime {\r\n                id\r\n                name\r\n            }\r\n            birthCity {\r\n                id\r\n                name\r\n            }\r\n            birthDistrict {\r\n                id\r\n                name\r\n            }\r\n            status {\r\n                id\r\n                name\r\n            }\r\n            statusExtra {\r\n                id\r\n                name\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            classes {\r\n                id\r\n                classes\r\n            }\r\n            section {\r\n                id\r\n                section\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            joinSchoolyear {\r\n                id\r\n                schoolyear\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_CITYS = gql`\r\n  \tquery allCitys{\r\n        allCitys {\r\n            id\r\n            name\r\n            code\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const ALL_DISTRICTS = gql`\r\n    query allDistricts {\r\n        allDistricts {\r\n            id\r\n            code\r\n            name\r\n            cityID {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_PROGRAMS = gql`\r\n  \tquery allPrograms{\r\n        allPrograms {\r\n            id\r\n            program\r\n            programMgl\r\n            maxStudentNum\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            subSchool {\r\n                id\r\n                name\r\n            }\r\n            status\r\n            createdAt\r\n            updatedAt\r\n        }\r\n\t  }\r\n`;\r\n\r\nexport const ALL_SCHOOLS = gql`\r\n  \tquery allSchools {\r\n        allSchools {\r\n            id\r\n            name\r\n            nameMgl\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const ALL_SUB_SCHOOLS = gql`\r\n  \tquery allSubSchools{\r\n        allSubSchools {\r\n            id\r\n            name\r\n            nameMgl\r\n            school {\r\n                id\r\n                name\r\n            }\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nexport const ALL_SECTIONS = gql`\r\n    query allSections {\r\n        allSections {\r\n            id\r\n            section\r\n            classes {\r\n                id\r\n                classes\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            teacher{\r\n                id\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            createdAt\r\n            updatedAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_CLASSESS = gql`\r\n    query allClassess ($program: Int!, $offset: Int!, $limit: Int!, $filter: String) {\r\n        allClassess (program: $program, offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            classes\r\n            activity {\r\n                id\r\n                name\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            status\r\n        }\r\n    }\r\n`\r\nexport const ALL_CLASSTIME = gql`\r\n    query allClasstimes {\r\n        allClasstimes {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\nexport const ALL_SCHOOL_YEAR = gql`\r\n    query allSchoolyears {\r\n        allSchoolyears {\r\n            id\r\n            schoolyear\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_PARENTS = gql`\r\n    query allParents ($offset: Int!, $limit: Int!, $filter: String) {\r\n        allParents (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            familyName\r\n            name\r\n            profession\r\n            phone\r\n            address\r\n            student {\r\n                id\r\n                studentCode\r\n                familyName\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SECTION_BY_CLASSES = gql`\r\n    query sectionsByClasses ($classes: Int!) {\r\n        sectionsByClasses (classes: $classes) {\r\n            id\r\n            section\r\n            maxStudentNum\r\n            teacher{\r\n                name\r\n                id\r\n            }\r\n            classes {\r\n                id\r\n                classes\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const TRANSFER_BY_STUDENT = gql`\r\n    query transfersByStudent ($student: Int!) {\r\n        transfersByStudent (student: $student) {\r\n            id\r\n            student {\r\n                familyName\r\n                name\r\n                photo\r\n                studentCode\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            classes {\r\n                id\r\n                classes\r\n            }\r\n            section {\r\n                id\r\n                section\r\n            }\r\n            status {\r\n                id\r\n                name\r\n            }\r\n            statusExtra {\r\n                id\r\n                name\r\n            }\r\n            classtime {\r\n                id\r\n                name\r\n            }\r\n            activity {\r\n                id\r\n                name\r\n            }\r\n            docDate\r\n            docNum\r\n            description\r\n            oldData\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_EVENT_TYPES = gql`\r\n    query allEventTypes {\r\n        allEventTypes {\r\n            id\r\n            name\r\n            color\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_EVENTS = gql`\r\n    query allEvents {\r\n        allEvents {\r\n            id\r\n            title\r\n            description\r\n            content\r\n            startAt\r\n            endAt\r\n            eventType {\r\n                id\r\n                name\r\n                color\r\n            }\r\n        }\r\n    } \r\n`;\r\n\r\nexport const ALL_EVENTS_BY_DATE = gql `\r\n    query allEventsByDate ($date: Date) {\r\n        allEventsByDate (date: $date) {\r\n            id\r\n            title\r\n            description\r\n            content\r\n            startAt\r\n            endAt\r\n            eventType {\r\n                id\r\n                name\r\n                color\r\n            }\r\n        }\r\n    } \r\n`;\r\n\r\nexport const ALL_EVENTS_BY_TYPE = gql`\r\n    query allEventsByType ($id: Int!) {\r\n        allEventsByType (id: $id) {\r\n            id\r\n            title\r\n            description\r\n            content\r\n            startAt\r\n            endAt\r\n            eventType\r\n        }\r\n    }\r\n`;","import { gql } from \"@apollo/client\";\r\n\r\nexport const STUDENT_REPORT = gql `\r\n    query studentReport ($studentCode: String) {\r\n        studentReport (studentCode: $studentCode) {\r\n            school\r\n            textTop\r\n            textMid\r\n            textBottom\r\n            studentPhoto\r\n            studentCode\r\n        }\r\n    }\r\n`;\r\n\r\nexport const STUDENT_REPORT_SECTION = gql `\r\n    query studentReportSection ($section: Int) {\r\n        studentReportSection (section: $section) {\r\n            school\r\n            textTop\r\n            textMid\r\n            textBottom\r\n            studentPhoto\r\n            studentCode\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_SECTIONS = gql `\r\n    query allSections {\r\n        allSections {\r\n            id\r\n            section\r\n        }\r\n    }\r\n`;\r\n\r\nexport const STUDENT_MARK_REPORT = gql `\r\n    query studentMarkReport ($studentCode: String) {\r\n        studentMarkReport (studentCode: $studentCode) {\r\n            school\r\n            textTop\r\n            textMid0\r\n            textMid1\r\n            textMid2\r\n            textMid3\r\n            textMid4\r\n            textMid5\r\n            textMid6\r\n            textMid7\r\n            textBottom\r\n            studentPhoto\r\n            studentCode\r\n        }\r\n    }\r\n`;\r\n\r\nexport const STUDENT_MARK_REPORT_SECTION = gql `\r\n    query studentMarkReportSection ($section: Int) {\r\n        studentMarkReportSection (section: $section) {\r\n            school\r\n            textTop\r\n            textMid0\r\n            textMid1\r\n            textMid2\r\n            textMid3\r\n            textMid4\r\n            textMid5\r\n            textMid6\r\n            textMid7\r\n            textBottom\r\n            studentPhoto\r\n            studentCode\r\n        }\r\n    }\r\n`;\r\n\r\nexport const STUDENT_SCHOOL_YEAR = gql `\r\n    query studentSchoolyear ($student: Int) {\r\n        studentSchoolyear (student: $student) {\r\n            id\r\n            schoolyear\r\n            season\r\n            semesterCode\r\n            startDate\r\n            endDate\r\n        }\r\n    }\r\n`;\r\n\r\nexport const STUDENT_MARK_REL = gql `\r\n    query studentMarkRel ($student: Int, $schoolyear: Int) {\r\n        studentMarkRel (student: $student, schoolyear: $schoolyear) {\r\n            id\r\n            mark {\r\n                student {\r\n                    studentCode \r\n                }\r\n                markBoard {\r\n                    subject {\r\n                        id\r\n                        subject\r\n                        subjectCode\r\n                        credit\r\n                    }\r\n                    schoolyear {\r\n                        schoolyear \r\n                        season\r\n                    }\r\n                }\r\n            }\r\n            markSetting {\r\n                name\r\n                percentage\r\n            }\r\n            markVal\r\n        }\r\n    }\r\n`;\r\n\r\nexport const MARK_PERCENTAGE = gql `\r\n    query markPercentage ($percentage: Int) {\r\n        markPercentage (percentage: $percentage) {\r\n            type\r\n            percentage\r\n            diam\r\n        }\r\n    }\r\n`;\r\n\r\nexport const MARK_CON = gql `\r\n    query markCon ($subject: Int!, $schoolyear: Int!, $student: Int!) {\r\n        markCon (subject: $subject, schoolyear: $schoolyear, student: $student) {\r\n            percentage\r\n            type\r\n            diam\r\n        }\r\n    }\r\n`;\r\n\r\nexport const MARK_CON_SUBJECT = gql `\r\n    query markconSubject ($schoolyear: Int!, $section: Int!) {\r\n        markconSubject (schoolyear: $schoolyear, section: $section) {\r\n            subjectId\r\n            subject\r\n            subjectCode\r\n            subjectCredit\r\n        }\r\n    }\r\n`;\r\n\r\nexport const MARK_CON_STUDENT = gql `\r\n    query markconStudent ($section: Int!) {\r\n        markconStudent (section: $section) {\r\n            studentId\r\n            familyName\r\n            name\r\n            studentCode\r\n            registerNo\r\n        }\r\n    }\r\n`;\r\n\r\nexport const MARK_CON_QUERY = gql`\r\n    query markConQuery ($section: Int!, $schoolyear: Int!) {\r\n        markconSubject (schoolyear: $schoolyear, section: $section) {\r\n            subjectId \r\n            subject\r\n            subjectCode\r\n            subjectCredit\r\n        }\r\n        markconStudent (section: $section) {\r\n            studentId\r\n            familyName\r\n            name\r\n            studentCode\r\n            registerNo\r\n        }\r\n    },\r\n`;\r\n\r\nexport const MARK_CON_TEST = gql `\r\n    query markCon ($sdf: Array) {\r\n        D1934081_3: markCon(subject: 3, schoolyear: 1, student: 98150) {    \r\n            percentage    \r\n            type    \r\n            diam  \r\n        }  \r\n        D1934087_3: markCon(subject: 3, schoolyear: 1, student: 98489) { percentage    type    diam  }  \r\n        D1934076_3: markCon(subject: 3, schoolyear: 1, student: 103324) {    percentage    type    diam  }  \r\n        D1834046_3: markCon(subject: 3, schoolyear: 1, student: 98894) {    percentage    type    diam  }  \r\n        D1934077_3: markCon(subject: 3, schoolyear: 1, student: 100276) {    percentage    type    diam  }  \r\n        D1934073_3: markCon(subject: 3, schoolyear: 1, student: 104950) {    percentage    type    diam  }  \r\n        D1934089_3: markCon(subject: 3, schoolyear: 1, student: 100633) {    percentage    type    diam  }  \r\n        D1934086_3: markCon(subject: 3, schoolyear: 1, student: 100787) {    percentage    type    diam  }  \r\n        D1934098_3: markCon(subject: 3, schoolyear: 1, student: 105890) {    percentage    type    diam  }  \r\n        D1934075_3: markCon(subject: 3, schoolyear: 1, student: 101336) {    percentage    type    diam  }  \r\n        D1934071_3: markCon(subject: 3, schoolyear: 1, student: 101355) {    percentage    type    diam  }  \r\n        D1934084_3: markCon(subject: 3, schoolyear: 1, student: 101452) {    percentage    type    diam  }  \r\n        D1934090_3: markCon(subject: 3, schoolyear: 1, student: 101491) {    percentage    type    diam  }  \r\n        D1934088_3: markCon(subject: 3, schoolyear: 1, student: 102593) {    percentage    type    diam  }  \r\n        D1724120_3: markCon(subject: 3, schoolyear: 1, student: 103392) {    percentage    type    diam  }  \r\n        D1934080_3: markCon(subject: 3, schoolyear: 1, student: 104140) {    percentage    type    diam  }  \r\n        D1934079_3: markCon(subject: 3, schoolyear: 1, student: 105052) {    percentage    type    diam  }  \r\n        D1934097_3: markCon(subject: 3, schoolyear: 1, student: 105101) {    percentage    type    diam  }  \r\n        D1934103_3: markCon(subject: 3, schoolyear: 1, student: 105110) {    percentage    type    diam  }  \r\n        D1934096_3: markCon(subject: 3, schoolyear: 1, student: 105112) {    percentage    type    diam  }  \r\n        D1934074_3: markCon(subject: 3, schoolyear: 1, student: 105596) {    percentage    type    diam  }  \r\n        D1934078_3: markCon(subject: 3, schoolyear: 1, student: 105697) {    percentage    type    diam  }  \r\n        D1934094_3: markCon(subject: 3, schoolyear: 1, student: 107882) {    percentage    type    diam  }  \r\n        D1934104_3: markCon(subject: 3, schoolyear: 1, student: 107918) {    percentage    type    diam  }  \r\n        D1934101_3: markCon(subject: 3, schoolyear: 1, student: 107971) {    percentage    type    diam  }  \r\n        D1934100_3: markCon(subject: 3, schoolyear: 1, student: 108400) {    percentage    type    diam  }  \r\n        D1934093_3: markCon(subject: 3, schoolyear: 1, student: 109395) {    percentage    type    diam  } \r\n        D1934085_3: markCon(subject: 3, schoolyear: 1, student: 109445) {    percentage    type    diam  }  \r\n        D1744080_3: markCon(subject: 3, schoolyear: 1, student: 109448) {    percentage    type    diam  }  \r\n        D1934095_3: markCon(subject: 3, schoolyear: 1, student: 109996) {    percentage    type    diam  }  \r\n        D1934102_3: markCon(subject: 3, schoolyear: 1, student: 110102) {    percentage    type    diam  }  \r\n        D1934072_3: markCon(subject: 3, schoolyear: 1, student: 111723) {    percentage    type    diam  }  \r\n        D1834021_3: markCon(subject: 3, schoolyear: 1, student: 95960) {    percentage    type    diam  } \r\n        D1934091_3: markCon(subject: 3, schoolyear: 1, student: 105549) {    percentage    type    diam  }  \r\n        D1934092_3: markCon(subject: 3, schoolyear: 1, student: 111134) {    percentage    type    diam  }  \r\n        D1934083_3: markCon(subject: 3, schoolyear: 1, student: 111971) {    percentage    type    diam  }\r\n    }\r\n`;\r\nexport const ALL_STUDENTS_REPORT = gql`\r\n    query allStudentsReport {\r\n        allStudentsReport {\r\n            id\r\n            user {\r\n                id\r\n                username\r\n                email\r\n            }\r\n            studentCode\r\n            surname\r\n            familyName\r\n            name\r\n            religion\r\n            registerNo\r\n            nationality\r\n            state\r\n            photo\r\n            phone\r\n            address\r\n            activity {\r\n                id\r\n                name\r\n            }\r\n            joinDate\r\n            sex\r\n            birthdate\r\n            classtime {\r\n                id\r\n                name\r\n            }\r\n            birthCity {\r\n                id\r\n                name\r\n            }\r\n            birthDistrict {\r\n                id\r\n                name\r\n            }\r\n            status {\r\n                id\r\n                name\r\n            }\r\n            statusExtra {\r\n                id\r\n                name\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            classes {\r\n                id\r\n                classes\r\n            }\r\n            section {\r\n                id\r\n                section\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            joinSchoolyear {\r\n                id\r\n                schoolyear\r\n            }\r\n        }\r\n    }\r\n`;","import { gql } from '@apollo/client';\r\n\r\nexport const SELECT_STUDENT = gql`\r\n    query allStudents ($filter: String) {\r\n        allStudents (filter: $filter) {\r\n            id\r\n            familyName\r\n            name\r\n            studentCode\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const SELECT_TEACHER = gql`\r\n    query allTeachers ($filter: String) {\r\n        allTeachers (filter: $filter) {\r\n            id\r\n            familyName\r\n            name\r\n            teacherCode\r\n        }\r\n    }\r\n`;\r\n\r\n// export const SELECT_SECTION_TEACHER = gql `\r\n//     query allAssistantTeachers ($filter: String) {\r\n//         allAssistantTeachers (filter: $filter) {\r\n//             id\r\n//             familyName\r\n//             name \r\n//             teacherCode\r\n//         }\r\n//     }\r\n// `\r\n\r\nexport const SELECT_CLASSES = gql`\r\n    query allClassess ($filter: String, $program: Int) {\r\n        allClassess (filter: $filter, program: $program) {\r\n            id\r\n            classes\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const SELECT_SUBJECT = gql`\r\n    query allSubjects ($offset: Int!, $limit: Int!, $filter: String) {\r\n        count (appName: \"subject\", modelName: \"Subject\", filter: $filter) {\r\n            count\r\n        }\r\n        allSubjects (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            subject\r\n            content\r\n            createUserid {\r\n                firstName\r\n                lastName\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SELECT_PROGRAM = gql`\r\n    query selectProgram {\r\n        allPrograms {\r\n            id\r\n            program\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SECTIONS_BY_PROGRAM = gql`\r\n    query sectionsByProgram ($program: Int!) {\r\n        sectionsByProgram (program: $program) {\r\n            id\r\n            section \r\n            classes {\r\n                classes\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SELECT_SECTION = gql`\r\n    query sectionsByClasses ($classes: Int!){\r\n        sectionsByClasses (classes: $classes) {\r\n            id \r\n            section\r\n        }\r\n    }\r\n`\r\n\r\nexport const SELECT_STUDENT_PAGINATION = gql`\r\n    query allStudentsPagination (\r\n        $page: Int\r\n        $perPage: Int\r\n        $filter: String = \"\"\r\n    ) {\r\n        allStudentsPagination (\r\n            page: $page\r\n            perPage: $perPage\r\n            filter: $filter\r\n        ) {\r\n            page\r\n            perPage\r\n            pageCount\r\n            totalCount\r\n            records {\r\n                id\r\n                name\r\n                familyName\r\n            }\r\n        }\r\n    }\r\n`","import React, { useState, useEffect } from 'react'\r\nimport { Card, Table, Button, Form, Select, Row, Col } from 'antd';\r\nimport { useQuery, useLazyQuery } from '@apollo/client';\r\nimport IntlMessage from \"components/util-components/IntlMessage\";\r\nimport { ALL_SCHOOL_YEAR, SECTION_BY_CLASSES, ALL_PROGRAMS } from 'graphql/all';\r\nimport { MARK_CON_SUBJECT, MARK_CON_STUDENT, MARK_CON } from 'graphql/report';\r\nimport { SELECT_CLASSES } from 'graphql/select';\r\n\r\nconst { Option } = Select;\r\n\r\nconst MarkConsolidationTable = (props) => {\r\n\r\n    const [list, setList] = useState([]);\r\n    const [student, setStudent] = useState(undefined);\r\n    const [subject, setSubject] = useState(undefined);\r\n    const [classesData, setClassesData] = useState([]);\r\n    const [sectionData, setSectionData] = useState([]);\r\n    const [programsData, setProgramsData] = useState([]);\r\n    const [schoolYear, setSchoolYear] = useState();\r\n\r\n    const [studentIndex, setStudentIndex] = useState();\r\n    const [subjectIndex, setSubjectIndex] = useState();\r\n\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [isMarkConFinish, setIsMarkConFinish] = useState(false);\r\n\r\n\tconst { data: schoolyearData } = useQuery(ALL_SCHOOL_YEAR, {\r\n\t});\r\n\r\n    useQuery(ALL_PROGRAMS, {\r\n        onCompleted: result => {\r\n            setProgramsData(result.allPrograms);\r\n        }\r\n\t});\r\n\r\n    const [fetchClasses] = useLazyQuery(SELECT_CLASSES, {\r\n        onCompleted: result => {\r\n            setClassesData(result.allClassess)\r\n        }\r\n    })\r\n\r\n    const [fetchSections] = useLazyQuery(SECTION_BY_CLASSES, {\r\n        onCompleted: result => {\r\n            setSectionData(result.sectionsByClasses);\r\n        }\r\n    })\r\n    const [fetchMarkConSubject] = useLazyQuery(MARK_CON_SUBJECT, {\r\n        fetchPolicy: 'network-only',\r\n        onCompleted: result => {\r\n            setSubject(result.markconSubject)\r\n        }\r\n    })\r\n\r\n    const [fetchMarkConStudent] = useLazyQuery(MARK_CON_STUDENT, {\r\n        fetchPolicy: 'network-only',\r\n        onCompleted: result => {\r\n            const newData = result.markconStudent.map(std => ({\r\n                familyName: std.familyName,\r\n                name: std.name,\r\n                registerNo: std.registerNo,\r\n                studentCode: std.studentCode,\r\n                studentId: std.studentId,\r\n                markCon: []\r\n            }))\r\n            setStudent(newData)\r\n        }\r\n    })\r\n    const [fetchMarkCon, { networkStatus }] = useLazyQuery(MARK_CON, {\r\n        onCompleted: result => {\r\n            student[studentIndex].markCon = {\r\n                ...student[studentIndex].markCon,\r\n                [subject[subjectIndex].subjectId]: {\r\n                    ...result.markCon, ...subject[subjectIndex]\r\n                }\r\n            }\r\n        }\r\n    })\r\n\r\n    const [form] = Form.useForm();\r\n\r\n\tconst tableColumns = [\r\n        {\r\n            title: '№',\r\n            key: 'index',\r\n            render: (text, record, index) => ++index,\r\n        },\r\n\t\t{\r\n\t\t\tkey: 'familyName',\r\n\t\t\ttitle: 'Эцэг/эхийн нэр',\r\n\t\t\tdataIndex: 'familyName',\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'name',\r\n            title: 'Нэр',\r\n            dataIndex: 'name', \r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'studentCode',\r\n            title: 'Оюутны код',\r\n            dataIndex: 'studentCode', \r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'registerNo',\r\n            title: 'Регистр',\r\n            dataIndex: 'registerNo', \r\n\t\t},\r\n\t];\r\n\r\n    subject?.map(function(item) {\r\n        return tableColumns.push({\r\n            width: '25px',\r\n            key: `${item.subjectCode}`,\r\n            title: `${item.subject} - ${item.subjectCode} (${item.subjectCredit})`,\r\n            dataIndex: ['markCon', `${item.subjectId}`, 'percentage'], \r\n        })\r\n    })\r\n\r\n    tableColumns.push(\r\n        {\r\n            key: `A`,\r\n            title: `A`,\r\n            dataIndex: 'A', \r\n        },\r\n        {\r\n            key: `B`,\r\n            title: `B`,\r\n            dataIndex: 'B', \r\n        },\r\n        {\r\n            key: `C`,\r\n            title: `C`,\r\n            dataIndex: 'C', \r\n        },\r\n        {\r\n            key: `D`,\r\n            title: `D`,\r\n            dataIndex: 'D', \r\n        },\r\n        {\r\n            key: `F`,\r\n            title: `F`,\r\n            dataIndex: 'F', \r\n        },\r\n        {\r\n            key: `totalSubject`,\r\n            title: `Судалсан хичээлийн тоо`,\r\n            dataIndex: 'totalSubject', \r\n        },\r\n        {\r\n            key: `totalCredit`,\r\n            title: `Судалсан кредит`,\r\n            dataIndex: 'totalCredit', \r\n        },\r\n        {\r\n            key: `avgPercentage`,\r\n            title: `Дундаж дүн`,\r\n            dataIndex: 'avgPercentage', \r\n        },\r\n        {\r\n            key: `avgDiam`,\r\n            title: `Голч`,\r\n            dataIndex: 'avgDiam', \r\n        },\r\n        \r\n    )\r\n    const onFinish = (values) => {\r\n        if (!values.schoolyear) {\r\n            values.schoolyear = 0\r\n        } \r\n        fetchMarkConSubject({ variables: values })\r\n        fetchMarkConStudent({ variables: values })\r\n        // testFetch({ variables: values });\r\n        form.resetFields();\r\n        setList([]);\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        if (subject && student) {\r\n            student.forEach(function (std, stdIn) {\r\n                setTimeout(function(){\r\n                    setStudentIndex(stdIn)\r\n                    subject.forEach(function (sub, subIn) {\r\n                        setTimeout(function(){\r\n                            if (subject.length === subIn + 1) {\r\n                                setIsMarkConFinish(true)\r\n                            }\r\n                            setSubjectIndex(subIn)\r\n                            fetchMarkCon({ variables: { subject: sub.subjectId, schoolyear: schoolYear, student: std.studentId } })\r\n                        }, subIn * 500);\r\n                    })\r\n                }, stdIn * 1000)\r\n            })\r\n        }\r\n\r\n    }, [fetchMarkCon, student, subject, schoolYear])\r\n\r\n    useEffect(() => {\r\n\r\n        const mergeData = () => {\r\n            \r\n            const fixedData = student.map(function (item, index) {\r\n\r\n                let A = 0, B = 0, C = 0, D = 0, F = 0\r\n                let totalCredit = 0;\r\n                let totalSubject = 0;\r\n                let avgDiam = 0;\r\n                let numAvgDiam = 0;\r\n                let avgPercentage = 0;\r\n                let numAvgPercentage = 0;\r\n\r\n                subject.forEach(sub => {\r\n                    if (item.markCon.hasOwnProperty(sub.subjectId)) {\r\n                        if (item.markCon[sub.subjectId].type) {\r\n                            item.markCon[sub.subjectId].type.includes(\"A\") && ++A\r\n                            item.markCon[sub.subjectId].type.includes(\"B\") && ++B\r\n                            item.markCon[sub.subjectId].type.includes(\"C\") && ++C\r\n                            item.markCon[sub.subjectId].type.includes(\"D\") && ++D\r\n                            item.markCon[sub.subjectId].type.includes(\"F\") && ++F\r\n                        }\r\n                        totalCredit += parseInt(item.markCon[sub.subjectId].subjectCredit)\r\n                        ++totalSubject\r\n                        numAvgPercentage = parseInt(item.markCon[sub.subjectId].percentage)+ numAvgPercentage\r\n                        avgPercentage = numAvgPercentage / totalSubject\r\n                        if (parseInt(item.markCon[sub.subjectId].subjectCredit) !== 0) {\r\n                            numAvgDiam = (item.markCon[sub.subjectId].subjectCredit * item.markCon[sub.subjectId].diam) + numAvgDiam \r\n                            avgDiam = numAvgDiam / totalCredit\r\n                        }\r\n                    }\r\n                })\r\n\r\n                return (\r\n                    {\r\n                        familyName: item.familyName,\r\n                        markCon: item.markCon,\r\n                        name: item.name,\r\n                        registerNo: item.registerNo,\r\n                        studentCode: item.studentCode,\r\n                        studentId: item.studentId,\r\n                        A: A,\r\n                        B: B,\r\n                        C: C,\r\n                        D: D,\r\n                        F: F,\r\n                        totalCredit: totalCredit,\r\n                        totalSubject: totalSubject,\r\n                        avgDiam: avgDiam,\r\n                        avgPercentage: avgPercentage\r\n                    }\r\n                )\r\n            })\r\n            setList(fixedData);\r\n            setIsLoading(false);\r\n        }\r\n\r\n        if (isMarkConFinish && student && subject && networkStatus === 7) {\r\n            mergeData();\r\n        }\r\n    }, [isMarkConFinish, networkStatus, student, subject])\r\n\r\n\treturn (\r\n\t\t<>\r\n            <Card>\r\n                <Form\r\n                    layout='vertical'\r\n                    form={form}\r\n                    onFinish={onFinish}\r\n                >\r\n                    <Row gutter={[16, 16]}>\r\n                        <Col span={12} >\r\n                            <Form.Item \r\n                                label={<IntlMessage id=\"schoolyear\" />}\r\n                                name='schoolyear'\r\n                                rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: <IntlMessage id=\"form.required\" />\r\n                                    },\r\n                                ]}\r\n                            >\r\n                                <Select\r\n                                    showSearch\r\n                                    filterOption={(input, option) =>\r\n                                        option.children.toString().toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                    }\r\n                                    // onChange={() => form.resetFields()}\r\n                                    onSelect={(e) => setSchoolYear(e)}\r\n                                >\r\n                                    { schoolyearData?.allSchoolyears.map((schoolyear, index) => (\r\n                                        <Option key={index} value={schoolyear.id} >{schoolyear.schoolyear} / {schoolyear.season}</Option>\r\n                                    ))}\r\n                                </Select>\r\n                            </Form.Item>\r\n                            <Form.Item\r\n                                shouldUpdate={(prevValues, currentValues) => prevValues.program !== currentValues.program}\r\n                            >\r\n                                {({ getFieldValue }) => {\r\n                                    return getFieldValue('program') ? (\r\n                                        <Form.Item \r\n                                            label={<IntlMessage id=\"classes\" />} \r\n                                            name='classes'\r\n                                            rules={[\r\n                                                {\r\n                                                    required: true,\r\n                                                    message: <IntlMessage id=\"form.required\" />\r\n                                                },\r\n                                            ]}\r\n                                        >\r\n                                            <Select\r\n                                                showSearch\r\n                                                filterOption={(input, option) =>\r\n                                                    option.children.toString().toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                                }\r\n                                                onSelect={(e) => fetchSections({ variables: { classes: e} })}\r\n                                            >\r\n                                                { classesData.map((classes, index) => (\r\n                                                    <Option key={index} value={classes.id} >{classes.classes}</Option>\r\n                                                ))}\r\n                                            </Select>\r\n                                        </Form.Item>\r\n                                    ) : null;\r\n                                }}\r\n                            </Form.Item>\r\n                        </Col>\r\n                        <Col span={12} >\r\n                            <Form.Item \r\n                                label={<IntlMessage id=\"program\" />} \r\n                                name='program'\r\n                                rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: <IntlMessage id=\"form.required\" />\r\n                                    },\r\n                                ]}\r\n                            >\r\n                                <Select\r\n                                    showSearch\r\n                                    filterOption={(input, option) =>\r\n                                        option.children.toString().toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                    }\r\n                                    onSelect={(e) => fetchClasses({ variables: { program: e, offset: 0, limit: 0, filter: '' } })}\r\n                                >\r\n                                    { programsData.map((program, index) => (\r\n                                        <Option key={index} value={program.id} >{program.program}</Option>\r\n                                    ))}\r\n                                </Select>\r\n                            </Form.Item>\r\n                            <Form.Item\r\n                                shouldUpdate={(prevValues, currentValues) => prevValues.classes !== currentValues.classes}\r\n                            >\r\n                                {({ getFieldValue }) => {\r\n                                    return getFieldValue('classes') ? (\r\n                                        <Form.Item \r\n                                            label={<IntlMessage id=\"section\" />} \r\n                                            name='section'\r\n                                            rules={[\r\n                                                {\r\n                                                    required: true,\r\n                                                    message: <IntlMessage id=\"form.required\" />\r\n                                                },\r\n                                            ]}\r\n                                        >\r\n                                            <Select\r\n                                                showSearch\r\n                                                filterOption={(input, option) =>\r\n                                                    option.children.toString().toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                                }\r\n                                            >\r\n                                                { sectionData.map((section, index) => (\r\n                                                    <Option key={index} value={section.id} >{section.section}</Option>\r\n                                                ))}\r\n                                            </Select>\r\n                                        </Form.Item>\r\n                                    ) : null;\r\n                                }}\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n                    <Form.Item\r\n                        shouldUpdate={(prevValues, currentValues) => prevValues.section !== currentValues.section}\r\n                    >\r\n                        {({ getFieldValue }) => {\r\n                            return getFieldValue('section') ? (\r\n                                <Form.Item>\r\n                                    <Button type=\"primary\" htmlType=\"submit\"><IntlMessage id=\"show\" /></Button>\r\n                                </Form.Item>\r\n                            ) : null;\r\n                        }}\r\n                    </Form.Item>\r\n                </Form>\r\n            </Card>\r\n            { isLoading === false &&(\r\n                <Card>\r\n                    <div className=\"table-responsive\">\r\n                        <Table\r\n                            pagination={false}\r\n                            columns={tableColumns} \r\n                            size=\"small\"\r\n                            dataSource={list}\r\n                            rowKey='studentId'  \r\n                            bordered\r\n                            summary={pageData => {\r\n\r\n                                const totalA = subject?.map(function(elm, index) {\r\n                                    let count = 0\r\n                                    pageData.forEach(element => {\r\n                                        if (element.markCon.hasOwnProperty(elm.subjectId) && element.markCon[elm.subjectId].type?.includes(\"A\")) {\r\n                                            ++count\r\n                                        }\r\n                                    });\r\n                                    return (count)\r\n                                })\r\n\r\n                                const totalB = subject?.map(function(elm, index) {\r\n                                    let count = 0\r\n                                    pageData.forEach(element => {\r\n                                        if (element.markCon.hasOwnProperty(elm.subjectId) && element.markCon[elm.subjectId].type?.includes(\"B\")) {\r\n                                            ++count\r\n                                        }\r\n                                    });\r\n                                    return (count)\r\n                                })\r\n\r\n                                const totalC = subject?.map(function(elm, index) {\r\n                                    let count = 0\r\n                                    pageData.forEach(element => {\r\n                                        if (element.markCon.hasOwnProperty(elm.subjectId) && element.markCon[elm.subjectId].type?.includes(\"C\")) {\r\n                                            ++count\r\n                                        }\r\n                                    });\r\n                                    return (count)\r\n                                })\r\n\r\n                                const totalD = subject?.map(function(elm, index) {\r\n                                    let count = 0\r\n                                    pageData.forEach(element => {\r\n                                        if (element.markCon.hasOwnProperty(elm.subjectId) && element.markCon[elm.subjectId].type?.includes(\"D\")) {\r\n                                            ++count\r\n                                        }\r\n                                    });\r\n                                    return (count)\r\n                                })\r\n\r\n                                const totalF = subject?.map(function(elm, index) {\r\n                                    let count = 0\r\n                                    pageData.forEach(element => {\r\n                                        if (element.markCon.hasOwnProperty(elm.subjectId) && element.markCon[elm.subjectId].type?.includes(\"F\")) {\r\n                                            ++count\r\n                                        }\r\n                                    });\r\n                                    return (count)\r\n                                })\r\n                                \r\n                                const totalCountStudent = subject?.map(function(elm, index) {\r\n                                    let count = 0\r\n                                    pageData.forEach(element => {\r\n                                        if (element.markCon.hasOwnProperty(elm.subjectId)) {\r\n                                            ++count\r\n                                        }\r\n                                    });\r\n                                    return (count)\r\n                                })\r\n\r\n                                const totalQuality = subject?.map(function(elm, index) {\r\n                                    let count = 0\r\n                                    pageData.forEach(element => {\r\n                                        if (\r\n                                            element.markCon.hasOwnProperty(elm.subjectId)\r\n                                        ) {\r\n                                            element.markCon[elm.subjectId].type?.includes(\"A\") && ++count\r\n                                            element.markCon[elm.subjectId].type?.includes(\"B\") && ++count\r\n                                        }\r\n                                    });\r\n                                    \r\n                                    return ((count * 100) / pageData.length)\r\n                                })\r\n\r\n                                const totalSuccess = subject?.map(function(elm, index) {\r\n                                    let count = 0\r\n                                    pageData.forEach(element => {\r\n                                        if (\r\n                                            element.markCon.hasOwnProperty(elm.subjectId)\r\n                                        ) {\r\n                                            element.markCon[elm.subjectId].type?.includes(\"A\") && ++count\r\n                                            element.markCon[elm.subjectId].type?.includes(\"B\") && ++count\r\n                                            element.markCon[elm.subjectId].type?.includes(\"C\") && ++count\r\n                                            element.markCon[elm.subjectId].type?.includes(\"D\") && ++count\r\n                                        }\r\n                                    });\r\n                                    \r\n                                    return ((count / pageData.length) * 100)\r\n                                })\r\n                        \r\n                                return (\r\n                                    <>\r\n                                        <Table.Summary.Row>\r\n                                            <Table.Summary.Cell \r\n                                                colSpan={5}\r\n                                            >\r\n                                                A\r\n                                            </Table.Summary.Cell>\r\n                                            { totalA.map(elm => (\r\n                                                <Table.Summary.Cell>\r\n                                                    {elm}\r\n                                                </Table.Summary.Cell>\r\n                                            ))}\r\n                                            <Table.Summary.Cell colSpan={9} />\r\n                                        </Table.Summary.Row>\r\n                                        <Table.Summary.Row>\r\n                                            <Table.Summary.Cell \r\n                                                colSpan={5}\r\n                                            >\r\n                                                B\r\n                                            </Table.Summary.Cell>\r\n                                            { totalB.map(elm => (\r\n                                                <Table.Summary.Cell>\r\n                                                    {elm}\r\n                                                </Table.Summary.Cell>\r\n                                            ))}\r\n                                            <Table.Summary.Cell colSpan={9} />\r\n                                        </Table.Summary.Row>\r\n                                        <Table.Summary.Row>\r\n                                            <Table.Summary.Cell \r\n                                                colSpan={5}\r\n                                            >\r\n                                                C\r\n                                            </Table.Summary.Cell>\r\n                                            { totalC.map(elm => (\r\n                                                <Table.Summary.Cell>\r\n                                                    {elm}\r\n                                                </Table.Summary.Cell>\r\n                                            ))}\r\n                                            <Table.Summary.Cell colSpan={9} />\r\n                                        </Table.Summary.Row>\r\n                                        <Table.Summary.Row>\r\n                                            <Table.Summary.Cell \r\n                                                colSpan={5}\r\n                                            >\r\n                                                D\r\n                                            </Table.Summary.Cell>\r\n                                            { totalD.map(elm => (\r\n                                                <Table.Summary.Cell>\r\n                                                    {elm}\r\n                                                </Table.Summary.Cell>\r\n                                            ))}\r\n                                            <Table.Summary.Cell colSpan={9} />\r\n                                        </Table.Summary.Row>\r\n                                        <Table.Summary.Row>\r\n                                            <Table.Summary.Cell \r\n                                                colSpan={5}\r\n                                            >\r\n                                                F\r\n                                            </Table.Summary.Cell>\r\n                                            { totalF.map(elm => (\r\n                                                <Table.Summary.Cell>\r\n                                                    {elm}\r\n                                                </Table.Summary.Cell>\r\n                                            ))}\r\n                                            <Table.Summary.Cell colSpan={9} />\r\n                                        </Table.Summary.Row>\r\n                                        <Table.Summary.Row>\r\n                                            <Table.Summary.Cell \r\n                                                colSpan={5}\r\n                                            >\r\n                                                Дүгнэгдсэн оюутны тоо\r\n                                            </Table.Summary.Cell>\r\n                                            { totalCountStudent?.map(elm => (\r\n                                                <Table.Summary.Cell>\r\n                                                    {elm}\r\n                                                </Table.Summary.Cell>\r\n                                            ))}\r\n                                            <Table.Summary.Cell colSpan={9} />\r\n                                        </Table.Summary.Row>\r\n                                        <Table.Summary.Row>\r\n                                            <Table.Summary.Cell \r\n                                                colSpan={5}\r\n                                            >\r\n                                                Чанар /%/\r\n                                            </Table.Summary.Cell>\r\n                                            { totalQuality?.map(elm => (\r\n                                                <Table.Summary.Cell>\r\n                                                    {elm.toFixed(2)}\r\n                                                </Table.Summary.Cell>\r\n                                            ))}\r\n                                            <Table.Summary.Cell colSpan={9} />\r\n                                        </Table.Summary.Row>\r\n                                        <Table.Summary.Row>\r\n                                            <Table.Summary.Cell \r\n                                                colSpan={5}\r\n                                            >\r\n                                                Амжилт /%/\r\n                                            </Table.Summary.Cell>\r\n                                            { totalSuccess?.map(elm => (\r\n                                                <Table.Summary.Cell>\r\n                                                    {elm.toFixed(2)}\r\n                                                </Table.Summary.Cell>\r\n                                            ))}\r\n                                            <Table.Summary.Cell colSpan={9} />\r\n                                        </Table.Summary.Row>\r\n                                    </>\r\n                                );\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </Card>\r\n            )}\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default MarkConsolidationTable\r\n","import React from \"react\";\r\nimport MarkConTable from './table';\r\n\r\nconst Index = (props) => {\r\n\r\n    return (\r\n        <MarkConTable title={props.title} /> \r\n    )\r\n}\r\n\r\nexport default Index;\r\n","// This icon file is generated automatically.\nvar DownOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z\" } }] }, \"name\": \"down\", \"theme\": \"outlined\" };\nexport default DownOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport DownOutlinedSvg from \"@ant-design/icons-svg/es/asn/DownOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar DownOutlined = function DownOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: DownOutlinedSvg\n  }));\n};\nDownOutlined.displayName = 'DownOutlined';\nexport default /*#__PURE__*/React.forwardRef(DownOutlined);","import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nexport default function useForceUpdate() {\n  var _React$useReducer = React.useReducer(function (x) {\n    return x + 1;\n  }, 0),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      forceUpdate = _React$useReducer2[1];\n\n  return forceUpdate;\n}","/* eslint-disable no-param-reassign */\nvar cached;\nexport default function getScrollBarSize(fresh) {\n  if (typeof document === 'undefined') {\n    return 0;\n  }\n  if (fresh || cached === undefined) {\n    var inner = document.createElement('div');\n    inner.style.width = '100%';\n    inner.style.height = '200px';\n    var outer = document.createElement('div');\n    var outerStyle = outer.style;\n    outerStyle.position = 'absolute';\n    outerStyle.top = '0';\n    outerStyle.left = '0';\n    outerStyle.pointerEvents = 'none';\n    outerStyle.visibility = 'hidden';\n    outerStyle.width = '200px';\n    outerStyle.height = '150px';\n    outerStyle.overflow = 'hidden';\n    outer.appendChild(inner);\n    document.body.appendChild(outer);\n    var widthContained = inner.offsetWidth;\n    outer.style.overflow = 'scroll';\n    var widthScroll = inner.offsetWidth;\n    if (widthContained === widthScroll) {\n      widthScroll = outer.clientWidth;\n    }\n    document.body.removeChild(outer);\n    cached = widthContained - widthScroll;\n  }\n  return cached;\n}\nfunction ensureSize(str) {\n  var match = str.match(/^(.*)px$/);\n  var value = Number(match === null || match === void 0 ? void 0 : match[1]);\n  return Number.isNaN(value) ? getScrollBarSize() : value;\n}\nexport function getTargetScrollBarSize(target) {\n  if (typeof document === 'undefined' || !target || !(target instanceof Element)) {\n    return {\n      width: 0,\n      height: 0\n    };\n  }\n  var _getComputedStyle = getComputedStyle(target, '::-webkit-scrollbar'),\n    width = _getComputedStyle.width,\n    height = _getComputedStyle.height;\n  return {\n    width: ensureSize(width),\n    height: ensureSize(height)\n  };\n}"],"names":["ALL_SUBJECTS","gql","ALL_SUBJECTS_PAGINATION","ALL_USERS","ALL_EMPLOYEES_ATTANDANCE_BY_RANGE","ALL_EMPLOYEES_COMPARTMENT","ALL_EMPLOYEES","ALL_TEACHERS","ALL_STUDENTS","ALL_CITYS","ALL_DISTRICTS","ALL_PROGRAMS","ALL_SCHOOLS","ALL_SUB_SCHOOLS","ALL_SECTIONS","ALL_CLASSESS","ALL_CLASSTIME","ALL_SCHOOL_YEAR","ALL_PARENTS","SECTION_BY_CLASSES","TRANSFER_BY_STUDENT","ALL_EVENT_TYPES","ALL_EVENTS","ALL_EVENTS_BY_DATE","STUDENT_REPORT","STUDENT_REPORT_SECTION","MARK_CON","MARK_CON_SUBJECT","MARK_CON_STUDENT","ALL_STUDENTS_REPORT","SELECT_STUDENT","SELECT_TEACHER","SELECT_CLASSES","SELECT_SUBJECT","SELECT_PROGRAM","SECTIONS_BY_PROGRAM","SELECT_SECTION","SELECT_STUDENT_PAGINATION","Option","Select","props","useState","list","setList","undefined","student","setStudent","subject","setSubject","classesData","setClassesData","sectionData","setSectionData","programsData","setProgramsData","schoolYear","setSchoolYear","studentIndex","setStudentIndex","subjectIndex","setSubjectIndex","isLoading","setIsLoading","isMarkConFinish","setIsMarkConFinish","schoolyearData","useQuery","data","onCompleted","result","allPrograms","useLazyQuery","allClassess","fetchClasses","sectionsByClasses","fetchSections","fetchPolicy","markconSubject","fetchMarkConSubject","newData","markconStudent","map","std","familyName","name","registerNo","studentCode","studentId","markCon","fetchMarkConStudent","subjectId","fetchMarkCon","networkStatus","Form","form","tableColumns","title","key","render","text","record","index","dataIndex","item","push","width","subjectCode","subjectCredit","useEffect","forEach","stdIn","setTimeout","sub","subIn","length","variables","schoolyear","fixedData","A","B","C","D","F","totalCredit","totalSubject","avgDiam","numAvgDiam","avgPercentage","numAvgPercentage","hasOwnProperty","type","includes","parseInt","percentage","diam","mergeData","layout","onFinish","values","resetFields","gutter","span","label","IntlMessage","id","rules","required","message","showSearch","filterOption","input","option","children","toString","toLowerCase","indexOf","onSelect","e","allSchoolyears","value","season","shouldUpdate","prevValues","currentValues","program","getFieldValue","classes","offset","limit","filter","section","htmlType","className","pagination","columns","size","dataSource","rowKey","bordered","summary","pageData","totalA","elm","count","element","totalB","totalC","totalD","totalF","totalCountStudent","totalQuality","totalSuccess","colSpan","toFixed","DownOutlined","ref","React","AntdIcon","_objectSpread","icon","DownOutlinedSvg","displayName","useForceUpdate","_React$useReducer","x","_slicedToArray","cached","getScrollBarSize","fresh","document","inner","createElement","style","height","outer","outerStyle","position","top","left","pointerEvents","visibility","overflow","appendChild","body","widthContained","offsetWidth","widthScroll","clientWidth","removeChild","ensureSize","str","match","Number","isNaN","getTargetScrollBarSize","target","Element","_getComputedStyle","getComputedStyle"],"sourceRoot":""}