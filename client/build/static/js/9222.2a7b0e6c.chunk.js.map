{"version":3,"file":"static/js/9222.2a7b0e6c.chunk.js","mappings":"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","sources":["components/shared-components/Flex/index.js","graphql/select.js","views/app-views/student/form.js","views/app-views/student/table.js","views/app-views/student/index.js"],"sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Flex = props => {\r\n\tconst { children, className, alignItems, justifyContent, mobileFlex, flexDirection } = props\r\n\tconst getFlexResponsive = () => mobileFlex ? 'd-flex' : 'd-md-flex'\r\n\treturn (\r\n\t\t<div className={`${getFlexResponsive()} ${className} ${flexDirection?('flex-' + flexDirection): ''} ${alignItems?('align-items-' + alignItems):''} ${justifyContent?('justify-content-' + justifyContent):''}` }>\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nFlex.propTypes = {\r\n\tclassName: PropTypes.string,\r\n\talignItems: PropTypes.string,\r\n\tflexDirection: PropTypes.string,\r\n\tjustifyContent: PropTypes.string,\r\n\tmobileFlex: PropTypes.bool\r\n}\r\n\r\nFlex.defaultProps = {\r\n\tmobileFlex: true,\r\n\tflexDirection: 'row',\r\n\tclassName: ''\r\n};\r\n\r\n\r\nexport default Flex\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const SELECT_STUDENT = gql`\r\n    query allStudents ($filter: String) {\r\n        allStudents (filter: $filter) {\r\n            id\r\n            familyName\r\n            name\r\n            studentCode\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const SELECT_TEACHER = gql`\r\n    query allTeachers ($filter: String) {\r\n        allTeachers (filter: $filter) {\r\n            id\r\n            familyName\r\n            name\r\n            teacherCode\r\n        }\r\n    }\r\n`;\r\n\r\n// export const SELECT_SECTION_TEACHER = gql `\r\n//     query allAssistantTeachers ($filter: String) {\r\n//         allAssistantTeachers (filter: $filter) {\r\n//             id\r\n//             familyName\r\n//             name \r\n//             teacherCode\r\n//         }\r\n//     }\r\n// `\r\n\r\nexport const SELECT_CLASSES = gql`\r\n    query allClassess ($filter: String, $program: Int) {\r\n        allClassess (filter: $filter, program: $program) {\r\n            id\r\n            classes\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const SELECT_SUBJECT = gql`\r\n    query allSubjects ($offset: Int!, $limit: Int!, $filter: String) {\r\n        count (appName: \"subject\", modelName: \"Subject\", filter: $filter) {\r\n            count\r\n        }\r\n        allSubjects (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            subject\r\n            content\r\n            createUserid {\r\n                firstName\r\n                lastName\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SELECT_PROGRAM = gql`\r\n    query selectProgram {\r\n        allPrograms {\r\n            id\r\n            program\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SECTIONS_BY_PROGRAM = gql`\r\n    query sectionsByProgram ($program: Int!) {\r\n        sectionsByProgram (program: $program) {\r\n            id\r\n            section \r\n            classes {\r\n                classes\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SELECT_SECTION = gql`\r\n    query sectionsByClasses ($classes: Int!){\r\n        sectionsByClasses (classes: $classes) {\r\n            id \r\n            section\r\n        }\r\n    }\r\n`\r\n\r\nexport const SELECT_STUDENT_PAGINATION = gql`\r\n    query allStudentsPagination (\r\n        $page: Int\r\n        $perPage: Int\r\n        $filter: String = \"\"\r\n    ) {\r\n        allStudentsPagination (\r\n            page: $page\r\n            perPage: $perPage\r\n            filter: $filter\r\n        ) {\r\n            page\r\n            perPage\r\n            pageCount\r\n            totalCount\r\n            records {\r\n                id\r\n                name\r\n                familyName\r\n            }\r\n        }\r\n    }\r\n`","import React, { useState, useEffect } from 'react';\r\nimport { Form, Input, message, Spin, Row, Col, Select, DatePicker } from 'antd';\r\nimport { useMutation, useQuery, useLazyQuery } from '@apollo/client';\r\nimport {\r\n    ALL_PROGRAMS, ALL_USERS, ALL_CITYS, ALL_DISTRICTS, ALL_SCHOOLS,\r\n    ALL_CLASSTIME, ALL_SCHOOL_YEAR\r\n} from 'graphql/all';\r\nimport { ALL_ACTIVITY, ALL_STUDENT_STATUS, ALL_STUDENT_STATUS_EXTRA } from 'graphql/core'\r\nimport { CREATE_STUDENT } from 'graphql/create'\r\nimport { UPDATE_STUDENT } from 'graphql/update'\r\nimport moment from 'moment';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\n// import { ImageSvg } from 'assets/svg/icon';\r\n// import CustomIcon from 'components/util-components/CustomIcon';\r\n// import { BASE_SERVER_URL } from 'configs/AppConfig';\r\nimport { SELECT_CLASSES, SELECT_SECTION } from 'graphql/select';\r\n\r\n// const { Dragger } = Upload;\r\n\r\nfunction StudentForm({ editData, formType, setIsModalVisible, refetch }) {\r\n\r\n    const { Option } = Select;\r\n    const [form] = Form.useForm();\r\n    const { TextArea } = Input;\r\n\r\n    // const [selectedImage, setSelectedImage] = useState();\r\n\r\n    const dateFormat = \"YYYY-MM-DD\";\r\n\r\n    const [createStudent, { loading: studentLoading }] = useMutation(CREATE_STUDENT, {\r\n        onCompleted: data => {\r\n            refetch();\r\n            message.success('Амжилттай хадгаллаа');\r\n            form.resetFields();\r\n            setIsModalVisible(false);\r\n        }\r\n    });\r\n\r\n    // const imageProps = {\r\n    //     accept: '.jpg',\r\n    //     name: 'file',\r\n    //     multiple: false,\r\n    //     listType: \"picture-card\",\r\n    //     showUploadList: false,\r\n    //     beforeUpload: file => {\r\n    //         return false\r\n    //     }\r\n    // };\r\n\r\n    // const onImageChange = (file) => {\r\n    //     if (file) {\r\n    //         setSelectedImage(file.file)\r\n    //     }\r\n    // }\r\n\r\n    // const normFile = (e) => {\r\n    //     if (Array.isArray(e)) {\r\n    //         return e;\r\n    //     }\r\n    //     return e && e.fileList;\r\n    // };\r\n\r\n    const [updateStudent, { loading: editLoading }] = useMutation(UPDATE_STUDENT, {\r\n        onCompleted: data => {\r\n            refetch();\r\n            message.success('Амжилттай хадгаллаа');\r\n            setIsModalVisible(false);\r\n        }\r\n    })\r\n\r\n    // start useQuery\r\n    const { data: activityData } = useQuery(ALL_ACTIVITY);\r\n    const [allClassess, { data: classessData }] = useLazyQuery(SELECT_CLASSES);\r\n    const { data: programData } = useQuery(ALL_PROGRAMS);\r\n    const { data: citysData } = useQuery(ALL_CITYS);\r\n    const { data: districtsData } = useQuery(ALL_DISTRICTS);\r\n    const { data: schoolsData } = useQuery(ALL_SCHOOLS);\r\n    const { data: statusData } = useQuery(ALL_STUDENT_STATUS);\r\n    const { data: extraStatusData } = useQuery(ALL_STUDENT_STATUS_EXTRA);\r\n    const { data: usersData } = useQuery(ALL_USERS);\r\n    const { data: classtimeData } = useQuery(ALL_CLASSTIME);\r\n    const [fetchSection, { data: sectionData }] = useLazyQuery(SELECT_SECTION);\r\n    const { data: schoolYearData } = useQuery(ALL_SCHOOL_YEAR);\r\n\r\n    // end useQuery\r\n\r\n    useEffect(() => {\r\n        if (formType === \"edit\") {\r\n            const newData = {\r\n                username: editData.user.username,\r\n                email: editData.user.email,\r\n                studentCode: editData.studentCode,\r\n                surname: editData.surname,\r\n                familyName: editData.familyName,\r\n                // familyNameMgl: editData.familyNameMgl,\r\n                name: editData.name,\r\n                // nameMgl: editData.nameMgl,\r\n                religion: editData.religion,\r\n                registerNo: editData.registerNo,\r\n                nationality: editData.nationality,\r\n                state: editData.state,\r\n                phone: editData.phone,\r\n                // phone2: editData.phone2,\r\n                address: editData.address,\r\n                citizen: editData.citizen,\r\n                // degree: editData.degree.id,\r\n                activity: editData.activity.id,\r\n                // joinBefore: editData.joinBefore,\r\n                sex: editData.sex,\r\n                classtime: editData.classtime.id,\r\n                birthCity: editData.birthCity.id,\r\n                birthDistrict: editData.birthDistrict.id,\r\n                status: editData.status.id,\r\n                statusExtra: editData.statusExtra.id,\r\n                school: editData.school.id,\r\n                classes: editData.classes.id,\r\n                section: editData.section.id,\r\n                program: editData.program.id,\r\n                joinSchoolyear: editData.joinSchoolyear.id,\r\n                joinDate: moment(editData.joinDate),\r\n                birthdate: moment(editData.birthdate)\r\n            }\r\n            setDistrict(newData.birthCity)\r\n            allClassess({ variables: { program: newData.program, offset: 1, limit: 1, filter: '' } });\r\n            setClasses(newData.program);\r\n            setJoinDay(moment(newData.joinDate).format(\"YYYY-MM-DD\"))\r\n            setBDay(moment(newData.birthdate).format(\"YYYY-MM-DD\"))\r\n            form.setFieldsValue(newData);\r\n        } else if (formType === \"create\") {\r\n            form.resetFields();\r\n        }\r\n    }, [allClassess, form, editData, formType])\r\n\r\n    // Change BirthDistrict\r\n\r\n    const [district, setDistrict] = useState(\"\");\r\n\r\n    const onBirthCityChange = (value) => {\r\n        setDistrict(value);\r\n    };\r\n\r\n    let districtType = null;\r\n\r\n    let districtsOption = null;\r\n\r\n    if (district) {\r\n        districtType = district;\r\n    }\r\n\r\n    if (districtType) {\r\n        districtsOption = districtsData?.allDistricts.filter(District => District.cityID.id === districtType).map(filteredDistrict => (\r\n            <Option key={filteredDistrict.id} value={filteredDistrict.id}>{filteredDistrict.name}</Option>\r\n        ))\r\n    }\r\n\r\n    // end change BirthDistrict\r\n\r\n    // Change BirthDistrict\r\n\r\n\r\n    const [classes, setClasses] = useState(\"\");\r\n\r\n    const programOnChange = (value) => {\r\n        allClassess({ variables: { program: value, offset: 1, limit: 1, filter: '' } });\r\n        setClasses(value);\r\n    }\r\n\r\n    let programType = null;\r\n\r\n    let classesOption = null;\r\n\r\n    if (classes) {\r\n        programType = classes;\r\n    }\r\n\r\n    if (programType) {\r\n        classesOption = classessData?.allClassess.map(filteredClass => (\r\n            <Option key={filteredClass.id} value={filteredClass.id}>{filteredClass.classes}</Option>\r\n        ))\r\n    }\r\n\r\n    // end change BirthDistrict\r\n\r\n\r\n\r\n    const [joinDay, setJoinDay] = useState('');\r\n\r\n    function joinDayOnChange(date) {\r\n        setJoinDay(moment(date).format(\"YYYY-MM-DD\"));\r\n    }\r\n\r\n    const [BDay, setBDay] = useState('');\r\n\r\n    function joinBDayOnChange(date) {\r\n        setBDay(moment(date).format(\"YYYY-MM-DD\"));\r\n    }\r\n\r\n    function userExists(username) {\r\n        return usersData?.allUsers.some(function (el) {\r\n            if (formType === \"edit\" && editData.user.username === username) {\r\n                return false;\r\n            } else {\r\n                return el.username === username;\r\n            }\r\n        });\r\n    }\r\n\r\n    const phoneRegEx = new RegExp(/^[7-9][0-9]{3}[0-9]{4}$/u);\r\n    const registerNumRegEx = new RegExp(/[А-ЯӨҮЁ]{2}(\\d){8}$/u);\r\n\r\n    function onFinish(values) {\r\n        if (formType === 'edit') {\r\n            values.joinDate = joinDay\r\n            values.birthdate = BDay\r\n            values.id = editData.id\r\n            updateStudent({ variables: values })\r\n        } else {\r\n            values.joinDate = joinDay\r\n            values.birthdate = BDay\r\n            createStudent({ variables: values });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Spin spinning={studentLoading || editLoading} tip=\"Ачааллаж байна...\">\r\n            <Form\r\n                id=\"StudentForm\"\r\n                layout={'vertical'}\r\n                form={form}\r\n                name=\"control-hooks\"\r\n                onFinish={onFinish}\r\n                size=\"small\"\r\n            >\r\n                <Row gutter={[16, 24]}>\r\n                    <Col className=\"gutter-row\" span={12}>\r\n                        <Form.Item name=\"school\" label={<IntlMessage id=\"school\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select>\r\n                                {schoolsData?.allSchools.map((school, index) => (\r\n                                    <Option key={index} value={school.id}>{school.name}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"program\" label={<IntlMessage id=\"program\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select onChange={programOnChange}>\r\n                                {programData?.allPrograms.map((program, index) => (\r\n                                    <Option key={index} value={program.id}>{program.program}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"classes\" label={<IntlMessage id=\"classes\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select onChange={e => fetchSection({ variables: { classes: e } })}>\r\n                                {classesOption}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"section\" label={<IntlMessage id=\"section\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select>\r\n                                {sectionData?.sectionsByClasses.map((section, index) => (\r\n                                    <Option key={index} value={section.id}>{section.section}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"studentCode\" label={<IntlMessage id=\"studentCode\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"status\" label={<IntlMessage id=\"status\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select>\r\n                                {statusData?.allStudentStatuss.map((status, index) => (\r\n                                    <Option key={index} value={status.id}>{status.name}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"statusExtra\" label={<IntlMessage id=\"student-status-extra\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select>\r\n                                {extraStatusData?.allStudentStatusExtras.map((extra, index) => (\r\n                                    <Option key={index} value={extra.id}>{extra.name}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"joinDate\" label={<IntlMessage id=\"joinDate\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <DatePicker style={{ width: '100%' }} onChange={joinDayOnChange} format={dateFormat} />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"nationality\" label={<IntlMessage id=\"nationality\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"phone\" label={<IntlMessage id=\"parent_phone\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                            {\r\n                                validator(rule, value) {\r\n                                    if (phoneRegEx.test(value)) {\r\n                                        return Promise.resolve();\r\n                                    }\r\n                                    return Promise.reject('Утасны дугаар буруу байна!');\r\n                                },\r\n                            }\r\n                        ]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"state\" label={<IntlMessage id=\"state\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"classtime\" label={<IntlMessage id=\"classtime\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select>\r\n                                {classtimeData?.allClasstimes.map((classtime, index) => (\r\n                                    <Option key={index} value={classtime.id}>{classtime.name}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"address\" label={<IntlMessage id=\"address\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <TextArea rows={2} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col className=\"gutter-row\" span={12}>\r\n                        <Form.Item name=\"religion\" label={<IntlMessage id=\"religion\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"surname\" label={<IntlMessage id=\"surname\" />} rules={[{ required: true }]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"familyName\" label={<IntlMessage id=\"familyName\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"name\" label={<IntlMessage id=\"name\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"registerNo\" label={<IntlMessage id=\"registerNo\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                            {\r\n                                validator(rule, value) {\r\n                                    if (!registerNumRegEx.test(value)) {\r\n                                        return Promise.reject('Регистерийн дугаар буруу байна!');\r\n                                    }\r\n                                    return Promise.resolve();\r\n                                },\r\n                            },\r\n                        ]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"birthdate\" label={<IntlMessage id=\"birthdate\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <DatePicker style={{ width: '100%' }} onChange={joinBDayOnChange} format={dateFormat} />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"sex\" label={<IntlMessage id=\"sex\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select>\r\n                                <Option key=\"0\" value=\"Эрэгтэй\"><IntlMessage id=\"sex.male\" /></Option>\r\n                                <Option key=\"1\" value=\"Эмэгтэй\"><IntlMessage id=\"sex.female\" /></Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"birthCity\" label={<IntlMessage id=\"birthCity\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select onChange={onBirthCityChange}>\r\n                                {citysData?.allCitys.map((city, index) => (\r\n                                    <Option key={index} value={city.id}>{city.name}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"birthDistrict\" label={<IntlMessage id=\"birthDistrict\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select>\r\n                                {districtsOption}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"activity\" label={<IntlMessage id=\"activity\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select>\r\n                                {activityData?.allActivitys.map((activity, index) => (\r\n                                    <Option key={index} value={activity.id}>{activity.name}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"joinSchoolyear\" label={<IntlMessage id=\"joinSchoolyear\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select>\r\n                                {schoolYearData?.allSchoolyears.map((year, index) => (\r\n                                    <Option key={index} value={year.id}>{year.schoolyear} {year.season}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"username\" label={<IntlMessage id=\"username\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                            {\r\n                                validator(rule, value) {\r\n                                    if (userExists(value)) {\r\n                                        return Promise.reject('Нэвтрэх нэр бүртгэлтэй байна');\r\n                                    }\r\n                                    return Promise.resolve();\r\n                                },\r\n                            },\r\n                        ]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        {formType === 'create' &&\r\n                            <Form.Item name=\"password\" label={<IntlMessage id=\"password\" />} rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: <IntlMessage id=\"form.required\" />\r\n                                },\r\n                                {\r\n                                    min: 8,\r\n                                    message: 'Нууц үг 8-аас урттай дээш байх ёстой'\r\n                                },\r\n                                ({ getFieldValue }) => ({\r\n                                    validator(rule, value) {\r\n                                        if (!value || getFieldValue('username') === value) {\r\n                                            return Promise.reject('Нэвтрэх нэр нууц үг хоёр ижил байх боломгүй!');\r\n                                        }\r\n                                        return Promise.resolve();\r\n                                    },\r\n                                }),\r\n                            ]}>\r\n                                <Input.Password />\r\n                            </Form.Item>\r\n                        }\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </Spin>\r\n    );\r\n};\r\n\r\nexport default StudentForm","import React, { useState, useEffect, useContext } from 'react'\r\nimport { Modal, message, Button, Table, Card, Input, Select } from 'antd';\r\nimport { DeleteTwoTone, EditTwoTone, PlusCircleOutlined, SearchOutlined } from '@ant-design/icons';\r\nimport utils from 'utils'\r\nimport StudentForm from './form'\r\nimport { useMutation, useLazyQuery } from '@apollo/client';\r\nimport { DELETE_STUDENT } from 'graphql/delete';\r\nimport { ALL_STUDENTS } from 'graphql/all';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport ChangePassword from 'components/shared-components/ChangePassword';\r\nimport Flex from 'components/shared-components/Flex';\r\nimport { UserContext } from 'hooks/UserContextProvider';\r\nimport { SELECT_CLASSES, SELECT_PROGRAM, SELECT_SECTION } from 'graphql/select';\r\n\r\nconst { confirm } = Modal;\r\nconst { Option } = Select\r\n\r\nfunction  StudentsTable (props) {\r\n    \r\n\tconst [list, setList] = useState([])\r\n\r\n\tconst [isModalVisible, setIsModalVisible] = useState(false);\r\n\tconst [editData, setEditData] = useState([]);\r\n\tconst [formType, setFormType] = useState(\"\");\r\n\r\n    const [filter, setFilter] = useState('');\r\n\tconst [program, setProgram] = useState(0)\r\n\tconst [classes, setClasses] = useState(0)\r\n\tconst [section, setSection] = useState(0)\r\n\r\n\tconst [programList, setProgramList] = useState([])\r\n\tconst [classesList, setListClasses] = useState([])\r\n\tconst [sectionList, setListSection] = useState([])\r\n\r\n\tconst { user } = useContext(UserContext)\r\n\r\n\tconst [fetchStudent, { loading, refetch }] = useLazyQuery(ALL_STUDENTS, {\r\n\t\tvariables: { variables: { filter: filter, classes: classes, section: section } },\r\n        onCompleted: data => {\r\n            setList(data.allStudents);\r\n        }\r\n\t});\r\n\r\n\t// program: program,\r\n\r\n\tconst [fetchProgram] = useLazyQuery(SELECT_PROGRAM, {\r\n\t\tonCompleted: data => {\r\n\t\t\tsetProgramList(data.allPrograms);\r\n\t\t}\r\n\t})\r\n\r\n\tconst [fetchClasses] = useLazyQuery(SELECT_CLASSES, {\r\n\t\tvariables: { variables: { filter: '', program: program } },\r\n\t\tonCompleted: data => {\r\n\t\t\tsetListClasses(data.allClassess);\r\n\t\t}\r\n\t})\r\n\r\n\tconst [fetchSection] = useLazyQuery(SELECT_SECTION, {\r\n\t\tonCompleted: data => {\r\n\t\t\tsetListSection(data.sectionsByClasses);\r\n\t\t}\r\n\t})\r\n\r\n\t// const [fetchSection] = useLazyQuery(SECTION_BY_CLASSES, {\r\n\t// \tvariables: { variables: { classes: classes } },\r\n\t// \tonCompleted: data => {\r\n\t// \t\tconsole.log(data);\r\n\t// \t}\r\n\t// })\r\n\r\n\tconst [deleteStudent] = useMutation(DELETE_STUDENT, {\r\n\t\tonCompleted: data => {\r\n            refetch();\r\n            message.success('Амжилттай устлаа');\r\n\t\t}\r\n\t});\r\n\r\n    useEffect(() => {\r\n\t\tif (program !== 0 || user.isStudent === true || user.isTeacher === true || filter !== '') {\r\n\t\t\tfetchStudent({ variables: { filter: filter, program: program, classes: classes, section: section } })\r\n\t\t}\r\n\r\n\t\tif (user.isStudent !== true && user.isTeacher !== true) {\r\n\t\t\tfetchProgram();\r\n\t\t}\r\n    }, [user, filter, program, classes, section, fetchProgram, fetchStudent])\r\n\r\n\tuseEffect(() => {\r\n\t\tif (program !== 0) {\r\n\t\t\tfetchClasses()\r\n\t\t}\r\n\t}, [program, fetchClasses])\r\n\t\r\n\r\n    const showModal = () => {\r\n\t\tsetFormType(\"create\");\r\n      \tsetIsModalVisible(true);\r\n    };\r\n\r\n\tconst editRow = row => {\r\n\t\tsetEditData(row);\r\n\t\tsetFormType(\"edit\");\r\n\t\tsetIsModalVisible(true);\r\n\t};\r\n\r\n\tfunction deleteRow(row) {\r\n\t\tconfirm({\r\n\t\t  title: \"Устгах уу?\",\r\n\t\t  okText: \"Устгах\",\r\n\t\t  okType: 'danger',\r\n\t\t  cancelText: \"Болих\",\r\n\t\t  onOk() {\r\n\t\t\tdeleteStudent({ variables: { id: row.id } }); \r\n\t\t  },\r\n\t\t});\r\n\t}\r\n\r\n    const handleCancel = () => {\r\n      setIsModalVisible(false);\r\n    };\r\n\r\n\tconst onSearch = e => {\r\n        const value = e.currentTarget.value\r\n        setFilter(value)\r\n    }\r\n\r\n\tconst tableColumns = [\r\n\t\t{\r\n\t\t\tkey: 'studentCode',\r\n\t\t\ttitle: <IntlMessage id=\"studentCode\" />,\r\n\t\t\tdataIndex: 'studentCode',\r\n\t\t\twidth: '8vw',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'studentCode')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'classes',\r\n\t\t\ttitle: <IntlMessage id=\"classes\" />,\r\n\t\t\tdataIndex: ['classes', 'classes'],\r\n\t\t\twidth: '10vw',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'classes'),\r\n\t\t\trender: (_, elm) => (\r\n\t\t\t\t<span>{elm.classes.classes} - {elm.section.section} <br/></span>\r\n            )\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'familyName',\r\n\t\t\ttitle: <IntlMessage id=\"familyName\" />,\r\n\t\t\tdataIndex: 'familyName',\r\n\t\t\twidth: '10vw',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'familyName')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'name',\r\n\t\t\ttitle: <IntlMessage id=\"name\" />,\r\n\t\t\tdataIndex: 'name',\r\n\t\t\twidth: '10vw',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'name')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'registerNo',\r\n\t\t\ttitle: <IntlMessage id=\"registerNo\" />,\r\n\t\t\tdataIndex: 'registerNo',\r\n\t\t\twidth: '10vw',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'registerNo')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'phone',\r\n\t\t\ttitle: <IntlMessage id=\"phone\" />,\r\n\t\t\tdataIndex: 'phone',\r\n\t\t\twidth: '10vw',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'phone'),\r\n\t\t\trender: text => <span>{text.substr(0, 4) + `-` + text.substr(4, 9)}</span>,\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'address',\r\n\t\t\ttitle: <IntlMessage id=\"address\" />,\r\n\t\t\tdataIndex: 'address',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'address')\r\n\t\t}\r\n\t];\r\n\r\n\tif (props.permissions.edit === true || props.permissions.destroy === true) {\r\n\t\ttableColumns.push(\r\n\t\t\t{\r\n\t\t\t\tkey: 'actions',\r\n\t\t\t\ttitle: <IntlMessage id=\"main.action\" />,\r\n\t\t\t\twidth: '15vw',\r\n\t\t\t\tdataIndex: 'actions',\r\n\t\t\t\trender: (_, elm) => (\r\n\t\t\t\t\t<div className=\"text-center\">\r\n\t\t\t\t\t\t{ props.permissions.password &&\r\n\t\t\t\t\t\t\t<ChangePassword user={elm.user.id} />\r\n\t\t\t\t\t\t}\r\n                        {/* <Button size=\"small\" onClick={() => history.push({pathname: '/app/student/transfer-student', state: {student: elm}})} type=\"text\" icon={<SwapOutlined />} > <IntlMessage id=\"transfer-student\" /></Button> */}\r\n\t\t\t\t\t\t{ props.permissions.edit === true &&\r\n\t\t\t\t\t\t\t<Button size=\"small\" onClick={() => editRow(elm)} type=\"text\" icon={<EditTwoTone twoToneColor=\"#ffdb00\"/>} > <IntlMessage id=\"edit\" /></Button>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t{ props.permissions.destroy === true &&\r\n\t\t\t\t\t\t\t<Button size=\"small\" onClick={() => deleteRow(elm)} type=\"text\" icon={<DeleteTwoTone twoToneColor=\"#f42f2f\"/>} > <IntlMessage id=\"delete\" /></Button>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n\r\n\tfunction onProgramChange(value) {\r\n\t\tsetProgram(value);\r\n\t}\r\n\r\n\tfunction onClassesChange(value) {\r\n\t\tsetClasses(value)\r\n\t\tfetchSection({ variables: { classes: value } })\r\n\t}\r\n\r\n\tfunction onSectionChange(value) {\r\n\t\tsetSection(value)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Modal \r\n                title={ formType === `create` ? <IntlMessage id=\"add_kid\" /> : <IntlMessage id=\"edit\" />}\r\n                visible={isModalVisible} \r\n\t\t\t\twidth={'80vw'}\r\n\t\t\t\tokText={<IntlMessage id=\"main.okText\" />}\r\n\t\t\t\tcancelText={<IntlMessage id=\"main.cancelText\" />}\r\n\t\t\t\tonCancel={handleCancel}\r\n\t\t\t\tokButtonProps={{form:'StudentForm', key: 'submit', htmlType: 'submit'}}\r\n            >\r\n                <StudentForm\r\n                    refetch={refetch}\r\n\t\t\t\t\tformType={formType} \r\n\t\t\t\t\teditData={editData} \r\n\t\t\t\t\tsetIsModalVisible={setIsModalVisible}\r\n\t\t\t\t/>\r\n            </Modal>\r\n\t\t\t<Card>\r\n\t\t\t\t<Flex alignItems=\"center\" justifyContent=\"between\" mobileFlex={false}>\r\n\t\t\t\t\t<Flex className=\"mb-1\" mobileFlex={false}>\r\n\t\t\t\t\t\t<div className=\"mr-md-3 mb-3\">\r\n\t\t\t\t\t\t\t<Input placeholder={'Хайх'} prefix={<SearchOutlined />} onChange={e => onSearch(e)}/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Flex>\r\n\t\t\t\t\t{ props.permissions.create === true &&\r\n\t\t\t\t\t\t<div className=\"mr-md-3 mb-3 \">\r\n\t\t\t\t\t\t\t<Button onClick={showModal} type=\"primary\" icon={<PlusCircleOutlined />} block> <IntlMessage id=\"add_kid\" /></Button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t</Flex>\r\n\t\t\t\t\r\n\t\t\t\t\t{user.isTeacher === false && \r\n\t\t\t\t\t<div className='grid gap-2 mb-4 md:grid-cols-3' >\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<span className='p-1'><IntlMessage id=\"program\" /></span>\r\n\t\t\t\t\t\t<Select className='w-full' onChange={onProgramChange} >\r\n\t\t\t\t\t\t\t{ programList.map((item, index) => (\r\n\t\t\t\t\t\t\t\t<Option key={index} value={item.id} >{item.program}</Option>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<span className='p-1'><IntlMessage id=\"classes\" /></span>\r\n\t\t\t\t\t\t<Select className='w-full' onChange={onClassesChange}>\r\n\t\t\t\t\t\t\t{ classesList.map((item, index) => (\r\n\t\t\t\t\t\t\t\t<Option key={index} value={item.id} >{item.classes}</Option>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<span className='p-1'><IntlMessage id=\"section\" /></span>\r\n\t\t\t\t\t\t<Select className='w-full' onChange={onSectionChange}>\r\n\t\t\t\t\t\t\t{ sectionList.map((item, index) => (\r\n\t\t\t\t\t\t\t\t<Option key={index} value={item.id} >{item.section}</Option>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t<div className=\"table-responsive\">\r\n\t\t\t\t\t<Table\r\n\t\t\t\t\t\tsize=\"small\"\r\n\t\t\t\t\t\tcolumns={tableColumns} \r\n\t\t\t\t\t\tdataSource={list}\r\n\t\t\t\t\t\trowKey='id' \r\n\t\t\t\t\t\tbordered\r\n\t\t\t\t\t\tloading={loading}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</Card>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default StudentsTable\r\n","import React from \"react\";\r\nimport StudentsTable from './table';\r\nimport { CheckPer } from 'hooks/checkPermission';\r\nimport Loading from \"components/shared-components/Loading\";\r\n\r\nconst Index = (props) => {\r\n\r\n    const create = CheckPer('add_student');\r\n    const edit = CheckPer('change_student');\r\n    const destroy = CheckPer('delete_student');\r\n    const password = CheckPer('change_user_password');\r\n\r\n    const permissions = {\r\n        create: create,\r\n        edit: edit,\r\n        destroy: destroy,\r\n        password: password\r\n    }\r\n\r\n    if (Object.values(permissions).indexOf('loading') > -1) {\r\n        return <Loading cover=\"content\" />\r\n    }\r\n\r\n    return (\r\n        <StudentsTable title={props.title} permissions={permissions} />\r\n    )\r\n}\r\n\r\nexport default Index;\r\n"],"names":["Flex","props","children","className","alignItems","justifyContent","mobileFlex","flexDirection","defaultProps","SELECT_STUDENT","gql","SELECT_TEACHER","SELECT_CLASSES","SELECT_SUBJECT","SELECT_PROGRAM","SECTIONS_BY_PROGRAM","SELECT_SECTION","SELECT_STUDENT_PAGINATION","editData","formType","setIsModalVisible","refetch","Option","Select","Form","form","TextArea","Input","dateFormat","useMutation","CREATE_STUDENT","onCompleted","data","message","resetFields","createStudent","studentLoading","loading","UPDATE_STUDENT","updateStudent","editLoading","activityData","useQuery","ALL_ACTIVITY","useLazyQuery","allClassess","classessData","programData","ALL_PROGRAMS","citysData","ALL_CITYS","districtsData","ALL_DISTRICTS","schoolsData","ALL_SCHOOLS","statusData","ALL_STUDENT_STATUS","extraStatusData","ALL_STUDENT_STATUS_EXTRA","usersData","ALL_USERS","classtimeData","ALL_CLASSTIME","fetchSection","sectionData","schoolYearData","ALL_SCHOOL_YEAR","useEffect","newData","username","user","email","studentCode","surname","familyName","name","religion","registerNo","nationality","state","phone","address","citizen","activity","id","sex","classtime","birthCity","birthDistrict","status","statusExtra","school","classes","section","program","joinSchoolyear","joinDate","moment","birthdate","setDistrict","variables","offset","limit","filter","setClasses","setJoinDay","format","setBDay","setFieldsValue","useState","district","districtType","districtsOption","allDistricts","District","cityID","map","filteredDistrict","value","programType","classesOption","filteredClass","joinDay","BDay","phoneRegEx","RegExp","registerNumRegEx","spinning","tip","layout","onFinish","values","size","gutter","span","label","rules","required","allSchools","index","onChange","allPrograms","e","sectionsByClasses","allStudentStatuss","allStudentStatusExtras","extra","style","width","date","validator","rule","test","Promise","resolve","reject","allClasstimes","rows","allCitys","city","allActivitys","allSchoolyears","year","schoolyear","season","allUsers","some","el","min","getFieldValue","confirm","Modal","list","setList","isModalVisible","setEditData","setFormType","setFilter","setProgram","setSection","programList","setProgramList","classesList","setListClasses","sectionList","setListSection","useContext","UserContext","ALL_STUDENTS","allStudents","fetchStudent","fetchProgram","fetchClasses","DELETE_STUDENT","deleteStudent","isStudent","isTeacher","tableColumns","key","title","IntlMessage","dataIndex","sorter","a","b","utils","render","_","elm","text","substr","permissions","edit","destroy","push","password","ChangePassword","onClick","type","icon","EditTwoTone","twoToneColor","row","okText","okType","cancelText","onOk","DeleteTwoTone","visible","onCancel","okButtonProps","htmlType","placeholder","prefix","SearchOutlined","currentTarget","onSearch","create","PlusCircleOutlined","block","item","columns","dataSource","rowKey","bordered","CheckPer","Object","indexOf","Loading","cover"],"sourceRoot":""}