{"version":3,"file":"static/js/2315.09c588dd.chunk.js","mappings":"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","sources":["components/shared-components/AsyncTable/index.js","components/shared-components/Flex/index.js","graphql/create.js","graphql/delete.js","graphql/select.js","views/app-views/parent/form.js","views/app-views/parent/table.js","views/app-views/parent/index.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Button, Card, Input, Pagination, Table } from 'antd'\r\nimport { PlusCircleOutlined, SearchOutlined } from '@ant-design/icons';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport Flex from '../Flex';\r\n\r\nconst AsyncTable = ({ fetchData, loading, columns, data, permissions, showModal }) => {\r\n\r\n    const [filter, setFilter] = useState('');\r\n\r\n    const triggerFetch = (page, pageSize) => {\r\n        var start = 0;\r\n        var end = pageSize;\r\n        if (page !== 1) {\r\n            start = (page * pageSize) - pageSize\r\n            end = pageSize * page\r\n        }\r\n        fetchData({ variables: { offset: start, limit: end, filter: filter, program: 0 } })\r\n    }\r\n\r\n    const onPageChange = (page, pageSize) => {\r\n        triggerFetch(page, pageSize);\r\n    }\r\n\r\n    const onSearch = e => {\r\n        const value = e.currentTarget.value\r\n        fetchData({ variables: { offset: 0, limit: 10, filter: value, program: 0 } })\r\n        setFilter(value)\r\n    }\r\n\r\n    return (\r\n\t\t<Card>\r\n            <Flex alignItems=\"center\" justifyContent=\"between\" mobileFlex={false}>\r\n                <Flex className=\"mb-1\" mobileFlex={false}>\r\n                    <div className=\"mr-md-3 mb-3\">\r\n                        <Input placeholder={'Хайх'} prefix={<SearchOutlined />} onChange={e => onSearch(e)}/>\r\n                    </div>\r\n                </Flex>\r\n                { permissions.create === true &&\r\n                    <div className=\"mr-md-3 mb-3\">\r\n                        <Button onClick={showModal} type=\"primary\" icon={<PlusCircleOutlined />} block> <IntlMessage id=\"add_new\" /></Button>\r\n                    </div>\r\n                }\r\n            </Flex>\r\n            <div className=\"table-responsive\">\r\n                <Table \r\n                    // pagination={false}\r\n                    size=\"small\"\r\n                    columns={columns} \r\n                    dataSource={data}\r\n                    rowKey='id' \r\n                    bordered\r\n                    loading={loading}\r\n                />\r\n                {/* <Pagination \r\n                    className='text-right mt-4' \r\n                    total={count} \r\n                    onChange={onPageChange}\r\n                /> */}\r\n            </div>\r\n        </Card>    \r\n    )\r\n}\r\n\r\nexport default AsyncTable","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Flex = props => {\r\n\tconst { children, className, alignItems, justifyContent, mobileFlex, flexDirection } = props\r\n\tconst getFlexResponsive = () => mobileFlex ? 'd-flex' : 'd-md-flex'\r\n\treturn (\r\n\t\t<div className={`${getFlexResponsive()} ${className} ${flexDirection?('flex-' + flexDirection): ''} ${alignItems?('align-items-' + alignItems):''} ${justifyContent?('justify-content-' + justifyContent):''}` }>\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nFlex.propTypes = {\r\n\tclassName: PropTypes.string,\r\n\talignItems: PropTypes.string,\r\n\tflexDirection: PropTypes.string,\r\n\tjustifyContent: PropTypes.string,\r\n\tmobileFlex: PropTypes.bool\r\n}\r\n\r\nFlex.defaultProps = {\r\n\tmobileFlex: true,\r\n\tflexDirection: 'row',\r\n\tclassName: ''\r\n};\r\n\r\n\r\nexport default Flex\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const CREATE_SCHOOL = gql `\r\n    mutation createSchool($name: String, $nameMgl: String) {\r\n      createSchool(name: $name, nameMgl: $nameMgl) {\r\n        school {\r\n          id\r\n          name\r\n          nameMgl\r\n        }\r\n      }\r\n    }\r\n`;\r\n\r\nexport const CREATE_SUB_SCHOOL = gql `\r\n    mutation createSubSchool($name: String, $nameMgl: String, $school: Int!){\r\n      createSubSchool(name: $name, nameMgl: $nameMgl, school: $school) {\r\n        subSchool {\r\n          id\r\n          name\r\n          nameMgl \r\n          school {\r\n            id\r\n          }\r\n        }\r\n      }\r\n    }\r\n`;\r\n\r\nexport const REGISTER = gql `\r\n    mutation register($email: String!, $username: String!, $isTeacher: Boolean!, $isStudent: Boolean!, $password1: String!, $password2: String!){\r\n      register(email: $email, username: $username, isTeacher: $isTeacher, isStudent: $isStudent, password1: $password1, password2: $password2) {\r\n          success\r\n          errors\r\n          token\r\n      } \r\n    }\r\n\r\n`;\r\n\r\nexport const CREATE_TEACHER = gql `\r\n    mutation createTeacher($address: String, $birthCity: Int, $birthDistrict: Int, $birthdate: String, $degree: Int,\r\n                            $familyName: String, $joinBefore: String, $joinDate: String, $name: String, $phone: String, $phone2: String,\r\n                            $registerNo: String, $school: Int, $sex: String, $status: Int, $subSchool: Int, $teacherCode: String!,\r\n                            $username: String!, $password: String!, $email: String!, $access: String!\r\n                            # $user: Int\r\n                            ) {\r\n      createTeacher(address: $address, birthCity: $birthCity, birthDistrict: $birthDistrict, birthdate: $birthdate, degree: $degree,\r\n                             familyName: $familyName, joinBefore: $joinBefore, joinDate: $joinDate, name: $name, phone: $phone, phone2: $phone2, \r\n                            registerNo: $registerNo, school: $school, sex: $sex, status: $status, subSchool: $subSchool, \r\n                            teacherCode: $teacherCode, access: $access,\r\n                            username: $username, password: $password, email: $email\r\n                            # user: $user \r\n                            ) {\r\n        teacher {\r\n          id\r\n        }\r\n      }\r\n    }\r\n`;\r\n\r\nexport const CREATE_EMPLOYEE = gql `\r\n    mutation createEmployee(\r\n                $address: String\r\n                $birthCity: Int\r\n                $birthDistrict: Int\r\n                $birthdate: String\r\n                $email: String!\r\n                $employeeCode: String!\r\n                $familyName: String\r\n                $group: Int\r\n                $name: String\r\n                $password: String!\r\n                $phone: String\r\n                $phone2: String\r\n                $photo: Upload\r\n                $registerNo: String\r\n                $sex: String\r\n                $status: Int\r\n                $compartment: Int\r\n                $username: String!\r\n              ) {\r\n      createEmployee(\r\n                address: $address\r\n                birthCity: $birthCity\r\n                birthDistrict: $birthDistrict\r\n                birthdate: $birthdate\r\n                email: $email\r\n                employeeCode: $employeeCode\r\n                familyName: $familyName\r\n                group: $group\r\n                name: $name\r\n                password: $password\r\n                phone: $phone\r\n                phone2: $phone2\r\n                photo: $photo\r\n                compartment: $compartment\r\n                registerNo: $registerNo\r\n                sex: $sex\r\n                status: $status\r\n                username: $username\r\n          ) {\r\n          employee {\r\n          id\r\n        }\r\n      }\r\n    }\r\n`;\r\n\r\nexport const CREATE_STUDENT = gql `\r\n    mutation createStudent($activity: Int, $address: String, $birthCity: Int, $birthDistrict: Int, $birthdate: String,\r\n                            $classes: Int, $classtime: Int, $familyName: String, $joinDate: String,\r\n                            $joinSchoolyear: String, $name: String, $nationality: String, $phone: String, $program: Int, \r\n                            $registerNo: String, $religion: String, $school: Int, $section: Int, $sex: String, $state: String, $status: Int, \r\n                            $statusExtra: Int, $surname: String, $studentCode: String,\r\n                            $username: String!, $password: String!) {\r\n      createStudent(activity: $activity, address: $address, birthCity: $birthCity, birthDistrict: $birthDistrict, birthdate: $birthdate, \r\n                    classes: $classes, familyName: $familyName, joinDate: $joinDate, name: $name, phone: $phone, \r\n                    registerNo: $registerNo, religion: $religion, school: $school, sex: $sex, status: $status,\r\n                    surname: $surname, studentCode: $studentCode, classtime: $classtime, joinSchoolyear: $joinSchoolyear, \r\n                    nationality: $nationality, program: $program, section: $section, state: $state, statusExtra: $statusExtra,\r\n                    username: $username, password: $password, email: \"test@test.mn\") {\r\n        student {\r\n          id\r\n        }\r\n      }\r\n    }\r\n`;\r\n\r\nexport const CREATE_SECTION = gql `\r\n  mutation createSection($classes: Int, $maxStudentNum: Int, $program: Int, $teacher: Int,  $school: Int, $section: String) {\r\n    createSection(classes: $classes, program: $program, school: $school, section: $section, maxStudentNum: $maxStudentNum, teacher: $teacher) {\r\n      section {\r\n        section\r\n      }\r\n    }\r\n  }\r\n`\r\nexport const CREATE_CLASSES = gql `\r\n  mutation createClasses($activity: Int, $classes: String,\r\n                          $program: Int, $school: Int, $status: String) {\r\n    createClasses(activity: $activity, classes: $classes,\r\n                  program: $program, school: $school, status: $status) {\r\n      classes {\r\n        classes\r\n      }\r\n    }\r\n  }\r\n`\r\nexport const CREATE_PROGRAM = gql `\r\n    mutation createProgram($program: String, $programMgl: String,  \r\n                           $status: String, $maxStudentNum: Int, $school: Int, $subSchool: Int) {\r\n      createProgram(program: $program, programMgl: $programMgl,  \r\n                    status: $status, maxStudentNum: $maxStudentNum, school: $school, subSchool: $subSchool) {\r\n        program {\r\n          id\r\n        }\r\n      }\r\n    }\r\n`;\r\n\r\nexport const CREATE_SUBJECT = gql `\r\n  mutation createSubject($credit: String, $subject: String, $content: String, $school: Int, $subSchool: Int) {\r\n    createSubject(credit: $credit, subject: $subject, school: $school, content: $content, subSchool: $subSchool) {\r\n      subject {\r\n        credit\r\n      }\r\n    }\r\n  }\r\n`\r\nexport const CREATE_PROGRAM_SUBJECT = gql `\r\n  mutation createProgramSubject($program: Int, $subject: Int) {\r\n    createProgramSubject(program: $program, subject: $subject) {\r\n      programSubjectType {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CREATE_ROUTINE_STUDENT = gql `\r\n  mutation createRoutineStudent ($routine: Int, $studentCode: String, $section: Int) {\r\n    createRoutineStudent (routine: $routine, studentCode: $studentCode, section: $section) {\r\n      routineStudent {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const CREATE_PARENT = gql `\r\n    mutation createParent ($address: String, $familyName: String, $name: String, $phone: String, $profession: String, $student: Int) {\r\n        createParent (address: $address, familyName: $familyName, name: $name, phone: $phone, profession: $profession, student: $student) {\r\n            parent {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_EVENT_TYPE = gql `\r\n    mutation createEventType ($color: String, $name: String) {\r\n        createEventType (color: $color, name: $name) {\r\n            eventType {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_EVENT = gql`\r\n    mutation createEvent ($content: String, $description: String, $endAt: String, $eventType: Int, $startAt: String, $title: String) {\r\n        createEvent (content: $content, description: $description, endAt: $endAt, eventType: $eventType, startAt: $startAt, title: $title) {\r\n            event {\r\n                title\r\n            }\r\n        }\r\n    }\r\n`;","import { gql } from '@apollo/client'\r\n\r\nexport const DELETE_CITY = gql `\r\n    mutation deleteCity($id: ID!){\r\n        deleteCity(id: $id){\r\n            city{\r\n              name\r\n              code\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const DELETE_USER = gql `\r\n    mutation deleteAccount($username: String) {\r\n        deleteAccount(username: $username) {\r\n            account {\r\n                username\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const DELETE_TEACHER = gql `\r\n    mutation deleteTeacher($id: ID!){\r\n      deleteTeacher(id: $id){\r\n            teacher{\r\n              name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_EMPLOYEES = gql `\r\n  mutation deleteEmployee($id: ID){\r\n    deleteEmployee(id: $id){\r\n      employee{\r\n        name\r\n      }\r\n    }\r\n  }\r\n  `;\r\n\r\nexport const DELETE_SUBJECT = gql `\r\n  mutation deleteSubject ($id: ID) {\r\n    deleteSubject (id: $id) {\r\n      subject {\r\n        credit\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const DELETE_STUDENT = gql `\r\n    mutation deleteStudent($id: ID!){\r\n      deleteStudent(id: $id){\r\n            student{\r\n              surname\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const DELETE_SUB_SCHOOL = gql `\r\n  mutation deleteSubSchool($id: ID){\r\n    deleteSubSchool(id: $id){\r\n      subSchool{\r\n        name\r\n      }\r\n    }\r\n}\r\n`\r\n\r\nexport const DELETE_SCHOOL = gql `\r\n  mutation deleteSchool($id: ID!){\r\n    deleteSchool(id: $id){\r\n      school{\r\n        name\r\n      }\r\n    }\r\n}\r\n`\r\n\r\nexport const DELETE_SECTION = gql `\r\n  mutation deleteSection($id: ID){\r\n    deleteSection(id: $id){\r\n      section{\r\n        section\r\n      }\r\n    }\r\n}\r\n`\r\n\r\nexport const DELETE_CLASS = gql `\r\n  mutation deleteClasses($id: ID!){\r\n    deleteClasses(id: $id){\r\n      classes{\r\n        classes\r\n      }\r\n    }\r\n}\r\n`\r\n\r\nexport const DELETE_PROGRAM = gql `\r\n    mutation deleteProgram($id: ID!){\r\n        deleteProgram(id: $id){\r\n            program{\r\n                program\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_ROUTINE = gql `\r\n    mutation deleteRoutine ($id: ID) {\r\n        deleteRoutine (id: $id) {\r\n            routine {\r\n                createdAt\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_PARENT = gql `\r\n    mutation deleteParent ($id: ID) {\r\n        deleteParent (id: $id) {\r\n            parent {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_EVENT_TYPE = gql `\r\n    mutation deleteEventType ($id: ID) {\r\n        deleteEventType (id: $id) {\r\n            eventType {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_EVENT = gql`\r\n    mutation deleteEvent ($id: ID) {\r\n        deleteEvent (id: $id) {\r\n            event {\r\n                title\r\n            }\r\n        }\r\n    }\r\n`;\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const SELECT_STUDENT = gql`\r\n    query allStudents ($filter: String) {\r\n        allStudents (filter: $filter) {\r\n            id\r\n            familyName\r\n            name\r\n            studentCode\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const SELECT_TEACHER = gql`\r\n    query allTeachers ($filter: String) {\r\n        allTeachers (filter: $filter) {\r\n            id\r\n            familyName\r\n            name\r\n            teacherCode\r\n        }\r\n    }\r\n`;\r\n\r\n// export const SELECT_SECTION_TEACHER = gql `\r\n//     query allAssistantTeachers ($filter: String) {\r\n//         allAssistantTeachers (filter: $filter) {\r\n//             id\r\n//             familyName\r\n//             name \r\n//             teacherCode\r\n//         }\r\n//     }\r\n// `\r\n\r\nexport const SELECT_CLASSES = gql`\r\n    query allClassess ($filter: String, $program: Int) {\r\n        allClassess (filter: $filter, program: $program) {\r\n            id\r\n            classes\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const SELECT_SUBJECT = gql`\r\n    query allSubjects ($offset: Int!, $limit: Int!, $filter: String) {\r\n        count (appName: \"subject\", modelName: \"Subject\", filter: $filter) {\r\n            count\r\n        }\r\n        allSubjects (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            subject\r\n            content\r\n            createUserid {\r\n                firstName\r\n                lastName\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SELECT_PROGRAM = gql`\r\n    query selectProgram {\r\n        allPrograms {\r\n            id\r\n            program\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SECTIONS_BY_PROGRAM = gql`\r\n    query sectionsByProgram ($program: Int!) {\r\n        sectionsByProgram (program: $program) {\r\n            id\r\n            section \r\n            classes {\r\n                classes\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SELECT_SECTION = gql`\r\n    query sectionsByClasses ($classes: Int!){\r\n        sectionsByClasses (classes: $classes) {\r\n            id \r\n            section\r\n        }\r\n    }\r\n`\r\n\r\nexport const SELECT_STUDENT_PAGINATION = gql`\r\n    query allStudentsPagination (\r\n        $page: Int\r\n        $perPage: Int\r\n        $filter: String = \"\"\r\n    ) {\r\n        allStudentsPagination (\r\n            page: $page\r\n            perPage: $perPage\r\n            filter: $filter\r\n        ) {\r\n            page\r\n            perPage\r\n            pageCount\r\n            totalCount\r\n            records {\r\n                id\r\n                name\r\n                familyName\r\n            }\r\n        }\r\n    }\r\n`","import React, { useState, useEffect } from 'react';\r\nimport { Form, Input, message, Spin, Row, Col, Select, Empty } from 'antd';\r\nimport { useLazyQuery, useMutation } from '@apollo/client';\r\nimport { ALL_PARENTS } from 'graphql/all';\r\nimport { CREATE_PARENT } from 'graphql/create';\r\nimport { UPDATE_PARENT } from 'graphql/update';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport { SELECT_STUDENT } from 'graphql/select';\r\nimport Loading from 'components/shared-components/Loading';\r\n\r\nconst { Option } = Select;\r\n\r\nfunction StudentForm ({ editData, formType, setIsModalVisible, setTableLoading }) {\r\n\r\n    const [form] = Form.useForm();\r\n    const { TextArea } = Input;\r\n\r\n    const [studentData, setStudentData] = useState([]);\r\n\r\n    const [fetchStudent, { loading: studentLoading }] = useLazyQuery(SELECT_STUDENT, {\r\n        onCompleted: data => {\r\n            setStudentData(data.allStudents)\r\n        }\r\n    });\r\n\r\n    const [createParent, { loading: createLoading }] = useMutation(CREATE_PARENT, {\r\n        refetchQueries: [ALL_PARENTS],\r\n\t\tonCompleted: data => {\r\n            message.success('Амжилттай хадгаллаа');\r\n            form.resetFields();\r\n            setIsModalVisible(false);\r\n            setTableLoading(true);\r\n\t\t}\r\n\t});\r\n\r\n    const [updateParent, { loading: editLoading }] = useMutation(UPDATE_PARENT, {\r\n        refetchQueries: [ALL_PARENTS],\r\n        onCompleted: data => {\r\n            message.success('Амжилттай хадгаллаа');\r\n            form.resetFields();\r\n            setIsModalVisible(false);\r\n            setTableLoading(true);\r\n\t\t}\r\n    })\r\n\r\n    useEffect(() => {\r\n        \r\n        if (formType === 'edit') {\r\n            const newData ={\r\n                name: editData.name,\r\n\t\t\t\tfamilyName: editData.familyName,\r\n\t\t\t\t// username: editData.user.username,\r\n\t\t\t\t// email: editData.user.email,\r\n\t\t\t\taddress: editData.address,\r\n\t\t\t\t// addressLive: editData.addressLive,\r\n\t\t\t\tphone: editData.phone,\r\n\t\t\t\tprofession: editData.profession,\r\n\t\t\t\tstudent: editData.student.id,\r\n\t\t\t}\r\n            form.setFieldsValue(newData);\r\n        }\r\n    }, [editData, formType, form, fetchStudent])\r\n\r\n    // function userExists(username) {\r\n    //     return allUsers?.allUsers.some(function(el) {\r\n    //         if (formType === \"edit\" && editData.user.username === username) {\r\n    //             return false;\r\n    //         } else {\r\n    //             return el.username === username;\r\n    //         }\r\n    //     }); \r\n    // }\r\n\r\n    const phoneRegEx = new RegExp(/^[7-9][0-9]{3}[0-9]{4}$/u);\r\n\r\n    function onFinish (values) {\r\n        if (formType === 'edit') {\r\n            values.id = editData.id\r\n            updateParent({ variables: values})\r\n        } else {\r\n            createParent({ variables: values});\r\n        }\r\n    };\r\n\r\n    const onSearch = value => {\r\n        if (value !== '') {\r\n            fetchStudent({ variables: { offset: 0, limit: 99999999, filter: value } })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Spin spinning={createLoading || editLoading} tip=\"Ачааллаж байна...\">\r\n            <Form  \r\n                id=\"StudentForm\"\r\n                layout={'vertical'}\r\n                form={form}\r\n                name=\"control-hooks\"\r\n                onFinish={onFinish}\r\n            >\r\n                <Row gutter={[16, 24]}>\r\n                    <Col className=\"gutter-row\" span={12}>\r\n                        <Form.Item name=\"familyName\" label={<IntlMessage id=\"familyName\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Input/>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"profession\" label={<IntlMessage id=\"profession\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Input/>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"address\" label={<IntlMessage id=\"address\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <TextArea rows={2}/>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col className=\"gutter-row\" span={12}>\r\n                        <Form.Item name=\"name\" label={<IntlMessage id=\"name\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Input/>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"student\" label={<IntlMessage id=\"student\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select\r\n                                showSearch\r\n                                filterOption={false}\r\n                                notFoundContent={\r\n                                    studentLoading ? <Loading cover='content' /> \r\n                                    : <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\r\n                                }\r\n                                onSearch={onSearch}\r\n                            >\r\n                                { studentData.map((item, index) => (\r\n                                    <Option value={item.id} key={index} > {item.familyName} {item.name} / {item.studentCode} </Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"phone\" label={<IntlMessage id=\"phone1\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                            {\r\n                                validator(rule, value) {\r\n                                    if (phoneRegEx.test(value)) {\r\n                                        return Promise.resolve();\r\n                                    }\r\n                                    return Promise.reject('Утасны дугаар буруу байна!');\r\n                                },\r\n                            }\r\n                        ]}>\r\n                            <Input/>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </Spin>\r\n    );\r\n};\r\n\r\nexport default StudentForm","import React, { useState, useEffect } from 'react'\r\nimport { Modal, message, Button } from 'antd';\r\nimport { DeleteTwoTone, EditTwoTone } from '@ant-design/icons';\r\nimport utils from 'utils'\r\nimport ParentForm from './form'\r\nimport { useLazyQuery, useMutation } from '@apollo/client';\r\nimport { DELETE_PARENT } from 'graphql/delete';\r\nimport { ALL_PARENTS } from 'graphql/all';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport AsyncTable from 'components/shared-components/AsyncTable';\r\n\r\nfunction  StudentsTable (props) {\r\n\r\n    const [count, setCount] = useState(1);\r\n    \r\n\tconst [list, setList] = useState([])\r\n\r\n\tconst [isModalVisible, setIsModalVisible] = useState(false);\r\n\tconst [editData, setEditData] = useState([]);\r\n\tconst [formType, setFormType] = useState(\"\");\r\n\r\n\tconst [fetchData, { loading, refetch }] = useLazyQuery(ALL_PARENTS, {\r\n        fetchPolicy: 'network-only',\r\n        onCompleted: data => {\r\n            setCount(data.count.count);\r\n            setList(data.allParents);\r\n        }\r\n\t});\r\n\r\n    useEffect(() => {\r\n        fetchData({ variables: { offset: 0, limit: 9, filter: ''} })\r\n    }, [fetchData])\r\n\r\n    const showModal = () => {\r\n\t\tsetFormType(\"create\");\r\n      \tsetIsModalVisible(true);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n      setIsModalVisible(false);\r\n    };\r\n\r\n\tconst editRow = row => {\r\n\t\tsetEditData(row);\r\n\t\tsetFormType(\"edit\");\r\n\t\tsetIsModalVisible(true);\r\n\t};\r\n\r\n\tconst { confirm } = Modal;\r\n\r\n\tconst [deleteStudent] = useMutation(DELETE_PARENT, {\r\n\t\trefetchQueries: [ALL_PARENTS],\r\n\t\tonCompleted: data => {\r\n            message.success('Амжилттай устлаа');\r\n\t\t}\r\n\t});\r\n\r\n\tfunction deleteRow(row) {\r\n\t\tconfirm({\r\n            title: \"Устгах уу?\",\r\n            okText: \"Устгах\",\r\n            okType: 'danger',\r\n            cancelText: \"Болих\",\r\n            onOk() {\r\n                deleteStudent({ variables: { id: row.id } }); \r\n            },\r\n\t\t});\r\n\t}\r\n\r\n\tconst tableColumns = [\r\n\t\t{\r\n\t\t\tkey: 'familyName',\r\n\t\t\ttitle: <IntlMessage id=\"familyName\" />,\r\n\t\t\tdataIndex: 'familyName',\r\n\t\t\twidth: '10vw',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'familyName')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'name',\r\n\t\t\ttitle: <IntlMessage id=\"name\" />,\r\n\t\t\tdataIndex: 'name',\r\n\t\t\twidth: '10vw',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'name')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'profession',\r\n\t\t\ttitle: <IntlMessage id=\"profession\" />,\r\n\t\t\tdataIndex: 'profession',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'profession')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'phone',\r\n\t\t\ttitle: <IntlMessage id=\"phone1\" />,\r\n\t\t\tdataIndex: 'phone',\r\n\t\t\twidth: '10vw',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'phone'),\r\n\t\t\trender: text => <span>{text.substr(0, 4) + `-` + text.substr(4, 9)}</span>,\r\n\t\t},\r\n\t\t{\r\n            title: <IntlMessage id=\"student\" />,\r\n            children: [\r\n                {\r\n                    key: 'student',\r\n                    title: <IntlMessage id=\"student\" />,\r\n                    dataIndex: 'student',\r\n                    width: '10vw',\r\n                    sorter: (a, b) => utils.antdTableSorter(a, b, 'student'),\r\n                    render: text => <span>{text.familyName} {text.name}</span>,\r\n                },\r\n                {\r\n                    key: 'studentCode',\r\n                    title: <IntlMessage id=\"studentCode\" />,\r\n                    dataIndex: ['student', 'studentCode'],\r\n                    width: '10vw',\r\n                    sorter: (a, b) => utils.antdTableSorter(a, b, 'studentCode'),\r\n                }\r\n            ]\r\n\t\t},\r\n\t];\r\n\r\n\tif (props.permissions.edit === true || props.permissions.destroy === true) {\r\n\t\ttableColumns.push(\r\n\t\t\t{\r\n\t\t\t\tkey: 'actions',\r\n\t\t\t\ttitle: <IntlMessage id=\"main.action\" />,\r\n\t\t\t\twidth: '15vw',\r\n\t\t\t\tdataIndex: 'actions',\r\n\t\t\t\trender: (_, elm) => (\r\n\t\t\t\t\t<div className=\"text-center\">\r\n\t\t\t\t\t\t{ props.permissions.edit === true &&\r\n\t\t\t\t\t\t\t<Button size=\"small\" onClick={() => editRow(elm)} type=\"text\" icon={<EditTwoTone twoToneColor=\"#ffdb00\"/>} > <IntlMessage id=\"edit\" /></Button>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t{ props.permissions.destroy === true &&\r\n\t\t\t\t\t\t\t<Button size=\"small\" onClick={() => deleteRow(elm)} type=\"text\" icon={<DeleteTwoTone twoToneColor=\"#f42f2f\"/>} > <IntlMessage id=\"delete\" /></Button>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Modal \r\n                title={ formType === `create` ? <IntlMessage id=\"add_new\" /> : <IntlMessage id=\"edit\" />}\r\n                visible={isModalVisible} \r\n\t\t\t\twidth={'80vw'}\r\n\t\t\t\tokText={<IntlMessage id=\"main.okText\" />}\r\n\t\t\t\tcancelText={<IntlMessage id=\"main.cancelText\" />}\r\n\t\t\t\tonCancel={handleCancel}\r\n\t\t\t\tokButtonProps={{form:'StudentForm', key: 'submit', htmlType: 'submit'}}\r\n            >\r\n                <ParentForm \r\n\t\t\t\t\trefetch={refetch}\r\n\t\t\t\t\tformType={formType} \r\n\t\t\t\t\teditData={editData} \r\n\t\t\t\t\tsetIsModalVisible={setIsModalVisible}\r\n\t\t\t\t/>\r\n            </Modal>\r\n\t\t\t<AsyncTable \r\n                fetchData={fetchData}\r\n                loading={loading}\r\n                columns={tableColumns}\r\n                data={list}\r\n                count={count}\r\n                permissions={props.permissions}\r\n                showModal={showModal}\r\n           />\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default StudentsTable\r\n","import React from \"react\";\r\nimport ParentsTable from './table';\r\nimport { CheckPer } from 'hooks/checkPermission';\r\nimport Loading from \"components/shared-components/Loading\";\r\n\r\nconst Index = (props) => {\r\n\r\n    const create = CheckPer('add_parent');\r\n    const edit = CheckPer('change_parent');\r\n    const destroy = CheckPer('delete_parent');\r\n\r\n    const permissions = {\r\n        create: create,\r\n        edit: edit,\r\n        destroy: destroy\r\n    }\r\n\r\n    if (Object.values(permissions).indexOf('loading') > -1) {\r\n        return <Loading cover=\"content\" />\r\n    }\r\n\r\n    return (\r\n        <ParentsTable title={props.title} permissions={permissions} />\r\n    )\r\n}\r\n\r\nexport default Index;\r\n"],"names":["fetchData","loading","columns","data","permissions","showModal","useState","setFilter","alignItems","justifyContent","mobileFlex","className","placeholder","prefix","onChange","e","value","currentTarget","variables","offset","limit","filter","program","onSearch","create","onClick","type","icon","block","id","size","dataSource","rowKey","bordered","Flex","props","children","flexDirection","defaultProps","CREATE_SCHOOL","gql","CREATE_SUB_SCHOOL","CREATE_TEACHER","CREATE_EMPLOYEE","CREATE_STUDENT","CREATE_SECTION","CREATE_CLASSES","CREATE_PROGRAM","CREATE_SUBJECT","CREATE_PARENT","CREATE_EVENT_TYPE","CREATE_EVENT","DELETE_TEACHER","DELETE_EMPLOYEES","DELETE_SUBJECT","DELETE_STUDENT","DELETE_SUB_SCHOOL","DELETE_SCHOOL","DELETE_SECTION","DELETE_CLASS","DELETE_PROGRAM","DELETE_ROUTINE","DELETE_PARENT","DELETE_EVENT_TYPE","DELETE_EVENT","SELECT_STUDENT","SELECT_TEACHER","SELECT_CLASSES","SELECT_SUBJECT","SELECT_PROGRAM","SECTIONS_BY_PROGRAM","SELECT_SECTION","SELECT_STUDENT_PAGINATION","Option","Select","editData","formType","setIsModalVisible","setTableLoading","Form","form","TextArea","Input","studentData","setStudentData","useLazyQuery","onCompleted","allStudents","fetchStudent","studentLoading","useMutation","refetchQueries","ALL_PARENTS","message","resetFields","createParent","createLoading","UPDATE_PARENT","updateParent","editLoading","useEffect","newData","name","familyName","address","phone","profession","student","setFieldsValue","phoneRegEx","RegExp","spinning","tip","layout","onFinish","values","gutter","span","label","IntlMessage","rules","required","rows","showSearch","filterOption","notFoundContent","Loading","cover","image","Empty","map","item","index","studentCode","validator","rule","test","Promise","resolve","reject","count","setCount","list","setList","isModalVisible","setEditData","setFormType","fetchPolicy","allParents","refetch","confirm","Modal","deleteStudent","tableColumns","key","title","dataIndex","width","sorter","a","b","utils","render","text","substr","edit","destroy","push","_","elm","row","editRow","EditTwoTone","twoToneColor","okText","okType","cancelText","onOk","deleteRow","DeleteTwoTone","visible","onCancel","okButtonProps","htmlType","AsyncTable","CheckPer","Object","indexOf"],"sourceRoot":""}