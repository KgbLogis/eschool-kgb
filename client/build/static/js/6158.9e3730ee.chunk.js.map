{"version":3,"file":"static/js/6158.9e3730ee.chunk.js","mappings":"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","sources":["components/shared-components/Flex/index.js","components/shared-components/StudentSelect/index.js","graphql/mark.js","graphql/select.js","views/app-views/mark/table.js","views/app-views/mark/index.js","../node_modules/@ant-design/icons-svg/es/asn/RollbackOutlined.js","../node_modules/@ant-design/icons/es/icons/RollbackOutlined.js"],"sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Flex = props => {\r\n\tconst { children, className, alignItems, justifyContent, mobileFlex, flexDirection } = props\r\n\tconst getFlexResponsive = () => mobileFlex ? 'd-flex' : 'd-md-flex'\r\n\treturn (\r\n\t\t<div className={`${getFlexResponsive()} ${className} ${flexDirection?('flex-' + flexDirection): ''} ${alignItems?('align-items-' + alignItems):''} ${justifyContent?('justify-content-' + justifyContent):''}` }>\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nFlex.propTypes = {\r\n\tclassName: PropTypes.string,\r\n\talignItems: PropTypes.string,\r\n\tflexDirection: PropTypes.string,\r\n\tjustifyContent: PropTypes.string,\r\n\tmobileFlex: PropTypes.bool\r\n}\r\n\r\nFlex.defaultProps = {\r\n\tmobileFlex: true,\r\n\tflexDirection: 'row',\r\n\tclassName: ''\r\n};\r\n\r\n\r\nexport default Flex\r\n","import React, { useState } from 'react';\r\nimport { useLazyQuery, useQuery } from '@apollo/client';\r\nimport { Button, Card, Col, Empty, Form, Row, Select, Skeleton } from 'antd'\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport { SECTIONS_BY_PROGRAM, SELECT_PROGRAM, SELECT_STUDENT } from 'graphql/select';\r\nimport Loading from '../Loading';\r\n\r\nconst { Option } = Select;\r\n\r\nconst StudentSelect = ({ submitData, mutationData, loading }) => {\r\n\r\n    const [formSection] = Form.useForm();\r\n    const [formStudent] = Form.useForm();\r\n\r\n    const [programs, setPrograms] = useState([]);\r\n    const [sections, setSections] = useState([]);\r\n    const [students, setStudents] = useState([]);\r\n\r\n    const { loading: programLoading } = useQuery(SELECT_PROGRAM, {\r\n        onCompleted: data => {\r\n            setPrograms(data.allPrograms);\r\n        }\r\n    })\r\n\r\n    const [fetchSection, { loading: sectionLoading}] = useLazyQuery(SECTIONS_BY_PROGRAM, {\r\n        onCompleted: data => {\r\n            setSections(data.sectionsByProgram);\r\n        }\r\n    })\r\n\r\n    const [fetchStudent, { loading: studentLoading }] = useLazyQuery(SELECT_STUDENT, {\r\n        onCompleted: data => {\r\n            setStudents(data.allStudents)\r\n        }\r\n    })\r\n\r\n    const onFinish = (values) => {\r\n        if (!values.hasOwnProperty(\"studentCode\")) {\r\n            values.studentCode = \"\"\r\n        } else {\r\n            values.section = 0\r\n        }\r\n        const variables = Object.assign(values, mutationData)\r\n        submitData({ variables: variables });\r\n    }\r\n\r\n    const onProgramSelect = (program) => {\r\n        formSection.setFieldsValue({\r\n            section: \"\",\r\n        });\r\n        fetchSection({ variables: { program: program } })\r\n    }\r\n\r\n    const onStudentSearch = (value) => {\r\n        if (value === '') {\r\n            setStudents([]);\r\n        } else {\r\n            fetchStudent({ variables: { offset: 0, limit: 99999999, filter: value } });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Skeleton active loading={programLoading} >\r\n            <Row gutter={16}>\r\n                <Col xs={24} xl={12}>\r\n                    <Card \r\n                        className='mt-4'\r\n                        title={<IntlMessage id=\"by-section\" />}\r\n                    >\r\n                        <Form  \r\n                            id=\"section\"\r\n                            layout={'vertical'}\r\n                            form={formSection}\r\n                            name=\"control-hooks\" \r\n                            onFinish={onFinish}\r\n                        >\r\n                            <Form.Item \r\n                                name=\"program\" \r\n                                label={<IntlMessage id=\"program\" />} \r\n                                rules={[\r\n                                    { \r\n                                        required: true,\r\n                                         message: <IntlMessage id=\"form.required\" /> \r\n                                    }\r\n                                ]}\r\n                            >\r\n                                <Select\r\n                                    onSelect={onProgramSelect}\r\n                                    allowClear\r\n                                    showSearch\r\n                                    optionFilterProp=\"children\"\r\n                                    filterOption={(input, option) =>\r\n                                        option.children.toString().toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                    }\r\n                                >\r\n                                    { programs.map((program, index) => (\r\n                                        <Option value={program.id} key={index}>{program.program} / {program.programNumeric}</Option>\r\n                                    ))}\r\n                                </Select>\r\n                            </Form.Item>\r\n                            <Form.Item \r\n                                name=\"section\" \r\n                                label={<IntlMessage id=\"section\" />} \r\n                                rules={[\r\n                                    { \r\n                                        required: true,\r\n                                         message: <IntlMessage id=\"form.required\" /> \r\n                                    }\r\n                                ]}\r\n                            >\r\n                                <Select\r\n                                    allowClear\r\n                                    notFoundContent={\r\n                                        sectionLoading ? <Loading cover='content' /> \r\n                                        : <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\r\n                                    }\r\n                                >\r\n                                    { sections.map((section, index) => (\r\n                                        <Option value={section.id} key={index}>{section.classes.classes} / {section.section}</Option>\r\n                                    ))}\r\n                                </Select>\r\n                            </Form.Item>\r\n                            <Form.Item className='text-right'>\r\n                                <Button className=\"mr-2\" type=\"primary\" htmlType=\"submit\" loading={loading}>\r\n                                    <IntlMessage id=\"main.okText\" />\r\n                                </Button>\r\n                            </Form.Item>\r\n                        </Form>\r\n                    </Card>\r\n                </Col>\r\n                <Col xs={24} xl={12}>\r\n                    <Card \r\n                        className='mt-4'\r\n                        title={<IntlMessage id=\"by-student-code\" />}\r\n                    >\r\n                        <Form  \r\n                            id=\"student\"\r\n                            layout={'vertical'}\r\n                            form={formStudent}\r\n                            name=\"control-hooks\" \r\n                            onFinish={onFinish}\r\n                        >\r\n                            <Form.Item \r\n                                name=\"studentCode\" \r\n                                label={<IntlMessage id=\"studentCode\" />} \r\n                                rules={[\r\n                                    { \r\n                                        required: true,\r\n                                        message: <IntlMessage id=\"form.required\" /> \r\n                                    }\r\n                                ]}\r\n                            >\r\n                                <Select\r\n                                    showSearch\r\n                                    filterOption={false}\r\n                                    notFoundContent={\r\n                                        studentLoading ? <Loading cover='content' /> \r\n                                        : <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\r\n                                    }\r\n                                    onSearch={onStudentSearch}\r\n                                >\r\n                                    { students.map((student, index) => (\r\n                                        <Option value={student.studentCode} key={index}> {student.familyName} {student.name} / {student.studentCode}</Option>\r\n                                    ))}\r\n                                </Select>\r\n                            </Form.Item>\r\n                            <Form.Item className='text-right'>\r\n                                <Button className=\"mr-2\" type=\"primary\" htmlType=\"submit\" loading={loading}>\r\n                                    <IntlMessage id=\"main.okText\" />\r\n                                </Button>\r\n                            </Form.Item>\r\n                        </Form>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </Skeleton>\r\n    )\r\n}\r\n\r\nexport default StudentSelect","import { gql } from '@apollo/client';\r\n\r\nexport const ALL_MARK = gql `\r\n    query allMarks ($markBoard: Int!) {\r\n        allMarks (markBoard: $markBoard) {\r\n            id\r\n            student {\r\n                id\r\n                familyName\r\n                name\r\n                studentCode\r\n            }\r\n            markRelSet {\r\n                markVal\r\n                markSetting {\r\n                    id\r\n                    name\r\n                }\r\n            }\r\n            markBoard {\r\n                subject {\r\n                    subject\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_MARK = gql `\r\n    mutation createMark ($section: Int, $studentCode: String, $markBoard: Int) {\r\n        createMark (section: $section, studentCode: $studentCode, markBoard: $markBoard) {\r\n            mark {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_MARK = gql`\r\n    mutation deleteMark ($id: ID) {\r\n        deleteMark (id: $id) {\r\n            mark {\r\n                student {\r\n                    id\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_MARK_REL = gql `\r\n    mutation createMarkRel ($mark: Int, $markSetting: Int, $markVal: String) {\r\n        createMarkRel (mark: $mark, markSetting: $markSetting, markVal: $markVal) {\r\n            markRel {\r\n                id\r\n                markVal\r\n                markSetting {\r\n                    id\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_MARK_RELS = gql `\r\n    query allMarkRels ($mark: Int!) {\r\n        allMarkRels (mark: $mark) {\r\n            mark {\r\n                student {\r\n                    id\r\n                    studentCode\r\n                }\r\n            }\r\n            markSetting {\r\n                name\r\n                percentage\r\n            }\r\n            markVal\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_MARK_PERCENTAGE = gql `\r\n    query allMarkPercentages {\r\n        allMarkPercentages {\r\n            id\r\n            type\r\n            percentage\r\n            diam\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_MARK_PERCENTAGE = gql `\r\n    mutation createMarkPercentage ($diam: String, $percentage: Int, $type: String) {\r\n        createMarkPercentage (diam: $diam, percentage: $percentage, type: $type) {\r\n            markPercentage {\r\n                type\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_MARK_PERCENTAGE = gql `\r\n    mutation updateMarkPercentage ($diam: String, $percentage: Int, $type: String, $id: ID) {\r\n        updateMarkPercentage (diam: $diam, percentage: $percentage, type: $type, id: $id) {\r\n            markPercentage {\r\n                type\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_MARK_PERCENTAGE = gql `\r\n    mutation deleteMarkPercentage ($id: ID) {\r\n        deleteMarkPercentage (id: $id) {\r\n            markPercentage {\r\n                type\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const MARK_BOARD_BY_ID = gql `\r\n    query markBoardById ($id: Int!) {\r\n        markBoardById (id: $id) {\r\n            id\r\n            schoolyear {\r\n                id\r\n                schoolyear\r\n            }\r\n            subject {\r\n                id\r\n                subject\r\n            }\r\n            teacher {\r\n                id\r\n                name\r\n            }\r\n            startAt \r\n            endAt\r\n            status\r\n            createdAt\r\n            updatedAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_MARK_BOARD = gql `\r\n    query allMarkBoards ($offset: Int!, $limit: Int!, $filter: String) {\r\n        count (appName: \"mark\", modelName: \"Mark_board\", filter: $filter) {\r\n            count\r\n        }\r\n        allMarkBoards (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            schoolyear {\r\n                id\r\n                schoolyear\r\n            }\r\n            subject {\r\n                id\r\n                subject\r\n            }\r\n            teacher {\r\n                id\r\n                name\r\n            }\r\n            startAt \r\n            endAt\r\n            status\r\n            createdAt\r\n            updatedAt\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_MARK_BOARD_FROM_ROUTINE = gql `\r\n    mutation createMarkBoardFromRoutine ($endAt: String, $routine: Int, $startAt: String, $status: String) {\r\n        createMarkBoardFromRoutine (endAt: $endAt, routine: $routine, startAt: $startAt, status: $status) {\r\n            markBoard {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_MARK_BOARD = gql `\r\n    mutation createMarkBoard ($endAt: String, $schoolyear: Int, $startAt: String, $status: String, $subject: Int, $teacher: Int) {\r\n        createMarkBoard (endAt: $endAt, schoolyear: $schoolyear, startAt: $startAt, status: $status, subject: $subject, teacher: $teacher) {\r\n            markBoard {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_MARK_BOARD = gql `\r\n    mutation updateMarkBoard ($endAt: String, $schoolyear: Int, $startAt: String, $status: String, $subject: Int, $teacher: Int, $id: ID) {\r\n        updateMarkBoard (endAt: $endAt, schoolyear: $schoolyear, startAt: $startAt, status: $status, subject: $subject, teacher: $teacher, id: $id) {\r\n            markBoard {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_MARK_BOARD = gql `\r\n    mutation deleteMarkBoard ($id: ID) {\r\n        deleteMarkBoard (id: $id) {\r\n            markBoard {\r\n                startAt\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_MARK_SETTING = gql `\r\n    query allMarkSettings {\r\n        allMarkSettings {\r\n            id\r\n            name\r\n            percentage\r\n            createdAt\r\n            updatedAt\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_MARK_SETTING = gql `\r\n    mutation createMarkSetting ($name: String, $percentage: Int) {\r\n        createMarkSetting (name: $name, percentage: $percentage) {\r\n            markSetting {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_MARK_SETTING = gql `\r\n    mutation updateMarkSetting ($name: String, $percentage: Int, $id: ID) {\r\n        updateMarkSetting (name: $name, percentage: $percentage, id: $id) {\r\n            markSetting {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_MARK_SETTING = gql `\r\n    mutation deleteMarkSetting($id: ID) {\r\n        deleteMarkSetting (id: $id) {\r\n            markSetting {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`","import { gql } from '@apollo/client';\r\n\r\nexport const SELECT_STUDENT = gql`\r\n    query allStudents ($filter: String) {\r\n        allStudents (filter: $filter) {\r\n            id\r\n            familyName\r\n            name\r\n            studentCode\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const SELECT_TEACHER = gql`\r\n    query allTeachers ($filter: String) {\r\n        allTeachers (filter: $filter) {\r\n            id\r\n            familyName\r\n            name\r\n            teacherCode\r\n        }\r\n    }\r\n`;\r\n\r\n// export const SELECT_SECTION_TEACHER = gql `\r\n//     query allAssistantTeachers ($filter: String) {\r\n//         allAssistantTeachers (filter: $filter) {\r\n//             id\r\n//             familyName\r\n//             name \r\n//             teacherCode\r\n//         }\r\n//     }\r\n// `\r\n\r\nexport const SELECT_CLASSES = gql`\r\n    query allClassess ($filter: String, $program: Int) {\r\n        allClassess (filter: $filter, program: $program) {\r\n            id\r\n            classes\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const SELECT_SUBJECT = gql`\r\n    query allSubjects ($offset: Int!, $limit: Int!, $filter: String) {\r\n        count (appName: \"subject\", modelName: \"Subject\", filter: $filter) {\r\n            count\r\n        }\r\n        allSubjects (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            subject\r\n            content\r\n            createUserid {\r\n                firstName\r\n                lastName\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SELECT_PROGRAM = gql`\r\n    query selectProgram {\r\n        allPrograms {\r\n            id\r\n            program\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SECTIONS_BY_PROGRAM = gql`\r\n    query sectionsByProgram ($program: Int!) {\r\n        sectionsByProgram (program: $program) {\r\n            id\r\n            section \r\n            classes {\r\n                classes\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SELECT_SECTION = gql`\r\n    query sectionsByClasses ($classes: Int!){\r\n        sectionsByClasses (classes: $classes) {\r\n            id \r\n            section\r\n        }\r\n    }\r\n`\r\n\r\nexport const SELECT_STUDENT_PAGINATION = gql`\r\n    query allStudentsPagination (\r\n        $page: Int\r\n        $perPage: Int\r\n        $filter: String = \"\"\r\n    ) {\r\n        allStudentsPagination (\r\n            page: $page\r\n            perPage: $perPage\r\n            filter: $filter\r\n        ) {\r\n            page\r\n            perPage\r\n            pageCount\r\n            totalCount\r\n            records {\r\n                id\r\n                name\r\n                familyName\r\n            }\r\n        }\r\n    }\r\n`","import React, { useState } from 'react'\r\nimport { Card, Table, Spin, message, Button, InputNumber, Modal } from 'antd';\r\nimport { RollbackOutlined, DeleteTwoTone } from '@ant-design/icons';\r\nimport Flex from 'components/shared-components/Flex'\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport { ALL_MARK, ALL_MARK_SETTING, CREATE_MARK, CREATE_MARK_REL, DELETE_MARK } from 'graphql/mark'\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport { useHistory } from 'react-router-dom';\r\nimport StudentSelect from 'components/shared-components/StudentSelect';\r\n\r\nconst { confirm } = Modal;\r\n\r\nfunction  MarkTable (props) {\r\n\r\n    const history = useHistory();\r\n    \r\n\tconst { data: markData, loading: markLoading, refetch } = useQuery(ALL_MARK, {\r\n        variables: { markBoard: props.markBoard.id},\r\n        fetchPolicy: 'network-only',\r\n\t\tonCompleted: data => {\r\n            const newData = [];\r\n\t\t\tmarkData?.allMarks.map(function(data) {\r\n                const relData = {}\r\n                data.markRelSet.map(function(a) {\r\n                    var name = a.markSetting.name\r\n\t\t\t\t\treturn (\r\n                        Object.assign(relData, { [name]: {\r\n                                markVal: a.markVal,\r\n                                settingName: a.markSetting.name,\r\n                                settingID: a.markSetting.id\r\n    \r\n                        }})\r\n\t\t\t\t\t)\r\n\t\t\t\t})\r\n\t\t\t\treturn newData.push(\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\trelData,\r\n\t\t\t\t\t\tstudent: data.student.id,\r\n\t\t\t\t\t\tname: data.student.name,\r\n\t\t\t\t\t\tfamilyName: data.student.familyName,\r\n\t\t\t\t\t\tstudentCode: data.student.studentCode,\r\n\t\t\t\t\t\tmark: data.id,\r\n\t\t\t\t\t\tkey: data.student.id,\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t\t\r\n\t\t\t});\r\n\t\t\tsetList(newData);\r\n\t\t}\r\n\t});\r\n\tconst [createMarkRel, { loading: createRelLoading}] = useMutation(CREATE_MARK_REL, {\r\n\t\tonCompleted: data => {\r\n            message.success('Амжилттай хадгаллаа');\r\n\t\t}\r\n\t});\r\n\r\n    const [destroy] = useMutation(DELETE_MARK, {\r\n        onCompleted: data => {\r\n            refetch();\r\n        }\r\n    })\r\n\r\n\tconst { data: settingsData } = useQuery(ALL_MARK_SETTING);\r\n\r\n\tconst [list, setList] = useState(undefined)\r\n\r\n\tconst tableColumns = [\r\n\t\t{\r\n\t\t\tkey: 'familyName',\r\n\t\t\ttitle: <IntlMessage id=\"familyName\" />,\r\n\t\t\tdataIndex: 'familyName',\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'name',\r\n            title: <IntlMessage id=\"name\" />,\r\n            dataIndex: 'name',\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'studentCode',\r\n\t\t\ttitle: <IntlMessage id=\"studentCode\" />,\r\n\t\t\tdataIndex: 'studentCode',\r\n\t\t},\r\n\t];\r\n\r\n\tconst newMarkData = [];\r\n\r\n\tconst onInputChange = (event, key, index, record ) => {\r\n\t\tif (!newMarkData.length) {\r\n\t\t\tnewMarkData.push(\r\n\t\t\t\t{\r\n\t\t\t\t\tmark: record.mark,\r\n\t\t\t\t\tmarkSetting: key,\r\n\t\t\t\t\tmarkVal: event,\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t} else {\r\n\t\t\tif (newMarkData.filter(asd => asd.mark === record.mark && asd.markSetting === key).length === 0) {\r\n\t\t\t\tnewMarkData.push(\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tmark: record.mark,\r\n\t\t\t\t\t\tmarkSetting: key,\r\n\t\t\t\t\t\tmarkVal: event,\r\n\t\t\t\t\t}\r\n\t\t\t\t)\r\n\t\t\t} else {\r\n\t\t\t\tnewMarkData.filter(asd => asd.mark === record.mark && asd.markSetting === key).map(function(el) {\r\n\t\t\t\t\treturn el.markVal = event\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n    \r\n\t\r\n\tfunction deleteRow(value) {\r\n\t\tconfirm({\r\n            title: 'Хасах уу?',\r\n            okText: 'Хасах',\r\n            okType: 'danger',\r\n            cancelText: 'Болих',\r\n            onOk() {\r\n                destroy({ variables: { id: value } }); \r\n            },\r\n\t\t});\r\n\t}\r\n\r\n\tsettingsData?.allMarkSettings.map((setting, index) => (\r\n\t\ttableColumns.push({\r\n\t\t\tkey: setting.name,\r\n\t\t\ttitle: setting.name,\r\n\t\t\tdataIndex: ['relData', `${setting.name}`, 'markVal'],\r\n\t\t\trender: (text, record, index) => (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<InputNumber defaultValue={text} max={setting.percentage} min={0} onChange={(e) => onInputChange(e, setting.id, index, record )} />\r\n\t\t\t\t</div>\r\n\t\t\t),\r\n\t\t})\r\n\t))\r\n\r\n    tableColumns.push({\r\n        key: 'delete',\r\n        title: 'Хасах',\r\n        render: (text, record) => (\r\n            <Button size=\"small\" onClick={() => deleteRow(record.mark)} type=\"text\" icon={<DeleteTwoTone twoToneColor=\"#f42f2f\"/>} > Хасах </Button>\r\n        ),\r\n    })\r\n\r\n\tconst onFinish = () => {\r\n\t\tif (newMarkData.length === 0) {\r\n\t\t\tmessage.warning('Өөрчлөлт алга байна');\r\n\t\t} else {\r\n\t\t\tnewMarkData?.filter(data => data.markVal !== null).map((filteredData, index) => (\r\n\t\t\t\tcreateMarkRel({ variables: filteredData })\r\n\t\t\t));\r\n\t\t}\r\n\t};\r\n\r\n    const [createMark, { loading: createLoading }] = useMutation(CREATE_MARK, {\r\n        onError: error => {\r\n            if (error.message === \"Student matching query does not exist.\") {\r\n                message.warning('Суралцагч олдсонгүй!');\r\n            }\r\n        },\r\n\t\tonCompleted: data => {\r\n            message.success('Амжилттай хадгаллаа');\r\n            refetch();\r\n\t\t}\r\n\t});\r\n\r\n\treturn (\r\n\t\t<>\r\n            <Flex alignItems=\"center\" justifyContent=\"between\" mobileFlex={false}>\r\n                <Flex mobileFlex={false}>\r\n                    <div className='text-right' >\r\n                        <Button onClick={() => history.goBack()} type=\"default\" icon={<RollbackOutlined />} block> <IntlMessage id=\"back\" /></Button>\r\n                    </div>\r\n                </Flex>\r\n            </Flex>\r\n            <StudentSelect \r\n                submitData={createMark}\r\n                loading={createLoading}\r\n                mutationData={{ markBoard: props.markBoard.id }}\r\n            />\r\n\t\t\t{list !== undefined ? (\r\n\t\t\t\t\t<Card className='mt-4'>\r\n\t\t\t\t\t\t<div className=\"table-responsive\">\r\n\t\t\t\t\t\t\t<Spin spinning={markLoading}>\r\n\t\t\t\t\t\t\t\t\t<Table \r\n\t\t\t\t\t\t\t\t\t\tcolumns={tableColumns} \r\n\t\t\t\t\t\t\t\t\t\tdataSource={list}\r\n\t\t\t\t\t\t\t\t\t\trowKey='key'  \r\n\t\t\t\t\t\t\t\t\t\tsize='small'\r\n\t\t\t\t\t\t\t\t\t\tpagination={false}\r\n\t\t\t\t\t\t\t\t\t\tbordered\r\n                                        loading={markLoading}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t<Flex alignItems=\"left\" justifyContent=\"between\" mobileFlex={false}>\r\n\t\t\t\t\t\t\t\t\t\t<Flex className=\"mb-1\" mobileFlex={false}>\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t</Flex>\r\n\t\t\t\t\t\t\t\t\t\t{ props.permissions.create === true && \r\n\t\t\t\t\t\t\t\t\t\t\t<Button style={{ margin: '10px' }}  onClick={onFinish} type=\"primary\" loading={createRelLoading}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<IntlMessage id=\"main.okText\" />\r\n\t\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t</Flex>\r\n\t\t\t\t\t\t\t</Spin>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Card>\r\n\t\t\t) : null }\r\n\t\t</>\r\n\t\t\r\n\t)\r\n}\r\n\r\nexport default MarkTable\r\n","import React, { useState } from \"react\";\r\nimport MarkTable from './table';\r\nimport { CheckPer } from 'hooks/checkPermission';\r\nimport Loading from \"components/shared-components/Loading\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Index = (props) => {\r\n\r\n    const history = useHistory();\r\n\r\n    const create = CheckPer('add_mark');\r\n    const edit = CheckPer('change_mark');\r\n    const destroy = CheckPer('delete_mark');\r\n    \r\n    const [markBoard] = useState(props.location.state?.markBoard);\r\n\r\n    const permissions = {\r\n        create: create,\r\n        edit: edit,\r\n        destroy: destroy\r\n    }\r\n\r\n    if (Object.values(permissions).indexOf('loading') > -1) {\r\n        return <Loading cover=\"content\" />\r\n    }\r\n\r\n    if (props.location.state === undefined) {\r\n        history.push('/app/home');\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <MarkTable title={props.title} permissions={permissions} markBoard={markBoard} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Index;\r\n","// This icon file is generated automatically.\nvar RollbackOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M793 242H366v-74c0-6.7-7.7-10.4-12.9-6.3l-142 112a8 8 0 000 12.6l142 112c5.2 4.1 12.9.4 12.9-6.3v-74h415v470H175c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h618c35.3 0 64-28.7 64-64V306c0-35.3-28.7-64-64-64z\" } }] }, \"name\": \"rollback\", \"theme\": \"outlined\" };\nexport default RollbackOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport RollbackOutlinedSvg from \"@ant-design/icons-svg/es/asn/RollbackOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar RollbackOutlined = function RollbackOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: RollbackOutlinedSvg\n  }));\n};\nRollbackOutlined.displayName = 'RollbackOutlined';\nexport default /*#__PURE__*/React.forwardRef(RollbackOutlined);"],"names":["Flex","props","children","className","alignItems","justifyContent","mobileFlex","flexDirection","defaultProps","Option","Select","submitData","mutationData","loading","Form","formSection","formStudent","useState","programs","setPrograms","sections","setSections","students","setStudents","programLoading","useQuery","SELECT_PROGRAM","onCompleted","data","allPrograms","useLazyQuery","SECTIONS_BY_PROGRAM","sectionsByProgram","fetchSection","sectionLoading","SELECT_STUDENT","allStudents","fetchStudent","studentLoading","onFinish","values","hasOwnProperty","section","studentCode","variables","Object","assign","active","gutter","xs","xl","title","id","layout","form","name","label","rules","required","message","onSelect","program","setFieldsValue","allowClear","showSearch","optionFilterProp","filterOption","input","option","toString","toLowerCase","indexOf","map","index","value","programNumeric","notFoundContent","cover","image","Empty","classes","type","htmlType","onSearch","offset","limit","filter","student","familyName","ALL_MARK","gql","CREATE_MARK","DELETE_MARK","CREATE_MARK_REL","ALL_MARK_PERCENTAGE","CREATE_MARK_PERCENTAGE","UPDATE_MARK_PERCENTAGE","DELETE_MARK_PERCENTAGE","ALL_MARK_BOARD","CREATE_MARK_BOARD","UPDATE_MARK_BOARD","DELETE_MARK_BOARD","ALL_MARK_SETTING","CREATE_MARK_SETTING","UPDATE_MARK_SETTING","DELETE_MARK_SETTING","SELECT_TEACHER","SELECT_CLASSES","SELECT_SUBJECT","SELECT_SECTION","SELECT_STUDENT_PAGINATION","confirm","Modal","history","useHistory","markBoard","fetchPolicy","newData","markData","allMarks","relData","markRelSet","a","markSetting","markVal","settingName","settingID","push","mark","key","setList","markLoading","refetch","useMutation","createMarkRel","createRelLoading","destroy","settingsData","undefined","list","tableColumns","IntlMessage","dataIndex","newMarkData","allMarkSettings","setting","render","text","record","defaultValue","max","percentage","min","onChange","e","event","length","asd","el","onInputChange","size","onClick","okText","okType","cancelText","onOk","icon","DeleteTwoTone","twoToneColor","onError","error","createMark","createLoading","goBack","RollbackOutlined","block","StudentSelect","spinning","columns","dataSource","rowKey","pagination","bordered","permissions","create","style","margin","filteredData","CheckPer","edit","location","state","Loading","ref","React","AntdIcon","_objectSpread","RollbackOutlinedSvg","displayName"],"sourceRoot":""}