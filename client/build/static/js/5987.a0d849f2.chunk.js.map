{"version":3,"file":"static/js/5987.a0d849f2.chunk.js","mappings":"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","sources":["components/shared-components/FormModal/index.js","graphql/select.js","graphql/flex-time.js","views/app-views/flex-time/flex-time-sub-form.js","views/app-views/flex-time/flex-time-form.js","views/app-views/flex-time/index.js"],"sourcesContent":["import React, { forwardRef, useImperativeHandle, useState } from 'react'\r\nimport { Modal } from 'antd';\r\n\r\nconst FormModal = forwardRef(({ children, title, footer, formName = 'form', forceRender = false }, ref) => {\r\n    \r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        handleOpen() {\r\n            setIsModalVisible(true);\r\n        },\r\n        handleCancel () {\r\n            setIsModalVisible(false);\r\n        }\r\n    }));\r\n    \r\n    return (\r\n        <Modal \r\n            width={1000}\r\n            title={title} \r\n            visible={isModalVisible}\r\n            onCancel={ref.current?.handleCancel}\r\n            okText=\"Хадгалах\"\r\n            footer={footer}\r\n            cancelText=\"Болих\"\r\n            forceRender={forceRender}\r\n            okButtonProps={{form:formName, key: 'submit', htmlType: 'submit'}}\r\n        >\r\n            {children}\r\n        </Modal>\r\n    )\r\n});\r\n\r\nexport default FormModal;\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const SELECT_STUDENT = gql`\r\n    query allStudents ($filter: String) {\r\n        allStudents (filter: $filter) {\r\n            id\r\n            familyName\r\n            name\r\n            studentCode\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const SELECT_TEACHER = gql`\r\n    query allTeachers ($filter: String) {\r\n        allTeachers (filter: $filter) {\r\n            id\r\n            familyName\r\n            name\r\n            teacherCode\r\n        }\r\n    }\r\n`;\r\n\r\n// export const SELECT_SECTION_TEACHER = gql `\r\n//     query allAssistantTeachers ($filter: String) {\r\n//         allAssistantTeachers (filter: $filter) {\r\n//             id\r\n//             familyName\r\n//             name \r\n//             teacherCode\r\n//         }\r\n//     }\r\n// `\r\n\r\nexport const SELECT_CLASSES = gql`\r\n    query allClassess ($filter: String, $program: Int) {\r\n        allClassess (filter: $filter, program: $program) {\r\n            id\r\n            classes\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const SELECT_SUBJECT = gql`\r\n    query allSubjects ($offset: Int!, $limit: Int!, $filter: String) {\r\n        count (appName: \"subject\", modelName: \"Subject\", filter: $filter) {\r\n            count\r\n        }\r\n        allSubjects (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            subject\r\n            content\r\n            createUserid {\r\n                firstName\r\n                lastName\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SELECT_PROGRAM = gql`\r\n    query selectProgram {\r\n        allPrograms {\r\n            id\r\n            program\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SECTIONS_BY_PROGRAM = gql`\r\n    query sectionsByProgram ($program: Int!) {\r\n        sectionsByProgram (program: $program) {\r\n            id\r\n            section \r\n            classes {\r\n                classes\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SELECT_SECTION = gql`\r\n    query sectionsByClasses ($classes: Int!){\r\n        sectionsByClasses (classes: $classes) {\r\n            id \r\n            section\r\n        }\r\n    }\r\n`\r\n\r\nexport const SELECT_STUDENT_PAGINATION = gql`\r\n    query allStudentsPagination (\r\n        $page: Int\r\n        $perPage: Int\r\n        $filter: String = \"\"\r\n    ) {\r\n        allStudentsPagination (\r\n            page: $page\r\n            perPage: $perPage\r\n            filter: $filter\r\n        ) {\r\n            page\r\n            perPage\r\n            pageCount\r\n            totalCount\r\n            records {\r\n                id\r\n                name\r\n                familyName\r\n            }\r\n        }\r\n    }\r\n`","import { gql } from \"@apollo/client\";\r\n\r\nexport const ALL_FLEX_TIMES = gql`\r\n  query allFlexTimes {\r\n        allFlexTimes {\r\n            id\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            isCurrent\r\n        }\r\n    }\r\n`\r\n\r\nexport const CREATE_FLEX_TIME = gql`\r\n    mutation createFlexTime($isCurrent: Boolean, $program: ID) {\r\n        createFlexTime (isCurrent: $isCurrent, program: $program) {\r\n            flexTime {\r\n                isCurrent\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const UPDATE_FLEX_TIME = gql`\r\n    mutation updateFlexTime($id: ID, $isCurrent: Boolean, $program: ID) {\r\n        updateFlexTime (id: $id, isCurrent: $isCurrent, program: $program) {\r\n            flexTime {\r\n                isCurrent\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const DELETE_FLEX_TIME = gql`\r\n    mutation deleteFlexTime ($id: ID) {\r\n        deleteFlexTime (id: $id) {\r\n            flexTime {\r\n                isCurrent\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_FLEX_TIME_SUBS = gql`\r\n    query allFlexTimeSubs ($flexTime: ID!) {\r\n        allFlexTimeSubs (flexTime: $flexTime) {\r\n            id\r\n            flexTime {\r\n                id\r\n            }\r\n            action\r\n            content\r\n            startAt\r\n            endAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const CREATE_FLEX_TIME_SUB = gql`\r\n    mutation createFlexTimeSub(\r\n        $action: String\r\n        $content: String\r\n        $endAt: Time\r\n        $flexTime: ID\r\n        $startAt: Time\r\n    ) {\r\n        createFlexTimeSub  (\r\n            action: $action\r\n            content: $content\r\n            endAt: $endAt\r\n            flexTime: $flexTime\r\n            startAt: $startAt\r\n        ) {\r\n            flexTimeSub {\r\n                startAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const UPDATE_FLEX_TIME_SUB = gql`\r\n    mutation updateFlexTimeSub(\r\n        $id: ID\r\n        $action: String\r\n        $content: String\r\n        $endAt: Time\r\n        $flexTime: ID\r\n        $startAt: Time\r\n    ) {\r\n        updateFlexTimeSub (\r\n            action: $action\r\n            content: $content\r\n            endAt: $endAt\r\n            flexTime: $flexTime\r\n            id: $id\r\n            startAt: $startAt\r\n        ) {\r\n            flexTimeSub {\r\n                startAt\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const DELETE_FLEX_TIME_SUB = gql`\r\n    mutation deleteFlexTimeSub ($id: ID) {\r\n        deleteFlexTimeSub (id: $id) {\r\n            flexTimeSub {\r\n                startAt\r\n            }\r\n        }\r\n    }\r\n`","import React, { useEffect } from 'react'\r\nimport { Form, Input, Spin, TimePicker } from 'antd'\r\nimport { useMutation } from '@apollo/client'\r\nimport moment from 'moment'\r\nimport IntlMessage from 'components/util-components/IntlMessage'\r\nimport { ALL_FLEX_TIME_SUBS, CREATE_FLEX_TIME_SUB, UPDATE_FLEX_TIME_SUB } from 'graphql/flex-time'\r\n\r\nexport default function FlexTimeSubForm({ handleCancel, flexTime, flexTimeSub }) {\r\n\r\n    const [form] = Form.useForm()\r\n\r\n    const [create, { loading: createLoading }] = useMutation(CREATE_FLEX_TIME_SUB, {\r\n        refetchQueries: [\r\n            {\r\n                query: ALL_FLEX_TIME_SUBS,\r\n                variables: { flexTime: flexTime }\r\n            }\r\n        ],\r\n        onCompleted: res => {\r\n            handleCancel()\r\n        }\r\n    })\r\n    const [update, { loading: updateLoading }] = useMutation(UPDATE_FLEX_TIME_SUB, {\r\n        refetchQueries: [\r\n            {\r\n                query: ALL_FLEX_TIME_SUBS,\r\n                variables: { flexTime: flexTime }\r\n            }\r\n        ],\r\n        onCompleted: res => {\r\n            handleCancel()\r\n        }\r\n    })\r\n\r\n    function onFinish(values) {\r\n        values.startAt = values.start_end_date[0].format('HH:mm:ss')\r\n        values.endAt = values.start_end_date[1].format('HH:mm:ss')\r\n        values.flexTime = flexTime\r\n        if (flexTimeSub) {\r\n            values.id = flexTimeSub.id\r\n            update({ variables: values })\r\n        } else {\r\n            create({ variables: values })\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (flexTimeSub) {\r\n            form.setFieldsValue({\r\n                start_end_date: [\r\n                    moment(`2022-03-13 ${flexTimeSub.startAt}`),\r\n                    moment(`2022-03-13 ${flexTimeSub.endAt}`)\r\n                ],\r\n                ...flexTimeSub\r\n            })\r\n        }\r\n    }, [form, flexTimeSub])\r\n\r\n\r\n    return (\r\n        <Spin\r\n            tip=\"Ачааллаж байна...\"\r\n            spinning={updateLoading || createLoading}\r\n        >\r\n            <Form\r\n                id=\"FlexTimeSubForm\"\r\n                layout={'vertical'}\r\n                form={form}\r\n                name=\"FlexTimeSubForm\"\r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item name=\"action\" label={<IntlMessage id=\"flexTimeAction\" />} rules={[\r\n                    {\r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    },\r\n                ]}>\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item name=\"start_end_date\" label={<IntlMessage id=\"start_end_date\" />} rules={[\r\n                    {\r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    },\r\n                ]}>\r\n                    <TimePicker.RangePicker format=\"HH:mm\" />\r\n                </Form.Item>\r\n                <Form.Item name=\"content\" label={<IntlMessage id=\"content\" />} rules={[\r\n                    {\r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    },\r\n                ]}>\r\n                    <Input.TextArea />\r\n                </Form.Item>\r\n            </Form>\r\n        </Spin>\r\n    )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { Form, Select, Spin, Switch } from 'antd'\r\nimport { useMutation, useQuery } from '@apollo/client'\r\nimport IntlMessage from 'components/util-components/IntlMessage'\r\nimport { ALL_FLEX_TIMES, CREATE_FLEX_TIME, UPDATE_FLEX_TIME } from 'graphql/flex-time'\r\nimport { SELECT_PROGRAM } from 'graphql/select'\r\n\r\nconst { Option } = Select\r\n\r\nexport default function FlexTimeForm({ handleCancel, flexTime }) {\r\n\r\n    const [form] = Form.useForm()\r\n\r\n    const { data: programData } = useQuery(SELECT_PROGRAM)\r\n\r\n    const [create, { loading: createLoading }] = useMutation(CREATE_FLEX_TIME, {\r\n        refetchQueries: [\r\n            {\r\n                query: ALL_FLEX_TIMES\r\n            }\r\n        ],\r\n        onCompleted: res => {\r\n            handleCancel()\r\n        }\r\n    })\r\n    const [update, { loading: updateLoading }] = useMutation(UPDATE_FLEX_TIME, {\r\n        refetchQueries: [\r\n            {\r\n                query: ALL_FLEX_TIMES\r\n            }\r\n        ],\r\n        onCompleted: res => {\r\n            handleCancel()\r\n        }\r\n    })\r\n\r\n    function onFinish(values) {\r\n        if (flexTime) {\r\n            values.id = flexTime.id\r\n            update({ variables: values })\r\n        } else {\r\n            create({ variables: values })\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (flexTime) {\r\n            form.setFieldsValue({\r\n                program: flexTime.program.id,\r\n                isCurrent: flexTime.isCurrent\r\n            })\r\n        }\r\n    }, [form, flexTime])\r\n\r\n\r\n    return (\r\n        <Spin\r\n            tip=\"Ачааллаж байна...\"\r\n            spinning={updateLoading || createLoading}\r\n        >\r\n            <Form\r\n                id=\"FlexTimeForm\"\r\n                layout={'vertical'}\r\n                form={form}\r\n                name=\"FlexTimeForm\"\r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item name=\"program\" label={<IntlMessage id=\"program\" />} rules={[\r\n                    {\r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    },\r\n                ]}>\r\n                    <Select>\r\n                        {programData?.allPrograms.map(program => (\r\n                            <Option key={program.id} value={program.id}>{program.program}</Option>\r\n                        ))}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item name=\"isCurrent\" label={<IntlMessage id=\"isCurrent\" />} valuePropName=\"checked\" rules={[\r\n                    {\r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    },\r\n                ]}>\r\n                    <Switch checkedChildren=\"Үндсэн\" unCheckedChildren=\"Үндсэн биш\" />\r\n                </Form.Item>\r\n            </Form>\r\n        </Spin>\r\n    )\r\n}\r\n","import React, { useRef, useState } from 'react'\r\nimport { useMutation, useQuery } from '@apollo/client'\r\nimport { PlusCircleOutlined } from '@ant-design/icons';\r\nimport Loading from 'components/shared-components/Loading'\r\nimport { ALL_FLEX_TIMES, ALL_FLEX_TIME_SUBS, DELETE_FLEX_TIME, DELETE_FLEX_TIME_SUB } from 'graphql/flex-time'\r\nimport { classNames } from 'utils'\r\nimport FlexTimeSubForm from './flex-time-sub-form'\r\nimport FormModal from 'components/shared-components/FormModal'\r\nimport { Button, Modal } from 'antd'\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport { CheckPer } from 'hooks/checkPermission';\r\nimport { PencilIcon, XIcon } from '@heroicons/react/outline';\r\nimport FlexTimeForm from './flex-time-form';\r\n\r\nconst { confirm } = Modal;\r\n\r\nfunction FlexTimeSub({ flexTime }) {\r\n\r\n    const modalRef = useRef();\r\n\r\n    const permissions = {\r\n        create: CheckPer('add_flex_time_sub'),\r\n        update: CheckPer('change_flex_time_sub'),\r\n        delete: CheckPer('delete_flex_time_sub')\r\n    }\r\n\r\n    const { data, loading, refetch } = useQuery(ALL_FLEX_TIME_SUBS, {\r\n        variables: { flexTime: flexTime }\r\n    })\r\n\r\n    const [destroy] = useMutation(DELETE_FLEX_TIME_SUB, {\r\n        onCompleted: res => {\r\n            refetch()\r\n        }\r\n    })\r\n\r\n    const [selectedFlexTimeSub, setSelectedFlexTimeSub] = useState(undefined)\r\n\r\n    function handleCancel() {\r\n        modalRef.current.handleCancel()\r\n        setSelectedFlexTimeSub(undefined)\r\n    }\r\n\r\n    function handleOpen({ flexTimeSub }) {\r\n        if (permissions.update) {\r\n            modalRef.current.handleOpen()\r\n            setSelectedFlexTimeSub(flexTimeSub)\r\n        }\r\n    }\r\n\r\n    function handleDelete(id) {\r\n        confirm({\r\n            title: 'Устгах уу?',\r\n            okText: 'Устгах',\r\n            okType: 'danger',\r\n            cancelText: 'Болих',\r\n            onOk() {\r\n                destroy({ variables: { id: id } });\r\n            },\r\n        });\r\n    }\r\n\r\n    if (loading) {\r\n        return <Loading cover='content' />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {permissions.update &&\r\n                <FormModal\r\n                    ref={modalRef}\r\n                    formName=\"FlexTimeSubForm\"\r\n                    forceRender={true}\r\n                >\r\n                    <FlexTimeSubForm\r\n                        handleCancel={handleCancel}\r\n                        flexTime={flexTime}\r\n                        flexTimeSub={selectedFlexTimeSub}\r\n                    />\r\n                </FormModal>\r\n            }\r\n            <div className='flex justify-end mb-4'>\r\n                {permissions.create &&\r\n                    <Button\r\n                        onClick={() => handleOpen({ flexTimeSub: undefined })}\r\n                        type=\"primary\"\r\n                        icon={<PlusCircleOutlined />}\r\n                    >\r\n                        {` `}<IntlMessage id=\"add_new\" />\r\n                    </Button>\r\n                }\r\n            </div>\r\n            <div className='space-y-2'>\r\n                {data?.allFlexTimeSubs.map((flexTimeSub, index) => (\r\n                    <div\r\n                        key={index}\r\n                        className='relative flex flex-row gap-3 rounded-2 bg-mkp-200 hover:cursor-pointer'\r\n                        onClick={() => handleOpen({ flexTimeSub: flexTimeSub })}\r\n                    >\r\n                        {permissions.delete &&\r\n                            <div\r\n                                className='absolute right-0 p-2'\r\n                                onClick={e => (e && e.stopPropagation) && e.stopPropagation()}\r\n                            >\r\n                                <XIcon\r\n                                    className='h-4 w-4 hover:text-red-500'\r\n                                    onClick={() => handleDelete(flexTimeSub.id)}\r\n                                />\r\n                            </div>\r\n                        }\r\n                        <div className='flex flex-col items-center justify-center w-20 gap-2 mx-4 text-slate-600'>\r\n                            <span className='mt-2 after:content-[\"\"] after:border-l-4 after:h-20 after:w-0 after:mx-auto after:border-slate-600 after:block after:rounded-2'>\r\n                                {flexTimeSub.startAt.slice(0, 5).toString()}\r\n                            </span>\r\n                            <span className='mb-2'>\r\n                                {flexTimeSub.endAt.slice(0, 5).toString()}\r\n                            </span>\r\n                        </div>\r\n                        <div className='py-4'>\r\n                            <p className='text-xl font-bold'>{flexTimeSub.action}</p>\r\n                            <div className='text-sm text-slate-600'>\r\n                                {flexTimeSub.content}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default function Index() {\r\n\r\n    const modalRef = useRef();\r\n\r\n    const [selectedFlexTime, setSelectedFlexTime] = useState(undefined)\r\n\r\n    const permissions = {\r\n        create: CheckPer('add_flex_time'),\r\n        update: CheckPer('change_flex_time'),\r\n        delete: CheckPer('delete_flex_time')\r\n    }\r\n\r\n    const { data: flexTimesData, loading: flexTimesLoading, refetch } = useQuery(ALL_FLEX_TIMES)\r\n\r\n    const [destroy] = useMutation(DELETE_FLEX_TIME, {\r\n        onCompleted: res => {\r\n            refetch()\r\n            setSelectedFlexTime(undefined)\r\n        }\r\n    })\r\n\r\n    function onFlexTimeClick(flexTime) {\r\n        setSelectedFlexTime(flexTime)\r\n    }\r\n\r\n    function handleCancel() {\r\n        modalRef.current.handleCancel()\r\n    }\r\n\r\n    function handleOpen({ flexTime }) {\r\n        if (permissions.update) {\r\n            modalRef.current.handleOpen()\r\n            setSelectedFlexTime(flexTime)\r\n        }\r\n    }\r\n\r\n    function handleDelete(id) {\r\n        confirm({\r\n            title: 'Устгах уу?',\r\n            okText: 'Устгах',\r\n            okType: 'danger',\r\n            cancelText: 'Болих',\r\n            onOk() {\r\n                destroy({ variables: { id: id } });\r\n            },\r\n        });\r\n    }\r\n\r\n    if (flexTimesLoading) {\r\n        return (<Loading cover='content' />)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className='max-w-5xl mx-auto'>\r\n                {permissions.update &&\r\n                    <FormModal\r\n                        ref={modalRef}\r\n                        formName=\"FlexTimeForm\"\r\n                        forceRender={true}\r\n                    >\r\n                        <FlexTimeForm\r\n                            handleCancel={handleCancel}\r\n                            flexTime={selectedFlexTime}\r\n                        />\r\n                    </FormModal>\r\n                }\r\n                <div className='flex justify-end mb-4'>\r\n                    {permissions.create &&\r\n                        <Button\r\n                            onClick={() => handleOpen({ flexTime: undefined })}\r\n                            type=\"primary\"\r\n                            icon={<PlusCircleOutlined />}\r\n                        >\r\n                            {` `}<IntlMessage id=\"add_new\" />\r\n                        </Button>\r\n                    }\r\n                </div>\r\n                <div className='mb-4'>\r\n                    <div className='flex flex-wrap gap-5'>\r\n                        {flexTimesData.allFlexTimes.map((flexTime, index) => (\r\n                            <div\r\n                                key={index}\r\n                                onClick={() => onFlexTimeClick(flexTime)}\r\n                                className={classNames(\r\n                                    selectedFlexTime === flexTime ? 'bg-mkp-300' : 'bg-mkp-200',\r\n                                    'relative flex-grow basis-60 text-center rounded-2 hover:cursor-pointer'\r\n                                )}\r\n                            >\r\n                                {permissions.delete &&\r\n                                    <div\r\n                                        className='absolute right-0 p-2 flex gap-2'\r\n                                        onClick={e => (e && e.stopPropagation) && e.stopPropagation()}\r\n                                    >\r\n                                        <PencilIcon\r\n                                            className='h-4 w-4 hover:text-yellow-500'\r\n                                            onClick={() => handleOpen({ flexTime: flexTime })}\r\n                                        />\r\n                                        <XIcon\r\n                                            className='h-4 w-4 hover:text-red-500'\r\n                                            onClick={() => handleDelete(flexTime.id)}\r\n                                        />\r\n                                    </div>\r\n                                }\r\n                                <p className='p-4 '>{flexTime.program.program}</p>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n                {selectedFlexTime && <FlexTimeSub flexTime={selectedFlexTime.id} />}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n"],"names":["FormModal","forwardRef","ref","children","title","footer","formName","forceRender","useState","isModalVisible","setIsModalVisible","useImperativeHandle","handleOpen","handleCancel","width","visible","onCancel","current","okText","cancelText","okButtonProps","form","key","htmlType","SELECT_STUDENT","gql","SELECT_TEACHER","SELECT_CLASSES","SELECT_SUBJECT","SELECT_PROGRAM","SECTIONS_BY_PROGRAM","SELECT_SECTION","SELECT_STUDENT_PAGINATION","ALL_FLEX_TIMES","CREATE_FLEX_TIME","UPDATE_FLEX_TIME","DELETE_FLEX_TIME","ALL_FLEX_TIME_SUBS","CREATE_FLEX_TIME_SUB","UPDATE_FLEX_TIME_SUB","DELETE_FLEX_TIME_SUB","FlexTimeSubForm","flexTime","flexTimeSub","Form","useMutation","refetchQueries","query","variables","onCompleted","res","create","createLoading","loading","update","updateLoading","useEffect","setFieldsValue","start_end_date","moment","startAt","endAt","tip","spinning","id","layout","name","onFinish","values","format","label","IntlMessage","rules","required","message","Option","Select","FlexTimeForm","programData","useQuery","data","program","isCurrent","allPrograms","map","value","valuePropName","checkedChildren","unCheckedChildren","confirm","Modal","FlexTimeSub","modalRef","useRef","permissions","CheckPer","delete","refetch","destroy","undefined","selectedFlexTimeSub","setSelectedFlexTimeSub","Loading","cover","className","onClick","type","icon","PlusCircleOutlined","allFlexTimeSubs","index","e","stopPropagation","XIcon","okType","onOk","slice","toString","action","content","Index","selectedFlexTime","setSelectedFlexTime","flexTimesData","flexTimesLoading","allFlexTimes","onFlexTimeClick","classNames","PencilIcon"],"sourceRoot":""}