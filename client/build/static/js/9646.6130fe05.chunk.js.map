{"version":3,"file":"static/js/9646.6130fe05.chunk.js","mappings":"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","sources":["components/shared-components/Flex/index.js","graphql/all.js","graphql/food.js","views/app-views/web-configs/food-menu/form.js","views/app-views/web-configs/food-menu/table.js","views/app-views/web-configs/food-menu/index.js"],"sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Flex = props => {\r\n\tconst { children, className, alignItems, justifyContent, mobileFlex, flexDirection } = props\r\n\tconst getFlexResponsive = () => mobileFlex ? 'd-flex' : 'd-md-flex'\r\n\treturn (\r\n\t\t<div className={`${getFlexResponsive()} ${className} ${flexDirection?('flex-' + flexDirection): ''} ${alignItems?('align-items-' + alignItems):''} ${justifyContent?('justify-content-' + justifyContent):''}` }>\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nFlex.propTypes = {\r\n\tclassName: PropTypes.string,\r\n\talignItems: PropTypes.string,\r\n\tflexDirection: PropTypes.string,\r\n\tjustifyContent: PropTypes.string,\r\n\tmobileFlex: PropTypes.bool\r\n}\r\n\r\nFlex.defaultProps = {\r\n\tmobileFlex: true,\r\n\tflexDirection: 'row',\r\n\tclassName: ''\r\n};\r\n\r\n\r\nexport default Flex\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const ALL_SUBJECTS = gql`\r\n    query allSubjects ($offset: Int!, $limit: Int!, $filter: String) {\r\n        allSubjects (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            subSchool {\r\n                id\r\n                name\r\n            }\r\n            subject \r\n            credit\r\n            content\r\n            createUserid{\r\n                teacher{\r\n                    familyName\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_SUBJECTS_PAGINATION = gql`\r\n    query allSubjectsPagination ($page: Int!, $perPage: Int!, $filter: String) {\r\n        allSubjectsPagination (page: $page, perPage: $perPage, filter: $filter) {\r\n            page\r\n            perPage\r\n            pageCount\r\n            totalCount\r\n            records {\r\n                id\r\n                school {\r\n                    id\r\n                    name\r\n                }\r\n                subSchool {\r\n                    id\r\n                    name\r\n                }\r\n                subject \r\n                credit\r\n                content\r\n                createUserid{\r\n                    teacher{\r\n                        familyName\r\n                        name\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const TEACHER_STATUS = gql`\r\n    query allTeacherStatuss {\r\n        allTeacherStatuss {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\nexport const STUDENT_STATUS = gql`\r\n    query allStudentStatuss {\r\n        allStudentStatuss {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\nexport const STUDENT_STATUS_EXTRA = gql`\r\n    query allStudentStatusExtras {\r\n        allStudentStatusExtras {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_USERS = gql`\r\n    query allUsers {\r\n        allUsers {\r\n            id\r\n            username\r\n            email\r\n        }\r\n    }\r\n`;\r\n\r\nexport const USER_BY_USERNAME = gql`\r\n    query userByUsername($username: String!) {\r\n        userByUsername(username: $username) {\r\n            id\r\n            username\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_EMPLOYEES_ATTANDANCE_BY_RANGE = gql`\r\n    query employeesAttandanceByRange ($startDate: DateTime!, $endDate: DateTime!) {\r\n        employeesAttandanceByRange (startDate: $startDate, endDate: $endDate) {\r\n            id\r\n            isIn\r\n            isOut\r\n            timeIn\r\n            timeOut\r\n            user {\r\n                id\r\n                isTeacher\r\n                isEmployee\r\n                teacher {\r\n                    familyName\r\n                    name\r\n                    teacherCode\r\n                }\r\n                employee {\r\n                    familyName\r\n                    name\r\n                    employeeCode\r\n                }\r\n                groups {\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_TEACHER_AND_EMPLOYESS = gql`\r\n    query allAttendaceEmployees {\r\n        allAttendaceEmployees {\r\n            username\r\n            email\r\n            isTeacher\r\n            isEmployee\r\n            teacher {\r\n                teacherCode\r\n                familyName\r\n                name\r\n            }\r\n            employee {\r\n                employeeCode\r\n                familyName\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_EMPLOYEES_COMPARTMENT = gql`\r\n    query allEmployeesCompartment {\r\n        allEmployeesCompartment {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_EMPLOYEES = gql`\r\n    query allEmployees ($filter: String) {\r\n        allEmployees (filter: $filter) {\r\n            id\r\n            user {\r\n                id\r\n                username\r\n                email\r\n                groups {\r\n                    name\r\n                }\r\n            }\r\n            compartment {\r\n                id\r\n                name\r\n            }\r\n            employeeCode\r\n            familyName\r\n            name\r\n            registerNo\r\n            photo\r\n            phone\r\n            phone2\r\n            address\r\n            sex\r\n            birthdate\r\n            birthCity {\r\n                id\r\n            }\r\n            birthDistrict {\r\n                id\r\n            }\r\n            status {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_TEACHERS = gql`\r\n  \tquery allTeachers ($offset: Int!, $limit: Int!, $filter: String) {\r\n        allTeachers (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            user {\r\n                id\r\n                username\r\n                email\r\n            }\r\n            teacherCode\r\n            degree{\r\n                id\r\n            }\r\n            access\r\n            familyName\r\n            name\r\n            registerNo\r\n            photo\r\n            phone\r\n            phone2\r\n            address\r\n            joinDate\r\n            joinBefore\r\n            sex\r\n            birthdate\r\n            birthCity {\r\n                id\r\n                name\r\n            }\r\n            birthDistrict {\r\n                id\r\n                name\r\n            }\r\n            status {\r\n                id\r\n                name\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            subSchool {\r\n                id\r\n                name\r\n            }\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const ALL_STUDENTS = gql`\r\n  \tquery allStudents ($filter: String, $program: Int, $classes: Int, $section: Int) {\r\n        allStudents (filter: $filter, program: $program, classes: $classes, section: $section) {\r\n            id\r\n            user {\r\n                id\r\n                username\r\n                email\r\n            }\r\n            studentCode\r\n            surname\r\n            familyName\r\n            name\r\n            religion\r\n            registerNo\r\n            nationality\r\n            state\r\n            photo\r\n            phone\r\n            address\r\n            activity {\r\n                id\r\n                name\r\n            }\r\n            joinDate\r\n            sex\r\n            birthdate\r\n            classtime {\r\n                id\r\n                name\r\n            }\r\n            birthCity {\r\n                id\r\n                name\r\n            }\r\n            birthDistrict {\r\n                id\r\n                name\r\n            }\r\n            status {\r\n                id\r\n                name\r\n            }\r\n            statusExtra {\r\n                id\r\n                name\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            classes {\r\n                id\r\n                classes\r\n            }\r\n            section {\r\n                id\r\n                section\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            joinSchoolyear {\r\n                id\r\n                schoolyear\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_CITYS = gql`\r\n  \tquery allCitys{\r\n        allCitys {\r\n            id\r\n            name\r\n            code\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const ALL_DISTRICTS = gql`\r\n    query allDistricts {\r\n        allDistricts {\r\n            id\r\n            code\r\n            name\r\n            cityID {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_PROGRAMS = gql`\r\n  \tquery allPrograms{\r\n        allPrograms {\r\n            id\r\n            program\r\n            programMgl\r\n            maxStudentNum\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            subSchool {\r\n                id\r\n                name\r\n            }\r\n            status\r\n            createdAt\r\n            updatedAt\r\n        }\r\n\t  }\r\n`;\r\n\r\nexport const ALL_SCHOOLS = gql`\r\n  \tquery allSchools {\r\n        allSchools {\r\n            id\r\n            name\r\n            nameMgl\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const ALL_SUB_SCHOOLS = gql`\r\n  \tquery allSubSchools{\r\n        allSubSchools {\r\n            id\r\n            name\r\n            nameMgl\r\n            school {\r\n                id\r\n                name\r\n            }\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nexport const ALL_SECTIONS = gql`\r\n    query allSections {\r\n        allSections {\r\n            id\r\n            section\r\n            classes {\r\n                id\r\n                classes\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            teacher{\r\n                id\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            subSchool {\r\n                id\r\n                name\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            createdAt\r\n            updatedAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_CLASSESS = gql`\r\n    query allClassess ($program: Int!, $offset: Int!, $limit: Int!, $filter: String) {\r\n        allClassess (program: $program, offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            classes\r\n            activity {\r\n                id\r\n                name\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            status\r\n        }\r\n    }\r\n`\r\nexport const ALL_CLASSTIME = gql`\r\n    query allClasstimes {\r\n        allClasstimes {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\nexport const ALL_SCHOOL_YEAR = gql`\r\n    query allSchoolyears {\r\n        allSchoolyears {\r\n            id\r\n            schoolyear\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_PARENTS = gql`\r\n    query allParents ($offset: Int!, $limit: Int!, $filter: String) {\r\n        allParents (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            familyName\r\n            name\r\n            profession\r\n            phone\r\n            address\r\n            student {\r\n                id\r\n                studentCode\r\n                familyName\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SECTION_BY_CLASSES = gql`\r\n    query sectionsByClasses ($classes: Int!) {\r\n        sectionsByClasses (classes: $classes) {\r\n            id\r\n            section\r\n            maxStudentNum\r\n            teacher{\r\n                name\r\n                id\r\n            }\r\n            classes {\r\n                id\r\n                classes\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const TRANSFER_BY_STUDENT = gql`\r\n    query transfersByStudent ($student: Int!) {\r\n        transfersByStudent (student: $student) {\r\n            id\r\n            student {\r\n                familyName\r\n                name\r\n                photo\r\n                studentCode\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            classes {\r\n                id\r\n                classes\r\n            }\r\n            section {\r\n                id\r\n                section\r\n            }\r\n            status {\r\n                id\r\n                name\r\n            }\r\n            statusExtra {\r\n                id\r\n                name\r\n            }\r\n            classtime {\r\n                id\r\n                name\r\n            }\r\n            activity {\r\n                id\r\n                name\r\n            }\r\n            docDate\r\n            docNum\r\n            description\r\n            oldData\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_EVENT_TYPES = gql`\r\n    query allEventTypes {\r\n        allEventTypes {\r\n            id\r\n            name\r\n            color\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_EVENTS = gql`\r\n    query allEvents {\r\n        allEvents {\r\n            id\r\n            title\r\n            description\r\n            content\r\n            startAt\r\n            endAt\r\n            eventType {\r\n                id\r\n                name\r\n                color\r\n            }\r\n        }\r\n    } \r\n`;\r\n\r\nexport const ALL_EVENTS_BY_DATE = gql `\r\n    query allEventsByDate ($date: Date) {\r\n        allEventsByDate (date: $date) {\r\n            id\r\n            title\r\n            description\r\n            content\r\n            startAt\r\n            endAt\r\n            eventType {\r\n                id\r\n                name\r\n                color\r\n            }\r\n        }\r\n    } \r\n`;\r\n\r\nexport const ALL_EVENTS_BY_TYPE = gql`\r\n    query allEventsByType ($id: Int!) {\r\n        allEventsByType (id: $id) {\r\n            id\r\n            title\r\n            description\r\n            content\r\n            startAt\r\n            endAt\r\n            eventType\r\n        }\r\n    }\r\n`;","import { gql } from \"@apollo/client\";\r\n\r\nexport const ALL_FOOD_MENUS = gql`\r\n    query allFoodMenus ($filter: String) {\r\n        allFoodMenus (filter: $filter){\r\n            id\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            name \r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_FOOD_MENU = gql`\r\n    mutation createFoodMenu ($name: String, $program: ID){\r\n        createFoodMenu(name: $name, program: $program){\r\n            foodMenu{\r\n                id\r\n            }\r\n        }\r\n    }\r\n\r\n`;\r\n\r\nexport const UPDATE_FOOD_MENU = gql `\r\n    mutation updateFoodMenu ($id: ID, $name: String, $program: ID){\r\n        updateFoodMenu (id: $id, name: $name, program: $program){\r\n            foodMenu{\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_FOOD_MENU = gql `\r\n    mutation deleteFoodMenu ($id: ID){\r\n        deleteFoodMenu (id: $id){\r\n            foodMenu{\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_FOODS = gql `\r\n    query allFoods ($foodMenu: ID!) {\r\n        allFoods (foodMenu: $foodMenu){\r\n            id\r\n            name\r\n            ingredients\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_FOOD = gql `\r\n    mutation createFood ($foodMenu: ID, $ingredients: String, $name: String){\r\n        createFood (foodMenu: $foodMenu, ingredients: $ingredients, name: $name) {\r\n            food {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_FOOD = gql `\r\n    mutation updateFood ($foodMenu: ID, $id: ID, $ingredients: String, $name: String){\r\n        updateFood (foodMenu: $foodMenu, id: $id, ingredients: $ingredients, name: $name){\r\n            food {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_FOOD = gql `\r\n    mutation deleteFood ($id: ID){\r\n        deleteFood (id: $id){\r\n            food {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_DAILY_MENUS = gql`\r\n    query allDailyMenus {\r\n        allDailyMenus {\r\n            id\r\n            program {\r\n                program\r\n            }\r\n            name\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const CREATE_DAILY_MENU = gql`\r\n    mutation createDailyMenu ($name: String, $program: ID) {\r\n        createDailyMenu (name: $name, program: $program) {\r\n            dailyMenu {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const DELETE_DAILY_MENU = gql `\r\n    mutation deleteDailyMenu ($id: ID){\r\n        deleteDailyMenu (id: $id){\r\n            dailyMenu {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_DAILY_MENU_FOODS = gql `\r\n    query allDailyMenuFoods ($dailyMenu: ID!){\r\n        allDailyMenuFoods (dailyMenu: $dailyMenu){\r\n            id\r\n            food {\r\n                name\r\n                ingredients\r\n                foodfileSet {\r\n                    image\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const FOOD_BYID = gql `\r\n    query foodById ($id: ID!){\r\n        foodById (id: $id){\r\n            id\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_FOOD_FILES_BYFOOD = gql `\r\n    query allFoodFilesByFood ($food: ID!){\r\n        allFoodFilesByFood (food: $food){\r\n            id\r\n            image\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_FOOD_FILE = gql `\r\n    mutation createFoodFile ($food: ID, $image: Upload!){\r\n        createFoodFile (food: $food, image: $image){\r\n            foodFile {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_FOOD_FILE = gql `\r\n    mutation deleteFoodFile ($id: ID){\r\n        deleteFoodFile (id: $id){\r\n            foodFile {\r\n                image\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const CREATE_DAILY_MENU_FOOD = gql`\r\n    mutation createDailyMenuFood ($dailyMenu: ID, $food: ID) {\r\n        createDailyMenuFood (dailyMenu: $dailyMenu, food: $food) {\r\n            dailyMenuFood {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`","import React, { useEffect } from 'react';\r\nimport { Form, Input, message, Select, Spin } from 'antd';\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport { ALL_FOOD_MENUS, CREATE_FOOD_MENU, UPDATE_FOOD_MENU } from 'graphql/food';\r\nimport { ALL_PROGRAMS } from 'graphql/all';\r\n\r\nconst { Option } = Select\r\n\r\nfunction DegreeForm({ formType, editData, setIsModalVisible }) {\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const [create, { loading: createLoading }] = useMutation(CREATE_FOOD_MENU, {\r\n        refetchQueries: [\r\n            { query: ALL_FOOD_MENUS },\r\n            'allFoodMenus'\r\n        ],\r\n        onCompleted: data => {\r\n            message.success('Амжилттай хадгаллаа');\r\n            setIsModalVisible(false);\r\n        }\r\n    });\r\n\r\n    const [update, { loading: updateLoading }] = useMutation(UPDATE_FOOD_MENU, {\r\n        refetchQueries: [\r\n            { query: ALL_FOOD_MENUS },\r\n            'allFoodMenus'\r\n        ],\r\n        onCompleted: data => {\r\n            message.success('Амжилттай хадгаллаа');\r\n            setIsModalVisible(false);\r\n        }\r\n    });\r\n\r\n    const { data: programs } = useQuery(ALL_PROGRAMS)\r\n\r\n    useEffect(() => {\r\n        if (formType === \"edit\") {\r\n            const newData = {\r\n                program: editData.program.id,\r\n                name: editData.name\r\n            }\r\n            form.setFieldsValue(newData);\r\n        } else if (formType === \"create\") {\r\n            form.resetFields();\r\n        }\r\n    }, [editData, form, formType]);\r\n\r\n\r\n\r\n    const onFinish = values => {\r\n        if (formType === \"edit\") {\r\n            values.id = editData.id;\r\n            update({ variables: values });\r\n        } else {\r\n            create({ variables: values });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Spin spinning={createLoading || updateLoading} tip=\"Ачааллаж байна...\">\r\n            <Form\r\n                id=\"DegreeForm\"\r\n                layout={'vertical'}\r\n                form={form}\r\n                name=\"control-hooks\"\r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item name=\"name\" label={<IntlMessage id=\"name\" />} rules={[\r\n                    {\r\n                        required: true,\r\n                        message: \"Хоосон орхих боломжгүй\"\r\n                    }\r\n                ]}>\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item name=\"program\" label={<IntlMessage id=\"program\" />} rules={[\r\n                    {\r\n                        required: true,\r\n                        message: \"Хоосон орхих боломжгүй\"\r\n                    }\r\n                ]}>\r\n                    <Select>\r\n                        {programs?.allPrograms.map((item, index) => (\r\n                            <Option key={index} value={item.id}>{item.program}</Option>\r\n                        ))}\r\n                    </Select>\r\n                </Form.Item>\r\n            </Form>\r\n        </Spin>\r\n    );\r\n};\r\n\r\nexport default DegreeForm","import React, { useState } from 'react'\r\nimport { Card, Table, Input, Spin, Empty, Modal, message, Button } from 'antd';\r\nimport { DeleteTwoTone, SearchOutlined, EditTwoTone, PlusCircleOutlined, EyeTwoTone } from '@ant-design/icons';\r\nimport Flex from 'components/shared-components/Flex'\r\nimport utils from 'utils'\r\nimport DegreeForm from './form'\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport { ALL_FOOD_MENUS, DELETE_FOOD_MENU } from 'graphql/food';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction  FoodMenuTable (props) {\r\n    \r\n\tconst [filter, setFilter] = useState(\"\")\r\n\r\n\tconst { loading, data } = useQuery(ALL_FOOD_MENUS, {\r\n\t\tvariables: { filter: filter }\r\n\t});\r\n\r\n\tconst [isModalVisible, setIsModalVisible] = useState(false);\r\n\tconst [editData, setEditData] = useState([]);\r\n\tconst [formType, setFormType] = useState(\"\");\r\n\r\n    const showModal = () => {\r\n\t\tsetFormType(\"create\");\r\n      \tsetIsModalVisible(true);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n      \tsetIsModalVisible(false);\r\n    };\r\n\r\n\tconst editRow = row => {\r\n\t\tsetFormType(\"edit\");\r\n\t\tsetEditData(row);\r\n\t\tsetIsModalVisible(true);\r\n\t};\r\n\r\n\tconst { confirm } = Modal;\r\n\r\n\tconst [deleteDegree, { loading: loadingDelete }] = useMutation(DELETE_FOOD_MENU, {\r\n\t\trefetchQueries: [ALL_FOOD_MENUS],\r\n\t\tonCompleted: data => {\r\n            message.success('Амжилттай устлаа');\r\n\t\t}\r\n\t});\r\n\t\r\n\tfunction deleteRow(row) {\r\n\t\tconfirm({\r\n\t\t  title: 'Устгах уу?',\r\n\t\t  okText: 'Устгах',\r\n\t\t  okType: 'danger',\r\n\t\t  cancelText: 'Болих',\r\n\t\t  onOk() {\r\n\t\t\tdeleteDegree({ variables: { id: row.id } }); \r\n\t\t  },\r\n\t\t});\r\n\t}\r\n\r\n\tconst tableColumns = [\r\n\t\t{\r\n\t\t\tkey: 'name',\r\n\t\t\ttitle: <IntlMessage id=\"name\" />,\r\n\t\t\tdataIndex: 'name',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'name')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'program',\r\n\t\t\ttitle: <IntlMessage id=\"program\" />,\r\n\t\t\tdataIndex: ['program', 'program'],\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'program')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'actions',\r\n\t\t\ttitle: <IntlMessage id=\"main.action\" />,\r\n\t\t\twidth: `20vw`,\r\n\t\t\tdataIndex: 'actions',\r\n\t\t\trender: (_, elm) => (\r\n\t\t\t\t<div className=\"text-center\">\r\n\t\t\t\t\t{ props.permissions.edit === true &&\r\n\t\t\t\t\t\t<Link to={`food-menu/${elm.id}`}>\r\n\t\t\t\t\t\t\t<Button size='small' type='text' key=\"1\">\r\n\t\t\t\t\t\t\t\t<EyeTwoTone/>\r\n\t\t\t\t\t\t\t\t<span className=\"ml-2\"> <IntlMessage id=\"food\" /></span>\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t}\r\n\t\t\t\t\t{ props.permissions.edit === true &&\r\n\t\t\t\t\t\t<Button size='small' type='text' key=\"2\" onClick={() => editRow(elm)}>\r\n\t\t\t\t\t\t\t<EditTwoTone twoToneColor=\"#ffdb00\"/>\r\n\t\t\t\t\t\t\t<span className=\"ml-2\"> <IntlMessage id=\"edit\" /></span>\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t}\r\n\t\t\t\t\t{ props.permissions.destroy === true &&\r\n\t\t\t\t\t\t<Button size='small' type='text' key=\"3\" onClick={() => deleteRow(elm)}>\r\n\t\t\t\t\t\t\t<DeleteTwoTone twoToneColor=\"#f42f2f\"/>\r\n\t\t\t\t\t\t\t<span className=\"ml-2\"> <IntlMessage id=\"delete\" /></span>\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t}\r\n\t];\r\n\r\n\tconst onSearch = e => {\r\n\t\tconst value = e.currentTarget.value\r\n\t\tsetFilter(value)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Modal\r\n                visible={isModalVisible} \r\n\t\t\t\tokText={<IntlMessage id=\"main.okText\" />}\r\n\t\t\t\tcancelText={<IntlMessage id=\"main.cancelText\" />}\r\n\t\t\t\tonCancel={handleCancel}\r\n\t\t\t\tokButtonProps={{form:'DegreeForm', key: 'submit', htmlType: 'submit'}}\r\n            >\r\n                <DegreeForm editData={editData} formType={formType} setIsModalVisible={setIsModalVisible} />\r\n            </Modal>\r\n\t\t\t<Card>\r\n\t\t\t\t<Flex alignItems=\"center\" justifyContent=\"between\" mobileFlex={false}>\r\n\t\t\t\t\t<Flex className=\"mb-1\" mobileFlex={false}>\r\n\t\t\t\t\t\t<div className=\"mr-md-3 mb-3\">\r\n\t\t\t\t\t\t\t<Input placeholder={'Хайх'} prefix={<SearchOutlined />} onChange={e => onSearch(e)}/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Flex>\r\n\t\t\t\t\t{ props.permissions.create === true && \r\n\t\t\t\t\t\t<div className=\"mr-md-3 mb-3\">\r\n\t\t\t\t\t\t\t<Button onClick={showModal} type=\"primary\" icon={<PlusCircleOutlined />} block> <IntlMessage id=\"add_new\" /></Button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t</Flex>\r\n\t\t\t\t<div className=\"table-responsive\">\r\n\t\t\t\t\t<Table \r\n\t\t\t\t\t\tcolumns={tableColumns} \r\n\t\t\t\t\t\tdataSource={data?.allFoodMenus}\r\n\t\t\t\t\t\tsize='small'\r\n\t\t\t\t\t\trowKey='id'  \r\n\t\t\t\t\t\tbordered\r\n\t\t\t\t\t\tlocale={{\r\n\t\t\t\t\t\t\temptyText: loading || loadingDelete ? <Spin /> : <Empty />\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</Card>\r\n\t\t</>\r\n\t\t\r\n\t)\r\n}\r\n\r\nexport default FoodMenuTable\r\n","import React from \"react\";\r\nimport DegreeTable from './table';\r\nimport { CheckPer } from 'hooks/checkPermission';\r\nimport Loading from \"components/shared-components/Loading\";\r\n\r\nconst Index = () => {\r\n\r\n    const create = CheckPer('add_degree');\r\n    const edit = CheckPer('change_degree');\r\n    const destroy = CheckPer('delete_degree');\r\n\r\n    const permissions = {\r\n        create: create,\r\n        edit: edit,\r\n        destroy: destroy\r\n    }\r\n\r\n    if (Object.values(permissions).indexOf('loading') > -1) {\r\n        return <Loading cover=\"content\" />\r\n    }\r\n\r\n    return (\r\n        <DegreeTable permissions={permissions} />\r\n    )\r\n}\r\n\r\nexport default Index;\r\n"],"names":["Flex","props","children","className","alignItems","justifyContent","mobileFlex","flexDirection","defaultProps","ALL_SUBJECTS","gql","ALL_SUBJECTS_PAGINATION","ALL_USERS","ALL_EMPLOYEES_ATTANDANCE_BY_RANGE","ALL_EMPLOYEES_COMPARTMENT","ALL_EMPLOYEES","ALL_TEACHERS","ALL_STUDENTS","ALL_CITYS","ALL_DISTRICTS","ALL_PROGRAMS","ALL_SCHOOLS","ALL_SUB_SCHOOLS","ALL_SECTIONS","ALL_CLASSESS","ALL_CLASSTIME","ALL_SCHOOL_YEAR","ALL_PARENTS","SECTION_BY_CLASSES","TRANSFER_BY_STUDENT","ALL_EVENT_TYPES","ALL_EVENTS","ALL_EVENTS_BY_DATE","ALL_FOOD_MENUS","CREATE_FOOD_MENU","UPDATE_FOOD_MENU","DELETE_FOOD_MENU","ALL_FOODS","CREATE_FOOD","UPDATE_FOOD","DELETE_FOOD","ALL_DAILY_MENUS","CREATE_DAILY_MENU","DELETE_DAILY_MENU","ALL_DAILY_MENU_FOODS","ALL_FOOD_FILES_BYFOOD","CREATE_FOOD_FILE","CREATE_DAILY_MENU_FOOD","Option","Select","formType","editData","setIsModalVisible","Form","form","useMutation","refetchQueries","query","onCompleted","data","message","create","createLoading","loading","update","updateLoading","programs","useQuery","useEffect","newData","program","id","name","setFieldsValue","resetFields","spinning","tip","layout","onFinish","values","variables","label","IntlMessage","rules","required","allPrograms","map","item","index","value","useState","filter","setFilter","isModalVisible","setEditData","setFormType","confirm","Modal","deleteDegree","loadingDelete","tableColumns","key","title","dataIndex","sorter","a","b","utils","width","render","_","elm","permissions","edit","to","size","type","EyeTwoTone","onClick","row","EditTwoTone","twoToneColor","destroy","okText","okType","cancelText","onOk","DeleteTwoTone","visible","onCancel","okButtonProps","htmlType","placeholder","prefix","SearchOutlined","onChange","e","currentTarget","onSearch","icon","PlusCircleOutlined","block","columns","dataSource","allFoodMenus","rowKey","bordered","locale","emptyText","CheckPer","Object","indexOf","Loading","cover"],"sourceRoot":""}