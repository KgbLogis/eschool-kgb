{"version":3,"file":"static/js/5482.30eb0924.chunk.js","mappings":"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","sources":["components/shared-components/FormModal/index.js","graphql/all.js","graphql/food.js","views/app-views/daily-food/form.js","views/app-views/daily-food/index.js","../node_modules/@ant-design/icons-svg/es/asn/DeleteTwoTone.js","../node_modules/@ant-design/icons/es/icons/DeleteTwoTone.js","../node_modules/@ant-design/icons-svg/es/asn/EyeTwoTone.js","../node_modules/@ant-design/icons/es/icons/EyeTwoTone.js","../node_modules/@ant-design/icons-svg/es/asn/PlusCircleOutlined.js","../node_modules/@ant-design/icons/es/icons/PlusCircleOutlined.js"],"sourcesContent":["import React, { forwardRef, useImperativeHandle, useState } from 'react'\r\nimport { Modal } from 'antd';\r\n\r\nconst FormModal = forwardRef(({ children, title, footer, formName = 'form', forceRender = false }, ref) => {\r\n    \r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        handleOpen() {\r\n            setIsModalVisible(true);\r\n        },\r\n        handleCancel () {\r\n            setIsModalVisible(false);\r\n        }\r\n    }));\r\n    \r\n    return (\r\n        <Modal \r\n            width={1000}\r\n            title={title} \r\n            visible={isModalVisible}\r\n            onCancel={ref.current?.handleCancel}\r\n            okText=\"Хадгалах\"\r\n            footer={footer}\r\n            cancelText=\"Болих\"\r\n            forceRender={forceRender}\r\n            okButtonProps={{form:formName, key: 'submit', htmlType: 'submit'}}\r\n        >\r\n            {children}\r\n        </Modal>\r\n    )\r\n});\r\n\r\nexport default FormModal;\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const ALL_SUBJECTS = gql`\r\n    query allSubjects ($offset: Int!, $limit: Int!, $filter: String) {\r\n        allSubjects (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            subSchool {\r\n                id\r\n                name\r\n            }\r\n            subject \r\n            credit\r\n            content\r\n            createUserid{\r\n                teacher{\r\n                    familyName\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_SUBJECTS_PAGINATION = gql`\r\n    query allSubjectsPagination ($page: Int!, $perPage: Int!, $filter: String) {\r\n        allSubjectsPagination (page: $page, perPage: $perPage, filter: $filter) {\r\n            page\r\n            perPage\r\n            pageCount\r\n            totalCount\r\n            records {\r\n                id\r\n                school {\r\n                    id\r\n                    name\r\n                }\r\n                subSchool {\r\n                    id\r\n                    name\r\n                }\r\n                subject \r\n                credit\r\n                content\r\n                createUserid{\r\n                    teacher{\r\n                        familyName\r\n                        name\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const TEACHER_STATUS = gql`\r\n    query allTeacherStatuss {\r\n        allTeacherStatuss {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\nexport const STUDENT_STATUS = gql`\r\n    query allStudentStatuss {\r\n        allStudentStatuss {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\nexport const STUDENT_STATUS_EXTRA = gql`\r\n    query allStudentStatusExtras {\r\n        allStudentStatusExtras {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_USERS = gql`\r\n    query allUsers {\r\n        allUsers {\r\n            id\r\n            username\r\n            email\r\n        }\r\n    }\r\n`;\r\n\r\nexport const USER_BY_USERNAME = gql`\r\n    query userByUsername($username: String!) {\r\n        userByUsername(username: $username) {\r\n            id\r\n            username\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_EMPLOYEES_ATTANDANCE_BY_RANGE = gql`\r\n    query employeesAttandanceByRange ($startDate: DateTime!, $endDate: DateTime!) {\r\n        employeesAttandanceByRange (startDate: $startDate, endDate: $endDate) {\r\n            id\r\n            isIn\r\n            isOut\r\n            timeIn\r\n            timeOut\r\n            user {\r\n                id\r\n                isTeacher\r\n                isEmployee\r\n                teacher {\r\n                    familyName\r\n                    name\r\n                    teacherCode\r\n                }\r\n                employee {\r\n                    familyName\r\n                    name\r\n                    employeeCode\r\n                }\r\n                groups {\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_TEACHER_AND_EMPLOYESS = gql`\r\n    query allAttendaceEmployees {\r\n        allAttendaceEmployees {\r\n            username\r\n            email\r\n            isTeacher\r\n            isEmployee\r\n            teacher {\r\n                teacherCode\r\n                familyName\r\n                name\r\n            }\r\n            employee {\r\n                employeeCode\r\n                familyName\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_EMPLOYEES_COMPARTMENT = gql`\r\n    query allEmployeesCompartment {\r\n        allEmployeesCompartment {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_EMPLOYEES = gql`\r\n    query allEmployees ($filter: String) {\r\n        allEmployees (filter: $filter) {\r\n            id\r\n            user {\r\n                id\r\n                username\r\n                email\r\n                groups {\r\n                    name\r\n                }\r\n            }\r\n            compartment {\r\n                id\r\n                name\r\n            }\r\n            employeeCode\r\n            familyName\r\n            name\r\n            registerNo\r\n            photo\r\n            phone\r\n            phone2\r\n            address\r\n            sex\r\n            birthdate\r\n            birthCity {\r\n                id\r\n            }\r\n            birthDistrict {\r\n                id\r\n            }\r\n            status {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_TEACHERS = gql`\r\n  \tquery allTeachers ($offset: Int!, $limit: Int!, $filter: String) {\r\n        allTeachers (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            user {\r\n                id\r\n                username\r\n                email\r\n            }\r\n            teacherCode\r\n            degree{\r\n                id\r\n            }\r\n            access\r\n            familyName\r\n            name\r\n            registerNo\r\n            photo\r\n            phone\r\n            phone2\r\n            address\r\n            joinDate\r\n            joinBefore\r\n            sex\r\n            birthdate\r\n            birthCity {\r\n                id\r\n                name\r\n            }\r\n            birthDistrict {\r\n                id\r\n                name\r\n            }\r\n            status {\r\n                id\r\n                name\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            subSchool {\r\n                id\r\n                name\r\n            }\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const ALL_STUDENTS = gql`\r\n  \tquery allStudents ($filter: String, $program: Int, $classes: Int, $section: Int) {\r\n        allStudents (filter: $filter, program: $program, classes: $classes, section: $section) {\r\n            id\r\n            user {\r\n                id\r\n                username\r\n                email\r\n            }\r\n            studentCode\r\n            surname\r\n            familyName\r\n            name\r\n            religion\r\n            registerNo\r\n            nationality\r\n            state\r\n            photo\r\n            phone\r\n            address\r\n            activity {\r\n                id\r\n                name\r\n            }\r\n            joinDate\r\n            sex\r\n            birthdate\r\n            classtime {\r\n                id\r\n                name\r\n            }\r\n            birthCity {\r\n                id\r\n                name\r\n            }\r\n            birthDistrict {\r\n                id\r\n                name\r\n            }\r\n            status {\r\n                id\r\n                name\r\n            }\r\n            statusExtra {\r\n                id\r\n                name\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            classes {\r\n                id\r\n                classes\r\n            }\r\n            section {\r\n                id\r\n                section\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            joinSchoolyear {\r\n                id\r\n                schoolyear\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_CITYS = gql`\r\n  \tquery allCitys{\r\n        allCitys {\r\n            id\r\n            name\r\n            code\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const ALL_DISTRICTS = gql`\r\n    query allDistricts {\r\n        allDistricts {\r\n            id\r\n            code\r\n            name\r\n            cityID {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_PROGRAMS = gql`\r\n  \tquery allPrograms{\r\n        allPrograms {\r\n            id\r\n            program\r\n            programMgl\r\n            maxStudentNum\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            subSchool {\r\n                id\r\n                name\r\n            }\r\n            status\r\n            createdAt\r\n            updatedAt\r\n        }\r\n\t  }\r\n`;\r\n\r\nexport const ALL_SCHOOLS = gql`\r\n  \tquery allSchools {\r\n        allSchools {\r\n            id\r\n            name\r\n            nameMgl\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const ALL_SUB_SCHOOLS = gql`\r\n  \tquery allSubSchools{\r\n        allSubSchools {\r\n            id\r\n            name\r\n            nameMgl\r\n            school {\r\n                id\r\n                name\r\n            }\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nexport const ALL_SECTIONS = gql`\r\n    query allSections {\r\n        allSections {\r\n            id\r\n            section\r\n            classes {\r\n                id\r\n                classes\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            teacher{\r\n                id\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            createdAt\r\n            updatedAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_CLASSESS = gql`\r\n    query allClassess ($program: Int!, $offset: Int!, $limit: Int!, $filter: String) {\r\n        allClassess (program: $program, offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            classes\r\n            activity {\r\n                id\r\n                name\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            status\r\n        }\r\n    }\r\n`\r\nexport const ALL_CLASSTIME = gql`\r\n    query allClasstimes {\r\n        allClasstimes {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\nexport const ALL_SCHOOL_YEAR = gql`\r\n    query allSchoolyears {\r\n        allSchoolyears {\r\n            id\r\n            schoolyear\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_PARENTS = gql`\r\n    query allParents ($offset: Int!, $limit: Int!, $filter: String) {\r\n        allParents (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            familyName\r\n            name\r\n            profession\r\n            phone\r\n            address\r\n            student {\r\n                id\r\n                studentCode\r\n                familyName\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SECTION_BY_CLASSES = gql`\r\n    query sectionsByClasses ($classes: Int!) {\r\n        sectionsByClasses (classes: $classes) {\r\n            id\r\n            section\r\n            maxStudentNum\r\n            teacher{\r\n                name\r\n                id\r\n            }\r\n            classes {\r\n                id\r\n                classes\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const TRANSFER_BY_STUDENT = gql`\r\n    query transfersByStudent ($student: Int!) {\r\n        transfersByStudent (student: $student) {\r\n            id\r\n            student {\r\n                familyName\r\n                name\r\n                photo\r\n                studentCode\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            classes {\r\n                id\r\n                classes\r\n            }\r\n            section {\r\n                id\r\n                section\r\n            }\r\n            status {\r\n                id\r\n                name\r\n            }\r\n            statusExtra {\r\n                id\r\n                name\r\n            }\r\n            classtime {\r\n                id\r\n                name\r\n            }\r\n            activity {\r\n                id\r\n                name\r\n            }\r\n            docDate\r\n            docNum\r\n            description\r\n            oldData\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_EVENT_TYPES = gql`\r\n    query allEventTypes {\r\n        allEventTypes {\r\n            id\r\n            name\r\n            color\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_EVENTS = gql`\r\n    query allEvents {\r\n        allEvents {\r\n            id\r\n            title\r\n            description\r\n            content\r\n            startAt\r\n            endAt\r\n            eventType {\r\n                id\r\n                name\r\n                color\r\n            }\r\n        }\r\n    } \r\n`;\r\n\r\nexport const ALL_EVENTS_BY_DATE = gql `\r\n    query allEventsByDate ($date: Date) {\r\n        allEventsByDate (date: $date) {\r\n            id\r\n            title\r\n            description\r\n            content\r\n            startAt\r\n            endAt\r\n            eventType {\r\n                id\r\n                name\r\n                color\r\n            }\r\n        }\r\n    } \r\n`;\r\n\r\nexport const ALL_EVENTS_BY_TYPE = gql`\r\n    query allEventsByType ($id: Int!) {\r\n        allEventsByType (id: $id) {\r\n            id\r\n            title\r\n            description\r\n            content\r\n            startAt\r\n            endAt\r\n            eventType\r\n        }\r\n    }\r\n`;","import { gql } from \"@apollo/client\";\r\n\r\nexport const ALL_FOOD_MENUS = gql`\r\n    query allFoodMenus ($filter: String) {\r\n        allFoodMenus (filter: $filter){\r\n            id\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            name \r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_FOOD_MENU = gql`\r\n    mutation createFoodMenu ($name: String, $program: ID){\r\n        createFoodMenu(name: $name, program: $program){\r\n            foodMenu{\r\n                id\r\n            }\r\n        }\r\n    }\r\n\r\n`;\r\n\r\nexport const UPDATE_FOOD_MENU = gql `\r\n    mutation updateFoodMenu ($id: ID, $name: String, $program: ID){\r\n        updateFoodMenu (id: $id, name: $name, program: $program){\r\n            foodMenu{\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_FOOD_MENU = gql `\r\n    mutation deleteFoodMenu ($id: ID){\r\n        deleteFoodMenu (id: $id){\r\n            foodMenu{\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_FOODS = gql `\r\n    query allFoods ($foodMenu: ID!) {\r\n        allFoods (foodMenu: $foodMenu){\r\n            id\r\n            name\r\n            ingredients\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_FOOD = gql `\r\n    mutation createFood ($foodMenu: ID, $ingredients: String, $name: String){\r\n        createFood (foodMenu: $foodMenu, ingredients: $ingredients, name: $name) {\r\n            food {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_FOOD = gql `\r\n    mutation updateFood ($foodMenu: ID, $id: ID, $ingredients: String, $name: String){\r\n        updateFood (foodMenu: $foodMenu, id: $id, ingredients: $ingredients, name: $name){\r\n            food {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_FOOD = gql `\r\n    mutation deleteFood ($id: ID){\r\n        deleteFood (id: $id){\r\n            food {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_DAILY_MENUS = gql`\r\n    query allDailyMenus {\r\n        allDailyMenus {\r\n            id\r\n            program {\r\n                program\r\n            }\r\n            name\r\n            createdAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const CREATE_DAILY_MENU = gql`\r\n    mutation createDailyMenu ($name: String, $program: ID) {\r\n        createDailyMenu (name: $name, program: $program) {\r\n            dailyMenu {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const DELETE_DAILY_MENU = gql `\r\n    mutation deleteDailyMenu ($id: ID){\r\n        deleteDailyMenu (id: $id){\r\n            dailyMenu {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_DAILY_MENU_FOODS = gql `\r\n    query allDailyMenuFoods ($dailyMenu: ID!){\r\n        allDailyMenuFoods (dailyMenu: $dailyMenu){\r\n            id\r\n            food {\r\n                name\r\n                ingredients\r\n                foodfileSet {\r\n                    image\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const FOOD_BYID = gql `\r\n    query foodById ($id: ID!){\r\n        foodById (id: $id){\r\n            id\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_FOOD_FILES_BYFOOD = gql `\r\n    query allFoodFilesByFood ($food: ID!){\r\n        allFoodFilesByFood (food: $food){\r\n            id\r\n            image\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_FOOD_FILE = gql `\r\n    mutation createFoodFile ($food: ID, $image: Upload!){\r\n        createFoodFile (food: $food, image: $image){\r\n            foodFile {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_FOOD_FILE = gql `\r\n    mutation deleteFoodFile ($id: ID){\r\n        deleteFoodFile (id: $id){\r\n            foodFile {\r\n                image\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const CREATE_DAILY_MENU_FOOD = gql`\r\n    mutation createDailyMenuFood ($dailyMenu: ID, $food: ID) {\r\n        createDailyMenuFood (dailyMenu: $dailyMenu, food: $food) {\r\n            dailyMenuFood {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`","import React, { useEffect, useState } from 'react';\r\nimport { Form, message, Select, Spin } from 'antd';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { ALL_DAILY_MENUS, CREATE_DAILY_MENU } from 'graphql/food';\r\nimport { ALL_PROGRAMS } from 'graphql/all';\r\n\r\nconst { Option } = Select\r\n\r\nfunction DailyMenuForm ({ closeModal, selectedData = {} }) {\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const [create, { loading: createLoading }] = useMutation(CREATE_DAILY_MENU, {\r\n        refetchQueries: [ALL_DAILY_MENUS],\r\n        onCompleted: data => {\r\n            closeModal();\r\n            message.success(\"Амжилттай хадгаллаа\")\r\n        }\r\n    })\r\n\r\n\tconst { data: programs } = useQuery(ALL_PROGRAMS)\r\n    \r\n    const onFinish = values => {\r\n\t\tcreate({ variables: values })\r\n    };\r\n\r\n    return (\r\n        <Spin spinning={createLoading} tip=\"Ачааллаж байна...\">\r\n            <Form  \r\n                id=\"form\"\r\n                layout={'vertical'}\r\n                form={form}\r\n                name=\"form\" \r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item name=\"name\" label={<IntlMessage id=\"name\" />} rules={[\r\n                    {\r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    }\r\n                ]}>\r\n\t\t\t\t\t<Select>\r\n\t\t\t\t\t\t<Option value={'MORNING'} >Өглөө</Option>\r\n\t\t\t\t\t\t<Option value={'AFTERNOON'} >Өдөр</Option>\r\n\t\t\t\t\t\t<Option value={'EVENING'} >Орой</Option>\r\n\t\t\t\t\t</Select>\r\n                </Form.Item>\r\n                <Form.Item name=\"program\" label={<IntlMessage id=\"program\" />} rules={[\r\n                    {\r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    }\r\n                ]}>\r\n\t\t\t\t\t<Select>\r\n\t\t\t\t\t\t{ programs?.allPrograms.map((item, index) => (\r\n\t\t\t\t\t\t\t<Option key={index} value={item.id} >{item.program}</Option>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</Select>\r\n                </Form.Item>\r\n            </Form>\r\n        </Spin>\r\n    );\r\n};\r\n\r\nexport default DailyMenuForm","import React, { useRef } from 'react'\r\nimport { useQuery, useMutation } from '@apollo/client'\r\nimport { Button, Card, message, Modal, Table } from 'antd'\r\nimport { DeleteTwoTone, EyeTwoTone } from '@ant-design/icons';\r\nimport { PlusCircleOutlined } from '@ant-design/icons';\r\nimport { ALL_DAILY_MENUS, DELETE_DAILY_MENU } from 'graphql/food'\r\nimport { Link } from 'react-router-dom'\r\nimport DailyMenuForm from './form'\r\nimport FormModal from 'components/shared-components/FormModal'\r\nimport IntlMessage from 'components/util-components/IntlMessage'\r\nimport moment from 'moment';\r\nimport { CheckPer } from 'hooks/checkPermission';\r\n\r\n\r\nconst Food = () => {\r\n\r\n    const { confirm } = Modal;\r\n    const { data, refetch, loading } = useQuery(ALL_DAILY_MENUS)\r\n\r\n    const [deleteFood] = useMutation(DELETE_DAILY_MENU, {\r\n        onCompleted: data => {\r\n            refetch();\r\n            message.success('Амжилттай устлаа');\r\n        }\r\n    });\r\n    const modalRef = useRef()\r\n\r\n    const permissions = {\r\n        destroy: CheckPer('delete_dailymenu')\r\n    }\r\n\r\n    function handleCancel() {\r\n        modalRef.current.handleCancel()\r\n    }\r\n\r\n    function handleOpen() {\r\n        modalRef.current.handleOpen()\r\n    }\r\n\r\n    const deleteModal = value => {\r\n        confirm({\r\n            title: 'Устгах уу?',\r\n            okText: 'Устгах',\r\n            okType: 'danger',\r\n            cancelText: 'Болих',\r\n            onOk() {\r\n                deleteFood({ variables: { id: value } });\r\n            },\r\n        });\r\n    }\r\n\r\n    const tableColumns = [\r\n        {\r\n            key: 'name',\r\n            title: <IntlMessage id=\"name\" />,\r\n            dataIndex: 'name',\r\n            render: (text) => <span><IntlMessage id={text} /></span>\r\n        },\r\n        {\r\n            key: 'createdAt',\r\n            title: <IntlMessage id=\"date\" />,\r\n            dataIndex: 'createdAt',\r\n            render: (text) => <span>{moment(text).format(\"YYYY-MM-DD\")}</span>\r\n        },\r\n        {\r\n            key: 'actions',\r\n            title: <IntlMessage id=\"main.action\" />,\r\n            width: '15vw',\r\n            dataIndex: 'actions',\r\n            render: (_, elm) => (\r\n                <div className=\"text-center\">\r\n                    <Link to={`food/${elm.id}`}>\r\n                        <Button\r\n                            size=\"small\"\r\n                            type=\"text\" \r\n                            icon={<EyeTwoTone />}\r\n                        > <IntlMessage id=\"show\" />\r\n                        </Button>\r\n                    </Link>\r\n                    {permissions.destroy === true &&\r\n                        <Button size=\"small\" onClick={() => deleteModal(elm)} type=\"text\" icon={<DeleteTwoTone twoToneColor=\"#f42f2f\" />} > <IntlMessage id=\"delete\" />\r\n                        </Button>\r\n                    }\r\n                </div>\r\n            )\r\n        }\r\n    ];\r\n\r\n    return (\r\n        <>\r\n            <FormModal ref={modalRef}>\r\n                <DailyMenuForm\r\n                    closeModal={handleCancel}\r\n                />\r\n            </FormModal>\r\n            <div className='flex justify-end'>\r\n                <Button onClick={handleOpen} type=\"primary\" icon={<PlusCircleOutlined />} > <IntlMessage id=\"add_new\" /> </Button>\r\n            </div>\r\n            <Card>\r\n                <Table\r\n                    columns={tableColumns}\r\n                    rowKey={record => record.id}\r\n                    size='small'\r\n                    bordered\r\n                    dataSource={data?.allDailyMenus}\r\n                    loading={loading}\r\n                />\r\n            </Card>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Food","// This icon file is generated automatically.\nvar DeleteTwoTone = { \"icon\": function render(primaryColor, secondaryColor) { return { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M292.7 840h438.6l24.2-512h-487z\", \"fill\": secondaryColor } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M864 256H736v-80c0-35.3-28.7-64-64-64H352c-35.3 0-64 28.7-64 64v80H160c-17.7 0-32 14.3-32 32v32c0 4.4 3.6 8 8 8h60.4l24.7 523c1.6 34.1 29.8 61 63.9 61h454c34.2 0 62.3-26.8 63.9-61l24.7-523H888c4.4 0 8-3.6 8-8v-32c0-17.7-14.3-32-32-32zm-504-72h304v72H360v-72zm371.3 656H292.7l-24.2-512h487l-24.2 512z\", \"fill\": primaryColor } }] }; }, \"name\": \"delete\", \"theme\": \"twotone\" };\nexport default DeleteTwoTone;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport DeleteTwoToneSvg from \"@ant-design/icons-svg/es/asn/DeleteTwoTone\";\nimport AntdIcon from '../components/AntdIcon';\nvar DeleteTwoTone = function DeleteTwoTone(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: DeleteTwoToneSvg\n  }));\n};\nDeleteTwoTone.displayName = 'DeleteTwoTone';\nexport default /*#__PURE__*/React.forwardRef(DeleteTwoTone);","// This icon file is generated automatically.\nvar EyeTwoTone = { \"icon\": function render(primaryColor, secondaryColor) { return { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M81.8 537.8a60.3 60.3 0 010-51.5C176.6 286.5 319.8 186 512 186c-192.2 0-335.4 100.5-430.2 300.3a60.3 60.3 0 000 51.5C176.6 737.5 319.9 838 512 838c-192.1 0-335.4-100.5-430.2-300.2z\", \"fill\": secondaryColor } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M512 258c-161.3 0-279.4 81.8-362.7 254C232.6 684.2 350.7 766 512 766c161.4 0 279.5-81.8 362.7-254C791.4 339.8 673.3 258 512 258zm-4 430c-97.2 0-176-78.8-176-176s78.8-176 176-176 176 78.8 176 176-78.8 176-176 176z\", \"fill\": secondaryColor } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M942.2 486.2C847.4 286.5 704.1 186 512 186c-192.2 0-335.4 100.5-430.2 300.3a60.3 60.3 0 000 51.5C176.6 737.5 319.9 838 512 838c192.2 0 335.4-100.5 430.2-300.3 7.7-16.2 7.7-35 0-51.5zM512 766c-161.3 0-279.4-81.8-362.7-254C232.6 339.8 350.7 258 512 258s279.4 81.8 362.7 254C791.5 684.2 673.4 766 512 766z\", \"fill\": primaryColor } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M508 336c-97.2 0-176 78.8-176 176s78.8 176 176 176 176-78.8 176-176-78.8-176-176-176zm0 288c-61.9 0-112-50.1-112-112s50.1-112 112-112 112 50.1 112 112-50.1 112-112 112z\", \"fill\": primaryColor } }] }; }, \"name\": \"eye\", \"theme\": \"twotone\" };\nexport default EyeTwoTone;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport EyeTwoToneSvg from \"@ant-design/icons-svg/es/asn/EyeTwoTone\";\nimport AntdIcon from '../components/AntdIcon';\nvar EyeTwoTone = function EyeTwoTone(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: EyeTwoToneSvg\n  }));\n};\nEyeTwoTone.displayName = 'EyeTwoTone';\nexport default /*#__PURE__*/React.forwardRef(EyeTwoTone);","// This icon file is generated automatically.\nvar PlusCircleOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M696 480H544V328c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v152H328c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h152v152c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V544h152c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8z\" } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z\" } }] }, \"name\": \"plus-circle\", \"theme\": \"outlined\" };\nexport default PlusCircleOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport PlusCircleOutlinedSvg from \"@ant-design/icons-svg/es/asn/PlusCircleOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar PlusCircleOutlined = function PlusCircleOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: PlusCircleOutlinedSvg\n  }));\n};\nPlusCircleOutlined.displayName = 'PlusCircleOutlined';\nexport default /*#__PURE__*/React.forwardRef(PlusCircleOutlined);"],"names":["FormModal","forwardRef","ref","children","title","footer","formName","forceRender","useState","isModalVisible","setIsModalVisible","useImperativeHandle","handleOpen","handleCancel","width","visible","onCancel","current","okText","cancelText","okButtonProps","form","key","htmlType","ALL_SUBJECTS","gql","ALL_SUBJECTS_PAGINATION","ALL_USERS","ALL_EMPLOYEES_ATTANDANCE_BY_RANGE","ALL_EMPLOYEES_COMPARTMENT","ALL_EMPLOYEES","ALL_TEACHERS","ALL_STUDENTS","ALL_CITYS","ALL_DISTRICTS","ALL_PROGRAMS","ALL_SCHOOLS","ALL_SUB_SCHOOLS","ALL_SECTIONS","ALL_CLASSESS","ALL_CLASSTIME","ALL_SCHOOL_YEAR","ALL_PARENTS","SECTION_BY_CLASSES","TRANSFER_BY_STUDENT","ALL_EVENT_TYPES","ALL_EVENTS","ALL_EVENTS_BY_DATE","ALL_FOOD_MENUS","CREATE_FOOD_MENU","UPDATE_FOOD_MENU","DELETE_FOOD_MENU","ALL_FOODS","CREATE_FOOD","UPDATE_FOOD","DELETE_FOOD","ALL_DAILY_MENUS","CREATE_DAILY_MENU","DELETE_DAILY_MENU","ALL_DAILY_MENU_FOODS","ALL_FOOD_FILES_BYFOOD","CREATE_FOOD_FILE","CREATE_DAILY_MENU_FOOD","Option","Select","closeModal","selectedData","Form","useMutation","refetchQueries","onCompleted","data","message","create","createLoading","loading","programs","useQuery","spinning","tip","id","layout","name","onFinish","values","variables","label","IntlMessage","rules","required","value","allPrograms","map","item","index","program","confirm","Modal","refetch","deleteFood","modalRef","useRef","permissions","CheckPer","tableColumns","dataIndex","render","text","moment","format","_","elm","className","to","size","type","icon","EyeTwoTone","onClick","okType","onOk","DeleteTwoTone","twoToneColor","PlusCircleOutlined","columns","rowKey","record","bordered","dataSource","allDailyMenus","primaryColor","secondaryColor","props","React","AntdIcon","_objectSpread","DeleteTwoToneSvg","displayName","EyeTwoToneSvg","PlusCircleOutlinedSvg"],"sourceRoot":""}