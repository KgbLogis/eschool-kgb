import { Fragment, useState } from 'react'
import { Dialog, Transition } from '@headlessui/react'
import {
  MenuAlt2Icon,
  XIcon,
} from '@heroicons/react/outline'
import AppViews from 'views/app-views'
import NavProfile from 'components/layout-components/NavProfile'
import NavLanguage from 'components/layout-components/NavLanguage'
import { Link } from 'react-router-dom'
import { useMenu } from 'hooks/useMenu';
import Scrollbars from 'react-custom-scrollbars'
import { APP_PREFIX_PATH } from 'configs/AppConfig';
import useDomain from 'hooks/useDomain';
import MenuItem from 'components/layout-components/MenuItem';
import { SupportSVG } from 'assets/svg/icon';

export default function AppLayout() {
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false)

  const { mainNavTree } = useMenu()
	const { domainData } = useDomain()

  return (
    <>
      <div className="min-h-screen bg-gradient-to-tr from-mkp to-mkp-300 flex">

        {/* Sidebar */}
        <div className="hidden h-full w-75-em sticky top-0 md:block">
          <div className="w-full py-6 flex flex-col items-center">
            <div className="flex-shrink-0 flex px-2 b items-center">
              <img
                className="h-auto w-2/5 rounded-4 "
                src={domainData.logo}
                alt="Logo"
              />
            </div>
            <Scrollbars className='flex-none mt-6 min-h-85-screen w-full space-y-2 rounded-5' autoHide>
              <ul className='px-2'>
                { mainNavTree.map((menu, index) => (
                  <MenuItem menu={menu} key={index} />
                ))}
              </ul>
            </Scrollbars>
          </div>
        </div>

        {/* Mobile menu */}
        <Transition.Root show={mobileMenuOpen} as={Fragment}>
          <Dialog as="div" className="md:hidden" onClose={setMobileMenuOpen}>
            <div className="fixed inset-0 z-40 flex">
              <Transition.Child
                as={Fragment}
                enter="transition-opacity ease-linear duration-300"
                enterFrom="opacity-0"
                enterTo="opacity-100"
                leave="transition-opacity ease-linear duration-300"
                leaveFrom="opacity-100"
                leaveTo="opacity-0"
              >
                <Dialog.Overlay className="fixed inset-0 bg-gray-600 bg-opacity-75" />
              </Transition.Child>
              <Transition.Child
                as={Fragment}
                enter="transition ease-in-out duration-300 transform"
                enterFrom="-translate-x-full"
                enterTo="translate-x-0"
                leave="transition ease-in-out duration-300 transform"
                leaveFrom="translate-x-0"
                leaveTo="-translate-x-full"
              >
                <div className="relative max-w-xs w-full bg-mkp pt-5 pb-4 flex-1 flex flex-col">
                  <Transition.Child
                    as={Fragment}
                    enter="ease-in-out duration-300"
                    enterFrom="opacity-0"
                    enterTo="opacity-100"
                    leave="ease-in-out duration-300"
                    leaveFrom="opacity-100"
                    leaveTo="opacity-0"
                  >
                    <div className="absolute top-1 right-0 -mr-14 p-1">
                      <button
                        type="button"
                        className="h-8 w-8 rounded-full flex items-center justify-center"
                        onClick={() => setMobileMenuOpen(false)}
                      >
                        <XIcon className="h-6 w-6 text-white" aria-hidden="true" />
                        <span className="sr-only">Close sidebar</span>
                      </button>
                    </div>
                  </Transition.Child>
                  <div className="flex-shrink-0 px-4 flex items-center">
                    <img
                      className="h-8 w-auto"
                      src={domainData.logo}
                      alt="Logo"
                    />
                  </div>
                  <div className="mt-5 flex-1 h-0 px-2 overflow-y-auto">
                    <nav className="h-full flex flex-col">
                      <div className="space-y-1">
                        {mainNavTree.map((item, index) => (
                          <MenuItem 
                            key={index} 
                            menu={item} 
                            onClick={() => setMobileMenuOpen(false)}
                          />
                        ))}
                      </div>
                    </nav>
                  </div>
                </div>
              </Transition.Child>
              <div className="flex-shrink-0 w-14" aria-hidden="true">
              </div>
            </div>
          </Dialog>
        </Transition.Root>

        {/* Content area */}
        <div className="flex-1 flex flex-col overflow-hidden rounded-4 m-4 md:border-l-[12px] md:border-mkp-400 bg-background md:rounded-10">
          <header className="w-full">
            <div className="relative z-10 flex-shrink-0 h-16 flex">
              <button
                type="button"
                className="px-4 text-gray-500 md:hidden"
                onClick={() => setMobileMenuOpen(true)}
              >
                <span className="sr-only">Open sidebar</span>
                <MenuAlt2Icon className="h-6 w-6" aria-hidden="true" />
              </button>
              <div className="flex-1 flex justify-between px-4 sm:px-6">
                <div className="flex-1 flex">
                  
                </div>
                <div className="ml-2 flex items-center sm:ml-6">
                  {/* Profile dropdown */}
                  <Link to={`${APP_PREFIX_PATH}/support`}>
                    <SupportSVG className='h-6 w-6' />
                  </Link>
                  <NavLanguage />
                  <NavProfile />
                </div>
              </div>
            </div>
          </header>

          {/* AppViews */}
          <main className="min-w-0 h-full flex flex-col mt-4 p-4 lg:order-last">
            <AppViews />
          </main>
        </div>
      </div>
    </>
  )
}